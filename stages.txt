[{"_id": "678abdf1bdb869a10b24512b", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/Medical-Equipment-Suppliers1.csv", "in": [], "out": ["678abdf1bdb869a10b24512c"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "Medical-Equipment-Suppliers1", "comment": "", "pipeline_id": "678abdf1bdb869a10b245128", "sub_type": "HDFS", "stage_type": "source", "stage_attributes": {"url": "/FileStore/platform/uploadedSourceFiles/Medical-Equipment-Suppliers1.csv", "filename": "Medical-Equipment-Suppliers1.csv", "delimiter": ",", "file_type": "Delimeted", "dbfs_token": "", "dbfs_domain": "", "is_header": "Use Header Line", "domain": "http://172.31.59.158", "port": "40070", "dirPath": "/FileStore/platform", "server_url": "/nexusMax/NexusMaxPlatform/uploads/platform/"}, "status": "new", "position": {"x": -80, "y": 160}, "shape_attributes": {"image": {"refHeight": "100%", "xlinkHref": "assets/svg/source/hdfs-source.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "source", "text": "Medical-Equipment-Suppliers1", "slug": "hdfs", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": 0}, {"inherited": true, "checked": true, "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "participationbegindate", "alias": "participationbegindate", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "businessname", "alias": "businessname", "type": "String", "position": 3}, {"inherited": true, "checked": true, "field": "practicename", "alias": "practicename", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "practiceaddress1", "alias": "practiceaddress1", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "practiceaddress2", "alias": "practiceaddress2", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "practicecity", "alias": "practicecity", "type": "String", "position": 7}, {"inherited": true, "checked": true, "field": "practicestate", "alias": "practicestate", "type": "String", "position": 8}, {"inherited": true, "checked": true, "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": 9}, {"inherited": true, "checked": true, "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": 10}, {"inherited": true, "checked": true, "field": "specialitieslist", "alias": "specialitieslist", "type": "String", "position": 11}, {"inherited": true, "checked": true, "field": "providertypelist", "alias": "providertypelist", "type": "String", "position": 12}, {"inherited": true, "checked": true, "field": "supplieslist", "alias": "supplieslist", "type": "String", "position": 13}, {"inherited": true, "checked": true, "field": "latitude", "alias": "latitude", "type": "real", "position": 14}, {"inherited": true, "checked": true, "field": "longitude", "alias": "longitude", "type": "real", "position": 15}, {"inherited": true, "checked": true, "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": 16}], "actual_schema": [{"inherited": true, "checked": true, "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": 0}, {"inherited": true, "checked": true, "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "participationbegindate", "alias": "participationbegindate", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "businessname", "alias": "businessname", "type": "String", "position": 3}, {"inherited": true, "checked": true, "field": "practicename", "alias": "practicename", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "practiceaddress1", "alias": "practiceaddress1", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "practiceaddress2", "alias": "practiceaddress2", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "practicecity", "alias": "practicecity", "type": "String", "position": 7}, {"inherited": true, "checked": true, "field": "practicestate", "alias": "practicestate", "type": "String", "position": 8}, {"inherited": true, "checked": true, "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": 9}, {"inherited": true, "checked": true, "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": 10}, {"inherited": true, "checked": true, "field": "specialitieslist", "alias": "specialitieslist", "type": "String", "position": 11}, {"inherited": true, "checked": true, "field": "providertypelist", "alias": "providertypelist", "type": "String", "position": 12}, {"inherited": true, "checked": true, "field": "supplieslist", "alias": "supplieslist", "type": "String", "position": 13}, {"inherited": true, "checked": true, "field": "latitude", "alias": "latitude", "type": "real", "position": 14}, {"inherited": true, "checked": true, "field": "longitude", "alias": "longitude", "type": "real", "position": 15}, {"inherited": true, "checked": true, "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": 16}], "selected_schema": [], "created_at": "2025-01-17 20:30:41.409000", "joinSchema": [], "updated_at": "2025-01-17 20:31:34.292000", "__v": 0, "sampleData": [{"provider_id": 23280121, "acceptsassignement": true, "participationbegindate": 1705449600000, "businessname": "39 PHARMACY CORPORATION", "practicename": "39 PHARMACY", "practiceaddress1": "13671 BEACH BLVD STE B", "practiceaddress2": null, "practicecity": "WESTMINSTER", "practicestate": "CA", "practicezip9code": 926833200, "telephonenumber": 7143791099, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "latitude": 33.7635989831, "longitude": -117.9903239934, "is_contracted_for_cba": false}, {"provider_id": 20575847, "acceptsassignement": true, "participationbegindate": 1705017600000, "businessname": "APPARO, INC.", "practicename": "EVERCARE MEDICAL SOLUTIONS INC", "practiceaddress1": "2102 BUTTON LN", "practiceaddress2": "STE 105", "practicecity": "LA GRANGE", "practicestate": "KY", "practicezip9code": 400316720, "telephonenumber": 5022229222, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 38.39402, "longitude": -85.40254, "is_contracted_for_cba": false}, {"provider_id": 23280163, "acceptsassignement": true, "participationbegindate": 1704844800000, "businessname": "HACKENSACK PHARMACY INC", "practicename": "HACKENSACK PHARMACY", "practiceaddress1": "441 PASSAIC STREET", "practiceaddress2": null, "practicecity": "HACKENSACK", "practicestate": "NJ", "practicezip9code": 7601, "telephonenumber": 2014881230, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 40.8989254747, "longitude": -74.0556728784, "is_contracted_for_cba": false}, {"provider_id": 23280349, "acceptsassignement": false, "participationbegindate": 1701820800000, "businessname": "PROSTHETIC AND ORTHOTIC ASSOCIATES OF SOUTH CAROLINA LLC", "practicename": "PROSTHETIC AND ORTHOTIC ASSOC OF SC", "practiceaddress1": "4900 OHEAR AVE", "practiceaddress2": "STE 100", "practicecity": "CHARLESTON", "practicestate": "SC", "practicezip9code": 294055091, "telephonenumber": 8432773919, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Limb Prostheses", "latitude": 32.8833188968, "longitude": -79.9756620172, "is_contracted_for_cba": false}, {"provider_id": 20533685, "acceptsassignement": true, "participationbegindate": 1701648000000, "businessname": "OPTUM PHARMACY 705, LLC", "practicename": "OPTUM PHARMACY 705, LLC", "practiceaddress1": "3539 BLUECUTT RD", "practiceaddress2": null, "practicecity": "COLUMBUS", "practicestate": "MS", "practicezip9code": 397051324, "telephonenumber": 8663068900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.51717, "longitude": -88.4165, "is_contracted_for_cba": false}, {"provider_id": 23280487, "acceptsassignement": false, "participationbegindate": 1700179200000, "businessname": "MEDIX SUPPLIES INC", "practicename": "MEDIX SUPPLIES INC", "practiceaddress1": "5301 LAUREL CANYON BLVD", "practiceaddress2": "STE 136", "practicecity": "VALLEY VILLAGE", "practicestate": "CA", "practicezip9code": 916072778, "telephonenumber": 8188243222, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 34.1669129879, "longitude": -118.3969639793, "is_contracted_for_cba": false}, {"provider_id": 20303273, "acceptsassignement": true, "participationbegindate": 1700006400000, "businessname": "MS EYE CARE PA", "practicename": "MS EYE CARE PA", "practiceaddress1": "504 EASEL ST", "practiceaddress2": null, "practicecity": "TAYLOR", "practicestate": "MS", "practicezip9code": 386731003, "telephonenumber": 6622349394, "specialitieslist": "Optometrist", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 34.2907, "longitude": -89.60851, "is_contracted_for_cba": false}, {"provider_id": 23280193, "acceptsassignement": true, "participationbegindate": 1704326400000, "businessname": "DEVINES PHARMACY INC", "practicename": "DEVINE'S PHARMACY", "practiceaddress1": "1949 OAK TREE RD", "practiceaddress2": null, "practicecity": "EDISON", "practicestate": "NJ", "practicezip9code": 88202036, "telephonenumber": 7325497117, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Urological Supplies", "latitude": 40.573874987, "longitude": -74.3662550367, "is_contracted_for_cba": false}, {"provider_id": 20680583, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #758", "practiceaddress1": "18 S MARSHALL AVE", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "MN", "practicezip9code": 560871613, "telephonenumber": 5077234313, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44.23843, "longitude": -94.97607, "is_contracted_for_cba": false}, {"provider_id": 20680685, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #727", "practiceaddress1": "223 STATE ST N", "practiceaddress2": null, "practicecity": "WASECA", "practicestate": "MN", "practicezip9code": 560932930, "telephonenumber": 5078351610, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44.07901, "longitude": -93.50745, "is_contracted_for_cba": false}, {"provider_id": 20303297, "acceptsassignement": true, "participationbegindate": 1699488000000, "businessname": "DYNAMEDICS MEDICAL SOLUTIONS, INC.", "practicename": "DYNAMEDICS MEDICAL SOLUTIONS INC", "practiceaddress1": "1053 BULLARD CT", "practiceaddress2": "STE AB", "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276156801, "telephonenumber": 8006680021, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 35.86943, "longitude": -78.62087, "is_contracted_for_cba": false}, {"provider_id": 20347331, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "SOUTH BROWARD HOSPITAL DISTRICT", "practicename": "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "practiceaddress1": "777 S DOUGLAS RD", "practiceaddress2": null, "practicecity": "PEMBROKE PINES", "practicestate": "FL", "practicezip9code": 330251353, "telephonenumber": 9545185675, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 26.00298, "longitude": -80.17975, "is_contracted_for_cba": false}, {"provider_id": 20412839, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "1721 MILLER ST", "practiceaddress2": null, "practicecity": "LA CROSSE", "practicestate": "WI", "practicezip9code": 546015217, "telephonenumber": 6087846500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.79506, "longitude": -91.25194, "is_contracted_for_cba": false}, {"provider_id": 20590727, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "MED-SHOP OF HUGHES SPRINGS INC", "practicename": "THE MED-SHOP PHARMACY", "practiceaddress1": "111 E 2ND", "practiceaddress2": null, "practicecity": "HUGHES SPRINGS", "practicestate": "TX", "practicezip9code": 756562596, "telephonenumber": 9036393508, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": null, "supplieslist": "Nebulizer Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.9989140169, "longitude": -94.6311369979, "is_contracted_for_cba": false}, {"provider_id": 20339183, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10174", "practiceaddress1": "700 ATLANTIC AVENUE", "practiceaddress2": null, "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21112813, "telephonenumber": 6177377232, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.35258, "longitude": -71.05528, "is_contracted_for_cba": false}, {"provider_id": 20339513, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01021", "practiceaddress1": "500 ROUTE 134", "practiceaddress2": "STE 2", "practicecity": "SOUTH DENNIS", "practicestate": "MA", "practicezip9code": 26603430, "telephonenumber": 5083980133, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.69601, "longitude": -70.1533, "is_contracted_for_cba": false}, {"provider_id": 20339675, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01264", "practiceaddress1": "704 CENTRE ST", "practiceaddress2": null, "practicecity": "JAMAICA PLAIN", "practicestate": "MA", "practicezip9code": 21302516, "telephonenumber": 6175243933, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.3116, "longitude": -71.11428, "is_contracted_for_cba": false}, {"provider_id": 20339729, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00915", "practiceaddress1": "19 DODGE ST", "practiceaddress2": "STE A", "practicecity": "BEVERLY", "practicestate": "MA", "practicezip9code": 19151705, "telephonenumber": 9789270060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.57611, "longitude": -70.89147, "is_contracted_for_cba": false}, {"provider_id": 20339705, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01853", "practiceaddress1": "737 BRIDGE ST", "practiceaddress2": null, "practicecity": "WEYMOUTH", "practicestate": "MA", "practicezip9code": 21912139, "telephonenumber": 7813353331, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.24513, "longitude": -70.93752, "is_contracted_for_cba": false}, {"provider_id": 20339459, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01049", "practiceaddress1": "942 A HYDE PARK AVE", "practiceaddress2": null, "practicecity": "HYDE PARK", "practicestate": "MA", "practicezip9code": 21363269, "telephonenumber": 6173645141, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.26762, "longitude": -71.12081, "is_contracted_for_cba": false}, {"provider_id": 20339477, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00318", "practiceaddress1": "637 LOWELL STREET", "practiceaddress2": null, "practicecity": "PEABODY", "practicestate": "MA", "practicezip9code": 19602318, "telephonenumber": 9785355465, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.55041, "longitude": -70.99903, "is_contracted_for_cba": false}, {"provider_id": 20339465, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01130", "practiceaddress1": "615-621 BELMONT AVE", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "MA", "practicezip9code": 11082439, "telephonenumber": 4137322998, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.08591, "longitude": -72.55645, "is_contracted_for_cba": false}, {"provider_id": 20315537, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01875", "practiceaddress1": "414 UNION STREET", "practiceaddress2": null, "practicecity": "ASHLAND", "practicestate": "MA", "practicezip9code": 17212154, "telephonenumber": 5088817606, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.25558, "longitude": -71.46559, "is_contracted_for_cba": false}, {"provider_id": 20314871, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16831", "practiceaddress1": "14500 W COLFAX AVE", "practiceaddress2": "UNIT B1", "practicecity": "LAKEWOOD", "practicestate": "CO", "practicezip9code": 804013203, "telephonenumber": 3032739949, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.73343, "longitude": -105.15468, "is_contracted_for_cba": false}, {"provider_id": 20314601, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10139", "practiceaddress1": "7300 N FM 620 RD", "practiceaddress2": null, "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787264535, "telephonenumber": 5122499448, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.4046910118, "longitude": -97.8543930025, "is_contracted_for_cba": false}, {"provider_id": 20314727, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10671", "practiceaddress1": "10420 FM 1464 RD", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "TX", "practicezip9code": 774072044, "telephonenumber": 2812400123, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.68566, "longitude": -95.70149, "is_contracted_for_cba": false}, {"provider_id": 20314799, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10576", "practiceaddress1": "3802 E BROAD ST", "practiceaddress2": null, "practicecity": "MANSFIELD", "practicestate": "TX", "practicezip9code": 760635617, "telephonenumber": 8174731373, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.58005, "longitude": -97.07183, "is_contracted_for_cba": false}, {"provider_id": 20336189, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 05829", "practiceaddress1": "500 DUNDEE AVENUE", "practiceaddress2": null, "practicecity": "ELGIN", "practicestate": "IL", "practicezip9code": 601203819, "telephonenumber": 8476952398, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.04685, "longitude": -88.27568, "is_contracted_for_cba": false}, {"provider_id": 20336165, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 02942", "practiceaddress1": "401 W ARMITAGE AVE", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606144512, "telephonenumber": 3123373035, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.91822, "longitude": -87.6396, "is_contracted_for_cba": false}, {"provider_id": 20337119, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09086", "practiceaddress1": "670 EL CERRITO PLZ", "practiceaddress2": null, "practicecity": "EL CERRITO", "practicestate": "CA", "practicezip9code": 945304010, "telephonenumber": 5105245895, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.9006, "longitude": -122.29896, "is_contracted_for_cba": false}, {"provider_id": 20315237, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02054", "practiceaddress1": "136 NAHATAN ST", "practiceaddress2": null, "practicecity": "NORWOOD", "practicestate": "MA", "practicezip9code": 20624252, "telephonenumber": 7817692422, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.19497, "longitude": -71.20078, "is_contracted_for_cba": false}, {"provider_id": 20337071, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09320", "practiceaddress1": "686 LIGHTHOUSE AVE", "practiceaddress2": null, "practicecity": "MONTEREY", "practicestate": "CA", "practicezip9code": 939401008, "telephonenumber": 8316555411, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.6142, "longitude": -121.90211, "is_contracted_for_cba": false}, {"provider_id": 20337125, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09099", "practiceaddress1": "4020 FREMONT HUB", "practiceaddress2": null, "practicecity": "FREMONT", "practicestate": "CA", "practicezip9code": 945381322, "telephonenumber": 5107975505, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.54844, "longitude": -121.98849, "is_contracted_for_cba": false}, {"provider_id": 20337107, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09130", "practiceaddress1": "175 41ST ST", "practiceaddress2": null, "practicecity": "OAKLAND", "practicestate": "CA", "practicezip9code": 946115206, "telephonenumber": 5106583496, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.82668, "longitude": -122.253, "is_contracted_for_cba": false}, {"provider_id": 20336945, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09922", "practiceaddress1": "3950 W POINT LOMA BLVD", "practiceaddress2": null, "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921105601, "telephonenumber": 6195231440, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.75385, "longitude": -117.22353, "is_contracted_for_cba": false}, {"provider_id": 20337095, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09146", "practiceaddress1": "575 S CITRUS AVE", "practiceaddress2": null, "practicecity": "COVINA", "practicestate": "CA", "practicezip9code": 917232930, "telephonenumber": 6263310036, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.07949, "longitude": -117.89023, "is_contracted_for_cba": false}, {"provider_id": 20337077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09128", "practiceaddress1": "2314 SANTA CLARA AVE", "practiceaddress2": null, "practicecity": "ALAMEDA", "practicestate": "CA", "practicezip9code": 945014522, "telephonenumber": 5105234929, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.76554, "longitude": -122.24272, "is_contracted_for_cba": false}, {"provider_id": 20335265, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #05421", "practiceaddress1": "2375 DRAUDEN RD", "practiceaddress2": null, "practicecity": "PLAINFIELD", "practicestate": "IL", "practicezip9code": 605862213, "telephonenumber": 8155770457, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.56429, "longitude": -88.22942, "is_contracted_for_cba": false}, {"provider_id": 20336891, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09158", "practiceaddress1": "850 OROVILLE DAM BLVD E", "practiceaddress2": null, "practicecity": "OROVILLE", "practicestate": "CA", "practicezip9code": 959655722, "telephonenumber": 5305341554, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.49975, "longitude": -121.56552, "is_contracted_for_cba": false}, {"provider_id": 20337401, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09796", "practiceaddress1": "490 RODRIGUEZ ST", "practiceaddress2": null, "practicecity": "WATSONVILLE", "practicestate": "CA", "practicezip9code": 950764522, "telephonenumber": 8317229454, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.90975, "longitude": -121.75919, "is_contracted_for_cba": false}, {"provider_id": 20340605, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01009", "practiceaddress1": "21 AUSTIN ST", "practiceaddress2": "BUNKER HILL MALL", "practicecity": "CHARLESTOWN", "practicestate": "MA", "practicezip9code": 21293502, "telephonenumber": 6172422950, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.37473, "longitude": -71.06652, "is_contracted_for_cba": false}, {"provider_id": 20338901, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY#01803", "practiceaddress1": "2 W CENTER STREET", "practiceaddress2": null, "practicecity": "WEST BRIDGEWATER", "practicestate": "MA", "practicezip9code": 23791741, "telephonenumber": 5085888050, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.01546, "longitude": -71.03963, "is_contracted_for_cba": false}, {"provider_id": 20339309, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00654", "practiceaddress1": "344 GREAT RD", "practiceaddress2": null, "practicecity": "ACTON", "practicestate": "MA", "practicezip9code": 17204044, "telephonenumber": 9782649130, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.50292, "longitude": -71.42002, "is_contracted_for_cba": false}, {"provider_id": 20339297, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07242", "practiceaddress1": "4201 MONTANO RD NW", "practiceaddress2": null, "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871205743, "telephonenumber": 5059226323, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.14999, "longitude": -106.68672, "is_contracted_for_cba": false}, {"provider_id": 20344799, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONGS DRUGS #09835", "practiceaddress1": "2750 WOODLAWN DR", "practiceaddress2": null, "practicecity": "HONOLULU", "practicestate": "HI", "practicezip9code": 968221841, "telephonenumber": 8089882151, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 21.30764, "longitude": -157.8097, "is_contracted_for_cba": false}, {"provider_id": 23279953, "acceptsassignement": false, "participationbegindate": 1713916800000, "businessname": "TOTAL MEDICAL EQUIPMENT LLC", "practicename": "TOTAL MEDICAL EQUIPMENT LLC", "practiceaddress1": "12975 JEFFERSON AVE", "practiceaddress2": "STE 105", "practicecity": "NEWPORT NEWS", "practicestate": "VA", "practicezip9code": 236081786, "telephonenumber": 5404139331, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf", "latitude": 37.1586265448, "longitude": -76.5364244844, "is_contracted_for_cba": false}, {"provider_id": 23278993, "acceptsassignement": true, "participationbegindate": 1713225600000, "businessname": "INFUSE ALASKA LLC", "practicename": "INFUSE ALASKA", "practiceaddress1": "6250 TUTTLE PL", "practiceaddress2": "STE 7", "practicecity": "ANCHORAGE", "practicestate": "AK", "practicezip9code": 995072094, "telephonenumber": 9072229979, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 61.1642726842, "longitude": -149.8396925115, "is_contracted_for_cba": false}, {"provider_id": 34359446, "acceptsassignement": true, "participationbegindate": 1713139200000, "businessname": "FRESH MEADOW PHARMACY INC", "practicename": "FRESH MEADOW PHARMACY INC.", "practiceaddress1": "18408 HORACE HARDING EXPY", "practiceaddress2": null, "practicecity": "FRESH MEADOWS", "practicestate": "NY", "practicezip9code": 113652124, "telephonenumber": 7182609353, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7396220093, "longitude": -73.789835411, "is_contracted_for_cba": false}, {"provider_id": 23279029, "acceptsassignement": true, "participationbegindate": 1712707200000, "businessname": "OPTIMAL VERSATILITY", "practicename": "OPTIMAL VERSATILITY", "practiceaddress1": "601 HERITAGE DR", "practiceaddress2": "STE 207", "practicecity": "JUPITER", "practicestate": "FL", "practicezip9code": 334582777, "telephonenumber": 5618214323, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Urological Supplies", "latitude": 26.8895550104, "longitude": -80.1056359988, "is_contracted_for_cba": false}, {"provider_id": 23279041, "acceptsassignement": true, "participationbegindate": 1712620800000, "businessname": "MY SUPER PHARMACY", "practicename": "MY SUPER PHARMACY", "practiceaddress1": "8601 NW SOUTH RIVER DR", "practiceaddress2": null, "practicecity": "MEDLEY", "practicestate": "FL", "practicezip9code": 331667428, "telephonenumber": 7864854170, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 25.8511610077, "longitude": -80.3195020185, "is_contracted_for_cba": false}, {"provider_id": 23279077, "acceptsassignement": false, "participationbegindate": 1712188800000, "businessname": "AMERICARE OF AMITYVILLE PHARMACY INC", "practicename": "AMERICARE OF AMITYVILLE PHARMACY IN", "practiceaddress1": "357 BROADWAY", "practiceaddress2": null, "practicecity": "AMITYVILLE", "practicestate": "NY", "practicezip9code": 117012748, "telephonenumber": 6316165101, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs", "latitude": 40.6840682219, "longitude": -73.4175341546, "is_contracted_for_cba": false}, {"provider_id": 20328287, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02408", "practiceaddress1": "802 LANDSDOWNE AVE", "practiceaddress2": null, "practicecity": "DREXEL HILL", "practicestate": "PA", "practicezip9code": 190261526, "telephonenumber": 6108536018, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95982, "longitude": -75.28809, "is_contracted_for_cba": false}, {"provider_id": 20328719, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05103", "practiceaddress1": "1003 CALIFORNIA AVE", "practiceaddress2": null, "practicecity": "NATRONA HEIGHTS", "practicestate": "PA", "practicezip9code": 150651301, "telephonenumber": 7242247772, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.6185, "longitude": -79.73253, "is_contracted_for_cba": false}, {"provider_id": 20328707, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05098", "practiceaddress1": "330 W COLUMBUS AVE", "practiceaddress2": null, "practicecity": "CORRY", "practicestate": "PA", "practicezip9code": 16407, "telephonenumber": 8146642617, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.9346, "longitude": -79.65726, "is_contracted_for_cba": false}, {"provider_id": 20327249, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02866", "practiceaddress1": "1046 MARKET ST", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191074205, "telephonenumber": 2155921543, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95153, "longitude": -75.15755, "is_contracted_for_cba": false}, {"provider_id": 20328851, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 02131", "practiceaddress1": "3943 HULMEVILLE ROAD", "practiceaddress2": null, "practicecity": "BENSALEM", "practicestate": "PA", "practicezip9code": 19020, "telephonenumber": 2152447002, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.10923, "longitude": -74.93623, "is_contracted_for_cba": false}, {"provider_id": 20328047, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06043", "practiceaddress1": "302 W BRIDGE ST", "practiceaddress2": null, "practicecity": "NEW HOPE", "practicestate": "PA", "practicezip9code": 189381432, "telephonenumber": 2158625917, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.36268, "longitude": -74.96717, "is_contracted_for_cba": false}, {"provider_id": 20328683, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05099", "practiceaddress1": "392 NORTH ST", "practiceaddress2": null, "practicecity": "MEADVILLE", "practicestate": "PA", "practicezip9code": 163352500, "telephonenumber": 8143336370, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.64016, "longitude": -80.14734, "is_contracted_for_cba": false}, {"provider_id": 20329511, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #17393", "practiceaddress1": "5057 HARVEY ST", "practiceaddress2": null, "practicecity": "MUSKEGON", "practicestate": "MI", "practicezip9code": 494449795, "telephonenumber": 2317987507, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.16007, "longitude": -86.20577, "is_contracted_for_cba": false}, {"provider_id": 20329691, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #16599", "practiceaddress1": "650 BROWN RD", "practiceaddress2": null, "practicecity": "AUBURN HILLS", "practicestate": "MI", "practicezip9code": 483261307, "telephonenumber": 2483938114, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.7082, "longitude": -83.2615, "is_contracted_for_cba": false}, {"provider_id": 20329319, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "WOODWARD DETROIT CVS LLC", "practiceaddress1": "6839 S WESTNEDGE AVE", "practiceaddress2": null, "practicecity": "PORTAGE", "practicestate": "MI", "practicezip9code": 490023582, "telephonenumber": 2693279646, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.21895, "longitude": -85.5893, "is_contracted_for_cba": false}, {"provider_id": 20329697, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #16656", "practiceaddress1": "1301 COOLIDGE HWY", "practiceaddress2": null, "practicecity": "TROY", "practicestate": "MI", "practicezip9code": 480847017, "telephonenumber": 2486142801, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.54649, "longitude": -83.18644, "is_contracted_for_cba": false}, {"provider_id": 20312573, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PUERTO RICO CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07967", "practiceaddress1": "88 CARR 2", "practiceaddress2": null, "practicecity": "MANATI", "practicestate": "PR", "practicezip9code": 6745469, "telephonenumber": 7878548450, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 18.43315, "longitude": -66.48436, "is_contracted_for_cba": false}, {"provider_id": 20308397, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05285", "practiceaddress1": "1315 MOSS ST", "practiceaddress2": null, "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 705013648, "telephonenumber": 3372321564, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.24307, "longitude": -92.00661, "is_contracted_for_cba": false}, {"provider_id": 20521403, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS PHARMACY 110", "practiceaddress1": "US HIGHWAY 64", "practiceaddress2": null, "practicecity": "CASHIERS", "practicestate": "NC", "practicezip9code": 287171913, "telephonenumber": 8287436312, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.10838, "longitude": -83.11258, "is_contracted_for_cba": false}, {"provider_id": 20521589, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #031", "practiceaddress1": "151 SMOKEY PARK HWY", "practiceaddress2": null, "practicecity": "ASHEVILLE", "practicestate": "NC", "practicezip9code": 28806, "telephonenumber": 8286705776, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.56451, "longitude": -82.62808, "is_contracted_for_cba": false}, {"provider_id": 20521823, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #409", "practiceaddress1": "100 OLD ORCHARD SQ", "practiceaddress2": null, "practicecity": "ELLIJAY", "practicestate": "GA", "practicezip9code": 305408172, "telephonenumber": 7066357176, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.67582, "longitude": -84.47832, "is_contracted_for_cba": false}, {"provider_id": 20521277, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #451", "practiceaddress1": "1502 ATLANTA HWY", "practiceaddress2": null, "practicecity": "AUBURN", "practicestate": "GA", "practicezip9code": 300113648, "telephonenumber": 7702775284, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0101, "longitude": -83.83832, "is_contracted_for_cba": false}, {"provider_id": 20521871, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #457", "practiceaddress1": "1735 ZEBULON RD", "practiceaddress2": null, "practicecity": "GRIFFIN", "practicestate": "GA", "practicezip9code": 302235103, "telephonenumber": 7702285815, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.1927, "longitude": -84.28711, "is_contracted_for_cba": false}, {"provider_id": 20308157, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08922", "practiceaddress1": "1850 N HIGHWAY 190", "practiceaddress2": null, "practicecity": "COVINGTON", "practicestate": "LA", "practicezip9code": 704335157, "telephonenumber": 9858091515, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.45756, "longitude": -90.08198, "is_contracted_for_cba": false}, {"provider_id": 23279131, "acceptsassignement": true, "participationbegindate": 1711497600000, "businessname": "SOUTH TEXAS ORTHOPEDIC SHOES LLC", "practicename": "SOUTH TEXAS ORTHOPEDIC SHOES LLC", "practiceaddress1": "1125 JAMES ST", "practiceaddress2": "STE G", "practicecity": "WESLACO", "practicestate": "TX", "practicezip9code": 785966657, "telephonenumber": 9569981178, "specialitieslist": null, "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 26.149068012, "longitude": -97.9756720168, "is_contracted_for_cba": false}, {"provider_id": 26717020, "acceptsassignement": true, "participationbegindate": 1711497600000, "businessname": "MEDS ON TIME PHARMACY CORP.", "practicename": "MEDS ON TIME PHARMACY CORP.", "practiceaddress1": "3147 LAWSON BLVD", "practiceaddress2": null, "practicecity": "OCEANSIDE", "practicestate": "NY", "practicezip9code": 115723717, "telephonenumber": 5162087332, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6346743371, "longitude": -73.653618588, "is_contracted_for_cba": false}, {"provider_id": 34359458, "acceptsassignement": true, "participationbegindate": 1711497600000, "businessname": "RELIABLE RX LLC", "practicename": "RELIABLE RX LLC", "practiceaddress1": "1248 COLUMBUS AVE", "practiceaddress2": "STE 10", "practicecity": "LEBANON", "practicestate": "OH", "practicezip9code": 450369005, "telephonenumber": 5138091122, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Nebulizer Equipment and/or Supplies", "latitude": 39.4516295984, "longitude": -84.1813110207, "is_contracted_for_cba": false}, {"provider_id": 20308661, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05396", "practiceaddress1": "4890 BARKSDALE BLVD", "practiceaddress2": null, "practicecity": "BOSSIER CITY", "practicestate": "LA", "practicezip9code": 711124566, "telephonenumber": 3187474330, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.46188, "longitude": -93.66361, "is_contracted_for_cba": false}, {"provider_id": 20308901, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16686", "practiceaddress1": "7110 YOUREE DR", "practiceaddress2": null, "practicecity": "SHREVEPORT", "practicestate": "LA", "practicezip9code": 711055107, "telephonenumber": 3187987860, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.4412, "longitude": -93.71755, "is_contracted_for_cba": false}, {"provider_id": 23282881, "acceptsassignement": true, "participationbegindate": 1710892800000, "businessname": "PHARMILYCARE INC", "practicename": "ROSA PHARMACY", "practiceaddress1": "9200 VALLEY BLVD", "practiceaddress2": null, "practicecity": "ROSEMEAD", "practicestate": "CA", "practicezip9code": 917701900, "telephonenumber": 6265739477, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Urological Supplies|Nebulizer Equipment and/or Supplies", "latitude": 34.0805829894, "longitude": -118.0693500014, "is_contracted_for_cba": false}, {"provider_id": 23279191, "acceptsassignement": true, "participationbegindate": 1710806400000, "businessname": "OPTIONS MOBILITY, LLC", "practicename": "OPTIONS MOBILITY", "practiceaddress1": "1700 N DIXIE HWY", "practiceaddress2": "STE 118", "practicecity": "BOCA RATON", "practicestate": "FL", "practicezip9code": 334321807, "telephonenumber": 5616177429, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions", "latitude": 26.3654750056, "longitude": -80.0847949833, "is_contracted_for_cba": false}, {"provider_id": 20521451, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS PHARMACY #428", "practiceaddress1": "199 E LOUISE ST", "practiceaddress2": null, "practicecity": "CLARKESVILLE", "practicestate": "GA", "practicezip9code": 305236019, "telephonenumber": 7067543933, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.60314, "longitude": -83.51743, "is_contracted_for_cba": false}, {"provider_id": 21611715, "acceptsassignement": true, "participationbegindate": 1727049600000, "businessname": "H SERVICES CORP", "practicename": "H SERVICES CORP", "practiceaddress1": "1801 CORAL WAY", "practiceaddress2": "STE 311", "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331452784, "telephonenumber": 7866314839, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.7510499869, "longitude": -80.2243150306, "is_contracted_for_cba": false}, {"provider_id": 20329739, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #16157", "practiceaddress1": "30020 GRAND RIVER AVE", "practiceaddress2": null, "practicecity": "FARMINGTON HILLS", "practicestate": "MI", "practicezip9code": 483364722, "telephonenumber": 2484771467, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.45045, "longitude": -83.34163, "is_contracted_for_cba": false}, {"provider_id": 20353691, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9773", "practiceaddress1": "10300 CENTRAL AVE SE", "practiceaddress2": null, "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871232732, "telephonenumber": 5052920917, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.07153, "longitude": -106.53273, "is_contracted_for_cba": false}, {"provider_id": 20352659, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5067", "practiceaddress1": "963 S MILITARY TRL", "practiceaddress2": null, "practicecity": "WEST PALM BEACH", "practicestate": "FL", "practicezip9code": 334153909, "telephonenumber": 5616150543, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.6647, "longitude": -80.11259, "is_contracted_for_cba": false}, {"provider_id": 20351075, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3829", "practiceaddress1": "8398 SHELDON RD", "practiceaddress2": null, "practicecity": "TAMPA", "practicestate": "FL", "practicezip9code": 336151609, "telephonenumber": 8138841487, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.02527, "longitude": -82.58315, "is_contracted_for_cba": false}, {"provider_id": 20309081, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05293", "practiceaddress1": "24600 CHURCH ST", "practiceaddress2": null, "practicecity": "PLAQUEMINE", "practicestate": "LA", "practicezip9code": 707644116, "telephonenumber": 2256876816, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Infusion Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.28171, "longitude": -91.22577, "is_contracted_for_cba": false}, {"provider_id": 20310977, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17219", "practiceaddress1": "10302 156TH ST E", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983749321, "telephonenumber": 2536041067, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.11623, "longitude": -122.29085, "is_contracted_for_cba": false}, {"provider_id": 20312213, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #11427", "practiceaddress1": "2564 BARATARIA BLVD", "practiceaddress2": null, "practicecity": "MARRERO", "practicestate": "LA", "practicezip9code": 700725304, "telephonenumber": 5045820323, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.85594, "longitude": -90.10416, "is_contracted_for_cba": false}, {"provider_id": 20312003, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10885", "practiceaddress1": "1420 SAINT CHARLES ST", "practiceaddress2": null, "practicecity": "HOUMA", "practicestate": "LA", "practicezip9code": 703603935, "telephonenumber": 9855809990, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.58256, "longitude": -90.74696, "is_contracted_for_cba": false}, {"provider_id": 20312189, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OKLAHOMA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06096", "practiceaddress1": "1301 N SANTA FE AVE", "practiceaddress2": null, "practicecity": "EDMOND", "practicestate": "OK", "practicezip9code": 730033673, "telephonenumber": 4053400522, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.66751, "longitude": -97.51416, "is_contracted_for_cba": false}, {"provider_id": 20352617, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1131 E SUPERIOR ST", "practiceaddress2": null, "practicecity": "DULUTH", "practicestate": "MN", "practicezip9code": 558022216, "telephonenumber": 2187243060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 46.79794, "longitude": -92.08402, "is_contracted_for_cba": false}, {"provider_id": 20352623, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2942", "practiceaddress1": "2300 PECAN BLVD", "practiceaddress2": null, "practicecity": "MCALLEN", "practicestate": "TX", "practicezip9code": 785017332, "telephonenumber": 9566867486, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.2192, "longitude": -98.24306, "is_contracted_for_cba": false}, {"provider_id": 20352665, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04416", "practiceaddress1": "20011 BOLLINGER RD", "practiceaddress2": null, "practicecity": "CUPERTINO", "practicestate": "CA", "practicezip9code": 950144532, "telephonenumber": 4089738402, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.3108, "longitude": -122.02609, "is_contracted_for_cba": false}, {"provider_id": 20312201, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OKLAHOMA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06128", "practiceaddress1": "1016 SW LEE BLVD", "practiceaddress2": null, "practicecity": "LAWTON", "practicestate": "OK", "practicezip9code": 735015721, "telephonenumber": 5803531940, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.5942, "longitude": -98.40397, "is_contracted_for_cba": false}, {"provider_id": 20308889, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16805", "practiceaddress1": "4313 AMBASSADOR CAFFERY PKWY", "practiceaddress2": null, "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 705086703, "telephonenumber": 3379819673, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.15919, "longitude": -92.05147, "is_contracted_for_cba": false}, {"provider_id": 20353595, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "303 S CIRCLE DR", "practiceaddress2": null, "practicecity": "COLORADO SPRINGS", "practicestate": "CO", "practicezip9code": 809103026, "telephonenumber": 7194448569, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.82686, "longitude": -104.77918, "is_contracted_for_cba": false}, {"provider_id": 20352563, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04754", "practiceaddress1": "8380 HARRISON ST", "practiceaddress2": null, "practicecity": "LA VISTA", "practicestate": "NE", "practicezip9code": 681282918, "telephonenumber": 4025927990, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.19078, "longitude": -96.04241, "is_contracted_for_cba": false}, {"provider_id": 20352329, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4811", "practiceaddress1": "12807 US HIGHWAY 301", "practiceaddress2": null, "practicecity": "DADE CITY", "practicestate": "FL", "practicezip9code": 335255812, "telephonenumber": 3525679606, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.34977, "longitude": -82.18767, "is_contracted_for_cba": false}, {"provider_id": 20509337, "acceptsassignement": true, "participationbegindate": 1692316800000, "businessname": "DASCO-MAJOR HOME MEDICAL EQUIPMENT, LLC", "practicename": "DASCO-MAJOR HOME MEDICAL EQUIPMENT,", "practiceaddress1": "245 NORTHRIDGE DR", "practiceaddress2": "STE F", "practicecity": "SHELBYVILLE", "practicestate": "IN", "practicezip9code": 461768522, "telephonenumber": 3173923760, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Breast Prostheses and/or Accessories|Facial Prostheses|Neurostimulators and/or Supplies|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 39.54577, "longitude": -85.788, "is_contracted_for_cba": false}, {"provider_id": 20305517, "acceptsassignement": false, "participationbegindate": 1692316800000, "businessname": "GENAHEALTH PHARMACY INC", "practicename": "GENAHEALTH PHARMACY", "practiceaddress1": "18107 SHERMAN WAY", "practiceaddress2": "SUITE 202", "practicecity": "RESEDA", "practicestate": "CA", "practicezip9code": 913358802, "telephonenumber": 8187983314, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.20109, "longitude": -118.52745, "is_contracted_for_cba": false}, {"provider_id": 34357076, "acceptsassignement": false, "participationbegindate": 1691020800000, "businessname": "ALLCARE MEDICAL EQUIPMENT AND SUPPLY LLC", "practicename": "ALLCARE MEDICAL EQUIPMENT AND SUPPL", "practiceaddress1": "20 E NORTHWEST HWY", "practiceaddress2": null, "practicecity": "MOUNT PROSPECT", "practicestate": "IL", "practicezip9code": 600563223, "telephonenumber": 8477492566, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Unknown|Lymphedema Compression Treatment Items", "latitude": 42.0635848771, "longitude": -87.9365046959, "is_contracted_for_cba": false}, {"provider_id": 20305667, "acceptsassignement": true, "participationbegindate": 1690329600000, "businessname": "STRONGHOLD PHARMACY LLC", "practicename": "STRONGHOLD PHARMACY", "practiceaddress1": "125 S MAIN ST", "practiceaddress2": null, "practicecity": "ARLINGTON", "practicestate": "SD", "practicezip9code": 572122086, "telephonenumber": 6059835711, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 44.36386, "longitude": -97.13409, "is_contracted_for_cba": false}, {"provider_id": 20351177, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "500 S COMMERCIAL ST", "practiceaddress2": "WALGREENS #3392", "practicecity": "NEENAH", "practicestate": "WI", "practicezip9code": 549563383, "telephonenumber": 9207291311, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.18202, "longitude": -88.46486, "is_contracted_for_cba": false}, {"provider_id": 20351111, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02660", "practiceaddress1": "41400 BLACOW RD", "practiceaddress2": null, "practicecity": "FREMONT", "practicestate": "CA", "practicezip9code": 945383387, "telephonenumber": 5104408195, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.52238, "longitude": -121.96983, "is_contracted_for_cba": false}, {"provider_id": 20315765, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01157", "practiceaddress1": "1242 PARKER ST", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "MA", "practicezip9code": 11291006, "telephonenumber": 4137965501, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.11388, "longitude": -72.49862, "is_contracted_for_cba": false}, {"provider_id": 20316029, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00009", "practiceaddress1": "339 SQUIRE RD", "practiceaddress2": null, "practicecity": "REVERE", "practicestate": "MA", "practicezip9code": 21514309, "telephonenumber": 7812896099, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.3991, "longitude": -70.98924, "is_contracted_for_cba": false}, {"provider_id": 20308499, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MARYLAND CVS PHARMACY LLC.", "practicename": "CVS PHARMACY # 03043", "practiceaddress1": "1500 RITCHIE HWY", "practiceaddress2": null, "practicecity": "ARNOLD", "practicestate": "MD", "practicezip9code": 210122400, "telephonenumber": 4107573902, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.02633, "longitude": -76.50198, "is_contracted_for_cba": false}, {"provider_id": 20310065, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MARYLAND CVS PHARMACY LLC.", "practicename": "CVS PHARMACY #07656", "practiceaddress1": "3915 HOLLINS FERRY RD", "practiceaddress2": null, "practicecity": "BALTIMORE", "practicestate": "MD", "practicezip9code": 212273416, "telephonenumber": 4102421441, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.24307, "longitude": -76.64978, "is_contracted_for_cba": false}, {"provider_id": 34357130, "acceptsassignement": true, "participationbegindate": 1690243200000, "businessname": "COMMUNITY HEALTH NETWORK INC", "practicename": "COMMUNITY HEALTH NETWORK INC", "practiceaddress1": "7250 CLEARVISTA DR", "practiceaddress2": "STE 140", "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462564640, "telephonenumber": 3176213100, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.9005720019, "longitude": -86.0400210163, "is_contracted_for_cba": false}, {"provider_id": 34357172, "acceptsassignement": true, "participationbegindate": 1689724800000, "businessname": "ZARCHY PHARMACY RX LLC", "practicename": "ZARCHY PHARMACY RX LLC", "practiceaddress1": "5721 ROOSEVELT AVE", "practiceaddress2": null, "practicecity": "WOODSIDE", "practicestate": "NY", "practicezip9code": 113773430, "telephonenumber": 7184243286, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7455139424, "longitude": -73.9068140061, "is_contracted_for_cba": false}, {"provider_id": 26717650, "acceptsassignement": false, "participationbegindate": 1689638400000, "businessname": "VISIONARY RETAIL MANAGEMENT CA INC", "practicename": "VISIONWORKS", "practiceaddress1": "939 W ARROW HWY", "practiceaddress2": null, "practicecity": "SAN DIMAS", "practicestate": "CA", "practicezip9code": 917732410, "telephonenumber": 9096865401, "specialitieslist": "Optician", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 34.1080279807, "longitude": -117.8266049725, "is_contracted_for_cba": false}, {"provider_id": 20379749, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS#17201", "practiceaddress1": "415 E RIDGEVILLE BLVD", "practiceaddress2": null, "practicecity": "MOUNT AIRY", "practicestate": "MD", "practicezip9code": 217715217, "telephonenumber": 3018292920, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.36439, "longitude": -77.16109, "is_contracted_for_cba": false}, {"provider_id": 20379737, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "379 N MAIN ST", "practiceaddress2": null, "practicecity": "CLEVELAND", "practicestate": "GA", "practicezip9code": 305281127, "telephonenumber": 7068652525, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.60125, "longitude": -83.76502, "is_contracted_for_cba": false}, {"provider_id": 20380145, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #19760", "practiceaddress1": "12 PARK DR", "practiceaddress2": null, "practicecity": "HORNELL", "practicestate": "NY", "practicezip9code": 148432271, "telephonenumber": 6073246276, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.3207, "longitude": -77.66151, "is_contracted_for_cba": false}, {"provider_id": 20366345, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06834", "practiceaddress1": "4400 NW 23RD ST", "practiceaddress2": null, "practicecity": "OKLAHOMA CITY", "practicestate": "OK", "practicezip9code": 731072644, "telephonenumber": 4059439899, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.49322, "longitude": -97.60005, "is_contracted_for_cba": false}, {"provider_id": 20366399, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6346", "practiceaddress1": "525 W ZIA RD", "practiceaddress2": null, "practicecity": "SANTA FE", "practicestate": "NM", "practicezip9code": 875056910, "telephonenumber": 5058202196, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.6471, "longitude": -105.95499, "is_contracted_for_cba": false}, {"provider_id": 20366387, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN #7041", "practiceaddress1": "9184 E VALENCIA RD", "practiceaddress2": null, "practicecity": "TUCSON", "practicestate": "AZ", "practicezip9code": 857474902, "telephonenumber": 5205748328, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.11914, "longitude": -110.79763, "is_contracted_for_cba": false}, {"provider_id": 20335889, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11297", "practiceaddress1": "6125 LEGACY DR", "practiceaddress2": null, "practicecity": "PLANO", "practicestate": "TX", "practicezip9code": 750243619, "telephonenumber": 4017651500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.07959, "longitude": -96.83592, "is_contracted_for_cba": false}, {"provider_id": 20380259, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "469 WALPOLE ST", "practiceaddress2": null, "practicecity": "NORWOOD", "practicestate": "MA", "practicezip9code": 20621710, "telephonenumber": 7817695400, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.17817, "longitude": -71.2224, "is_contracted_for_cba": false}, {"provider_id": 20366333, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6300 E LAKE SAMMAMISH PKWY SE", "practiceaddress2": null, "practicecity": "ISSAQUAH", "practicestate": "WA", "practicezip9code": 980298935, "telephonenumber": 4253690265, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 47.54488, "longitude": -122.03759, "is_contracted_for_cba": false}, {"provider_id": 21611667, "acceptsassignement": false, "participationbegindate": 1729468800000, "businessname": "ARIZE MEDICAL & MOBILITY INC", "practicename": "ARIZE MEDICAL EQUIPMENT & REPAIR", "practiceaddress1": "6420 SKY POINTE DR", "practiceaddress2": "STE 110", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891314052, "telephonenumber": 7027789771, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Nebulizer Equipment and/or Supplies", "latitude": 36.2789398977, "longitude": -115.2629855117, "is_contracted_for_cba": false}, {"provider_id": 24548496, "acceptsassignement": true, "participationbegindate": 1728604800000, "businessname": "SHARP MEMORIAL HOSPITAL", "practicename": "SHARP METRO PHARMACY", "practiceaddress1": "8010 FROST ST", "practiceaddress2": "STE 102", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921234201, "telephonenumber": 8589394500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 32.8015719973, "longitude": -117.1519890042, "is_contracted_for_cba": false}, {"provider_id": 26717242, "acceptsassignement": true, "participationbegindate": 1728345600000, "businessname": "PLATINUM MED SUPPLIES LLC", "practicename": "PLATINUM MED SUPPLIES LLC", "practiceaddress1": "620 HILLCREST RD", "practiceaddress2": "STE 100", "practicecity": "LILBURN", "practicestate": "GA", "practicezip9code": 300476892, "telephonenumber": 8002767440, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33.8983340114, "longitude": -84.147920033, "is_contracted_for_cba": false}, {"provider_id": 26717818, "acceptsassignement": false, "participationbegindate": 1727913600000, "businessname": "PHARMAKEIO INC", "practicename": "PHARMAKEIO INC", "practiceaddress1": "2222 154TH ST", "practiceaddress2": null, "practicecity": "WHITESTONE", "practicestate": "NY", "practicezip9code": 113573732, "telephonenumber": 7183166881, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "latitude": 40.7778200604, "longitude": -73.8093779859, "is_contracted_for_cba": false}, {"provider_id": 20335733, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11161", "practiceaddress1": "515 HOUSTON ST", "practiceaddress2": null, "practicecity": "FORT WORTH", "practicestate": "TX", "practicezip9code": 76102, "telephonenumber": 8178200488, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.75385, "longitude": -97.3316, "is_contracted_for_cba": false}, {"provider_id": 23279521, "acceptsassignement": false, "participationbegindate": 1718928000000, "businessname": "APPLE MEDICAL SUPPLY LLC", "practicename": "APPLE MEDICAL SUPPLY LLC", "practiceaddress1": "7552 113TH ST", "practiceaddress2": "APT 1F", "practicecity": "FOREST HILLS", "practicestate": "NY", "practicezip9code": 113757468, "telephonenumber": 3476441969, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 40.7181132076, "longitude": -73.8348684431, "is_contracted_for_cba": false}, {"provider_id": 20545871, "acceptsassignement": true, "participationbegindate": 1718928000000, "businessname": "NYC DRUG STORE, INC.", "practicename": "NYC DRUG STORE INC.", "practiceaddress1": "15916 UNION TPKE", "practiceaddress2": null, "practicecity": "FLUSHING", "practicestate": "NY", "practicezip9code": 113661954, "telephonenumber": 7183800999, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.72013, "longitude": -73.80743, "is_contracted_for_cba": false}, {"provider_id": 20303969, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "5550 BETHELVIEW RD", "practiceaddress2": "KROGER PHARMACY #627", "practicecity": "CUMMING", "practicestate": "GA", "practicezip9code": 300406859, "telephonenumber": 6784564054, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.21767, "longitude": -84.25127, "is_contracted_for_cba": false}, {"provider_id": 24548016, "acceptsassignement": true, "participationbegindate": 1718323200000, "businessname": "MMG TEAM INC", "practicename": "WESTCOAST SPECIALTY PHARMACY", "practiceaddress1": "6727 ODESSA AVE", "practiceaddress2": "STE 201", "practicecity": "LAKE BALBOA", "practicestate": "CA", "practicezip9code": 914065747, "telephonenumber": 8187434373, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.1926619849, "longitude": -118.4905099582, "is_contracted_for_cba": false}, {"provider_id": 20366699, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6609", "practiceaddress1": "119 FORKS OF THE RIVER PKWY", "practiceaddress2": null, "practicecity": "SEVIERVILLE", "practicestate": "TN", "practicezip9code": 378623435, "telephonenumber": 8659088755, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.86879, "longitude": -83.56777, "is_contracted_for_cba": false}, {"provider_id": 20366375, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6993", "practiceaddress1": "220 FOOTHILLS MALL DR", "practiceaddress2": null, "practicecity": "MARYVILLE", "practicestate": "TN", "practicezip9code": 378015516, "telephonenumber": 8653797899, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.73836, "longitude": -83.99394, "is_contracted_for_cba": false}, {"provider_id": 20366489, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6102", "practiceaddress1": "4404 S MERIDIAN", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983739500, "telephonenumber": 2537706484, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 47.16312, "longitude": -122.29323, "is_contracted_for_cba": false}, {"provider_id": 20380127, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17857", "practiceaddress1": "101 BISHOP MURPHY DR", "practiceaddress2": null, "practicecity": "FROSTBURG", "practicestate": "MD", "practicezip9code": 215321329, "telephonenumber": 3016892422, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.64571, "longitude": -78.91228, "is_contracted_for_cba": false}, {"provider_id": 20316053, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07682", "practiceaddress1": "1830 TEXOMA PKWY", "practiceaddress2": null, "practicecity": "SHERMAN", "practicestate": "TX", "practicezip9code": 750902616, "telephonenumber": 9038935511, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.65708, "longitude": -96.60375, "is_contracted_for_cba": false}, {"provider_id": 20315297, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00080", "practiceaddress1": "2306 RR 620 S", "practiceaddress2": null, "practicecity": "LAKEWAY", "practicestate": "TX", "practicezip9code": 787346269, "telephonenumber": 5122636000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.34211, "longitude": -97.96853, "is_contracted_for_cba": false}, {"provider_id": 20317367, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05962", "practiceaddress1": "3200 TEASLEY LN", "practiceaddress2": null, "practicecity": "DENTON", "practicestate": "TX", "practicezip9code": 762108322, "telephonenumber": 9403821810, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.17352, "longitude": -97.11402, "is_contracted_for_cba": false}, {"provider_id": 23279593, "acceptsassignement": false, "participationbegindate": 1717545600000, "businessname": "K&B MEDICAL SUPPLY LLC", "practicename": "K&B MEDICAL SUPPLY LLC", "practiceaddress1": "521 ENERGY CENTER BLVD", "practiceaddress2": "STE 1505", "practicecity": "NORTHPORT", "practicestate": "AL", "practicezip9code": 354735833, "telephonenumber": 8663842069, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf", "latitude": 33.2402088537, "longitude": -87.5521211528, "is_contracted_for_cba": false}, {"provider_id": 21610971, "acceptsassignement": false, "participationbegindate": 1717545600000, "businessname": "NSC-TX, PLLC", "practicename": "NSC-TX, PLLC", "practiceaddress1": "4828 LOOP CENTRAL DR", "practiceaddress2": "STE 150", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770812193, "telephonenumber": 7139401315, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses", "latitude": 29.7253769868, "longitude": -95.4551000406, "is_contracted_for_cba": false}, {"provider_id": 23282491, "acceptsassignement": false, "participationbegindate": 1717459200000, "businessname": "ELECTROCHEMICAL OXYGEN CONCEPTS, INC.", "practicename": "MAIN OFFICE", "practiceaddress1": "12500 NETWORK BLVD", "practiceaddress2": "STE 310", "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 782493310, "telephonenumber": 8008252979, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Oxygen Equipment and/or Supplies|Surgical Dressings", "latitude": 29.5528449815, "longitude": -98.589811967, "is_contracted_for_cba": false}, {"provider_id": 23279611, "acceptsassignement": true, "participationbegindate": 1717459200000, "businessname": "COBB MEDICAL SUPPLY", "practicename": "COBB MEDICAL SUPPLY", "practiceaddress1": "1755 THE EXCHANGE SE", "practiceaddress2": "STE 110", "practicecity": "ATLANTA", "practicestate": "GA", "practicezip9code": 303397401, "telephonenumber": 4709643790, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33.90986202, "longitude": -84.4840230348, "is_contracted_for_cba": false}, {"provider_id": 20310587, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16124", "practiceaddress1": "3310 S MERIDIAN", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983733777, "telephonenumber": 2538644617, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.15959, "longitude": -122.29476, "is_contracted_for_cba": false}, {"provider_id": 20310911, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10927", "practiceaddress1": "1982 W 1700 S", "practiceaddress2": null, "practicecity": "SYRACUSE", "practicestate": "UT", "practicezip9code": 840759698, "telephonenumber": 8018252679, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.08924, "longitude": -112.06384, "is_contracted_for_cba": false}, {"provider_id": 20311835, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARKANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10816", "practiceaddress1": "1749 W WALNUT ST", "practiceaddress2": null, "practicecity": "ROGERS", "practicestate": "AR", "practicezip9code": 727563323, "telephonenumber": 4792460871, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.33445, "longitude": -94.14242, "is_contracted_for_cba": false}, {"provider_id": 20310857, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARAMCY #16694", "practiceaddress1": "665 SLEATER KINNEY RD SE", "practiceaddress2": null, "practicecity": "LACEY", "practicestate": "WA", "practicezip9code": 985031007, "telephonenumber": 3604868927, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.0427, "longitude": -122.83389, "is_contracted_for_cba": false}, {"provider_id": 20310803, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10387", "practiceaddress1": "2100 N 45TH ST", "practiceaddress2": null, "practicecity": "SEATTLE", "practicestate": "WA", "practicezip9code": 981036902, "telephonenumber": 2066331536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.66147, "longitude": -122.33312, "is_contracted_for_cba": false}, {"provider_id": 20311889, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10578", "practiceaddress1": "11506 S 4000 W", "practiceaddress2": null, "practicecity": "SOUTH JORDAN", "practicestate": "UT", "practicezip9code": 840096070, "telephonenumber": 8014469995, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.54328, "longitude": -111.9864, "is_contracted_for_cba": false}, {"provider_id": 20311913, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10577", "practiceaddress1": "475 E STATE RD", "practiceaddress2": null, "practicecity": "AMERICAN FORK", "practicestate": "UT", "practicezip9code": 840032558, "telephonenumber": 8017561501, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.37427, "longitude": -111.78661, "is_contracted_for_cba": false}, {"provider_id": 20304725, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER CO", "practiceaddress1": "1524 GEORGIA HIGHWAY 16 W", "practiceaddress2": null, "practicecity": "GRIFFIN", "practicestate": "GA", "practicezip9code": 302232046, "telephonenumber": 7702297430, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.25099, "longitude": -84.28793, "is_contracted_for_cba": false}, {"provider_id": 20303507, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-529", "practiceaddress1": "965 POPLAR ST", "practiceaddress2": null, "practicecity": "NELSONVILLE", "practicestate": "OH", "practicezip9code": 457641442, "telephonenumber": 7407531984, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.45193, "longitude": -82.22073, "is_contracted_for_cba": false}, {"provider_id": 20303807, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-966", "practiceaddress1": "4656 CEMETERY RD", "practiceaddress2": null, "practicecity": "HILLIARD", "practicestate": "OH", "practicezip9code": 430261124, "telephonenumber": 6148761248, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.03181, "longitude": -83.14022, "is_contracted_for_cba": false}, {"provider_id": 20304467, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #363", "practiceaddress1": "48 BULLSBORO DR", "practiceaddress2": null, "practicecity": "NEWNAN", "practicestate": "GA", "practicezip9code": 302631461, "telephonenumber": 7702515188, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.38284, "longitude": -84.78806, "is_contracted_for_cba": false}, {"provider_id": 20304851, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #257", "practiceaddress1": "115 RICHARD RUSSELL PARKWAY", "practiceaddress2": null, "practicecity": "WARNER ROBINS", "practicestate": "GA", "practicezip9code": 31088, "telephonenumber": 4789229040, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.59376, "longitude": -83.62533, "is_contracted_for_cba": false}, {"provider_id": 20304443, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 298", "practiceaddress1": "1700 MONROE DR", "practiceaddress2": null, "practicecity": "ATLANTA", "practicestate": "GA", "practicezip9code": 303245033, "telephonenumber": 4048720785, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.8005, "longitude": -84.37172, "is_contracted_for_cba": false}, {"provider_id": 20304449, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "4355 WASHINGTON RD", "practiceaddress2": null, "practicecity": "EVANS", "practicestate": "GA", "practicezip9code": 308093939, "telephonenumber": 7068684515, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.53936, "longitude": -82.13121, "is_contracted_for_cba": false}, {"provider_id": 24548502, "acceptsassignement": true, "participationbegindate": 1727740800000, "businessname": "AMIGOS HME DME INC", "practicename": "AMIGOS HME DME INC", "practiceaddress1": "815 SALINAS AVE", "practiceaddress2": "STE C", "practicecity": "LAREDO", "practicestate": "TX", "practicezip9code": 780408007, "telephonenumber": 9563825913, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 27.5067960133, "longitude": -99.5082640366, "is_contracted_for_cba": false}, {"provider_id": 20379671, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17603", "practiceaddress1": "17 E STATE ST", "practiceaddress2": null, "practicecity": "ILION", "practicestate": "NY", "practicezip9code": 133571807, "telephonenumber": 3158949995, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.01532, "longitude": -75.03648, "is_contracted_for_cba": false}, {"provider_id": 20335919, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11209", "practiceaddress1": "3122 UNDERWOOD RD", "practiceaddress2": null, "practicecity": "LA PORTE", "practicestate": "TX", "practicezip9code": 775717502, "telephonenumber": 2812413117, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.66383, "longitude": -95.08701, "is_contracted_for_cba": false}, {"provider_id": 26717830, "acceptsassignement": false, "participationbegindate": 1727222400000, "businessname": "CURA MEDICAL SUPPLY LLC", "practicename": "CURA MEDICAL SUPPLY LLC", "practiceaddress1": "2511 NEUDORF RD", "practiceaddress2": "STE N", "practicecity": "CLEMMONS", "practicestate": "NC", "practicezip9code": 270128922, "telephonenumber": 3362839056, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Enteral Nutrients|Diabetic Shoes and Inserts|Lymphedema Compression Treatment Items", "latitude": 36.0287176659, "longitude": -80.3840451037, "is_contracted_for_cba": false}, {"provider_id": 21611691, "acceptsassignement": true, "participationbegindate": 1727222400000, "businessname": "YUBA CITY PHARMACY INC", "practicename": "YUBA CITY PHARMACY", "practiceaddress1": "1000 LINCOLN RD", "practiceaddress2": "STE A", "practicecity": "YUBA CITY", "practicestate": "CA", "practicezip9code": 959916598, "telephonenumber": 5304347494, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.1121540121, "longitude": -121.6266560283, "is_contracted_for_cba": false}, {"provider_id": 20521835, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #239", "practiceaddress1": "1900N MAIN ST", "practiceaddress2": null, "practicecity": "ANDERSON", "practicestate": "SC", "practicezip9code": 296213849, "telephonenumber": 8643320552, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.52171, "longitude": -82.65626, "is_contracted_for_cba": false}, {"provider_id": 20334935, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17807", "practiceaddress1": "100 CAMBRIDGE ST", "practiceaddress2": "STE 102", "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21142531, "telephonenumber": 6178501998, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.36094, "longitude": -71.06152, "is_contracted_for_cba": false}, {"provider_id": 20521367, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #436", "practiceaddress1": "1197 BIG A RD", "practiceaddress2": null, "practicecity": "TOCCOA", "practicestate": "GA", "practicezip9code": 305776028, "telephonenumber": 7068868711, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.57052, "longitude": -83.30675, "is_contracted_for_cba": false}, {"provider_id": 20378009, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12334", "practiceaddress1": "1654 N PEBBLE CREEK PKWY", "practiceaddress2": null, "practicecity": "GOODYEAR", "practicestate": "AZ", "practicezip9code": 853952571, "telephonenumber": 6232076808, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.46542, "longitude": -112.39257, "is_contracted_for_cba": false}, {"provider_id": 20303495, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "1100 HILLCREST PKWY", "practiceaddress2": null, "practicecity": "DUBLIN", "practicestate": "GA", "practicezip9code": 310213557, "telephonenumber": 4782773085, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.54757, "longitude": -82.92945, "is_contracted_for_cba": false}, {"provider_id": 20304671, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #636", "practiceaddress1": "3093 STEVE REYNOLDS BLVD", "practiceaddress2": null, "practicecity": "DULUTH", "practicestate": "GA", "practicezip9code": 300964501, "telephonenumber": 7702250960, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.95995, "longitude": -84.14148, "is_contracted_for_cba": false}, {"provider_id": 20303681, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "570 E CROSSVILLE RD", "practiceaddress2": null, "practicecity": "ROSWELL", "practicestate": "GA", "practicezip9code": 300753034, "telephonenumber": 7706402065, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.03774, "longitude": -84.34515, "is_contracted_for_cba": false}, {"provider_id": 20304947, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-870", "practiceaddress1": "2257 N HOLLAND SYLVANIA RD", "practiceaddress2": null, "practicecity": "TOLEDO", "practicestate": "OH", "practicezip9code": 436152646, "telephonenumber": 4195786465, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.66316, "longitude": -83.68265, "is_contracted_for_cba": false}, {"provider_id": 20304377, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #641", "practiceaddress1": "774 HIGHWAY 96", "practiceaddress2": null, "practicecity": "BONAIRE", "practicestate": "GA", "practicezip9code": 31005, "telephonenumber": 4789885720, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 32.55031, "longitude": -83.65337, "is_contracted_for_cba": false}, {"provider_id": 20327633, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17696", "practiceaddress1": "7162 RIDGE AVE", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191283250, "telephonenumber": 2154832124, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.04549, "longitude": -75.2325, "is_contracted_for_cba": false}, {"provider_id": 20327651, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16572", "practiceaddress1": "600 CHAUVET DR", "practiceaddress2": null, "practicecity": "PITTSBURGH", "practicestate": "PA", "practicezip9code": 152751043, "telephonenumber": 4121900802, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.44751, "longitude": -80.18166, "is_contracted_for_cba": false}, {"provider_id": 20328611, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16500", "practiceaddress1": "857 BALTIMORE PIKE", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "PA", "practicezip9code": 190643963, "telephonenumber": 6103380548, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.91543, "longitude": -75.33765, "is_contracted_for_cba": false}, {"provider_id": 20681903, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11306", "practiceaddress1": "7101 E WILLIAM CANNON DR", "practiceaddress2": null, "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787442243, "telephonenumber": 7372209738, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.1621450112, "longitude": -97.7257339739, "is_contracted_for_cba": false}, {"provider_id": 20313419, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06850", "practiceaddress1": "1424 NORTH ST", "practiceaddress2": null, "practicecity": "NACOGDOCHES", "practicestate": "TX", "practicezip9code": 759614037, "telephonenumber": 9365699596, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.61549, "longitude": -94.6528, "is_contracted_for_cba": false}, {"provider_id": 20313413, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00656", "practiceaddress1": "1000 E KING AVE", "practiceaddress2": null, "practicecity": "KINGSVILLE", "practicestate": "TX", "practicezip9code": 783635869, "telephonenumber": 3615929397, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27.5158, "longitude": -97.85541, "is_contracted_for_cba": false}, {"provider_id": 20313623, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 06238", "practiceaddress1": "4451 W FUQUA ST", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770456205, "telephonenumber": 7134336447, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.61325, "longitude": -95.4453, "is_contracted_for_cba": false}, {"provider_id": 20313023, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05894", "practiceaddress1": "13033 COIT RD", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752405723, "telephonenumber": 9723929634, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.92709, "longitude": -96.76923, "is_contracted_for_cba": false}, {"provider_id": 20378867, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11968", "practiceaddress1": "1250 TOM HALL ST", "practiceaddress2": null, "practicecity": "FORT MILL", "practicestate": "SC", "practicezip9code": 297157000, "telephonenumber": 8035484699, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.00791, "longitude": -80.92127, "is_contracted_for_cba": false}, {"provider_id": 20378111, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12885", "practiceaddress1": "2495 SANDY POINT RD", "practiceaddress2": null, "practicecity": "PALM HARBOR", "practicestate": "FL", "practicezip9code": 346851636, "telephonenumber": 7272545928, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.09215, "longitude": -82.70496, "is_contracted_for_cba": false}, {"provider_id": 20335937, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 11324", "practiceaddress1": "150 BAILEY RANCH RD", "practiceaddress2": null, "practicecity": "ALEDO", "practicestate": "TX", "practicezip9code": 76008, "telephonenumber": 6827034401, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.72103, "longitude": -97.60998, "is_contracted_for_cba": false}, {"provider_id": 20335961, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 10887", "practiceaddress1": "8516 PARKER RD", "practiceaddress2": null, "practicecity": "WYLIE", "practicestate": "TX", "practicezip9code": 750987744, "telephonenumber": 8724299847, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.04365, "longitude": -96.57533, "is_contracted_for_cba": false}, {"provider_id": 20345489, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09876", "practiceaddress1": "699 LEWELLING BLVD", "practiceaddress2": null, "practicecity": "SAN LEANDRO", "practicestate": "CA", "practicezip9code": 945791870, "telephonenumber": 5103510951, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.68618, "longitude": -122.13738, "is_contracted_for_cba": false}, {"provider_id": 20338223, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #03897", "practiceaddress1": "10 YOUNG ST", "practiceaddress2": null, "practicecity": "TONAWANDA", "practicestate": "NY", "practicezip9code": 141502208, "telephonenumber": 7166921894, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.02035, "longitude": -78.87651, "is_contracted_for_cba": false}, {"provider_id": 20378039, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "2540 NE 15TH AVE", "practiceaddress2": null, "practicecity": "WILTON MANORS", "practicestate": "FL", "practicezip9code": 333051310, "telephonenumber": 9543900445, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.15908, "longitude": -80.12703, "is_contracted_for_cba": false}, {"provider_id": 20378057, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11377", "practiceaddress1": "6707 PITTSFORD PALMYRA RD", "practiceaddress2": null, "practicecity": "FAIRPORT", "practicestate": "NY", "practicezip9code": 144503442, "telephonenumber": 5853601814, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.06938, "longitude": -77.444, "is_contracted_for_cba": false}, {"provider_id": 20378603, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12270", "practiceaddress1": "2101 NORTHERN BLVD NE", "practiceaddress2": null, "practicecity": "RIO RANCHO", "practicestate": "NM", "practicezip9code": 871244727, "telephonenumber": 5052173980, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.27445, "longitude": -106.69318, "is_contracted_for_cba": false}, {"provider_id": 20385953, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9971", "practiceaddress1": "41 HOLLAND AVE", "practiceaddress2": null, "practicecity": "ALBANY", "practicestate": "NY", "practicezip9code": 122083408, "telephonenumber": 5184262976, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.64855, "longitude": -73.77357, "is_contracted_for_cba": false}, {"provider_id": 20328617, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 16521", "practiceaddress1": "125 WITCHWOOD DR", "practiceaddress2": null, "practicecity": "NORTH WALES", "practicestate": "PA", "practicezip9code": 194541833, "telephonenumber": 2156997767, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.22528, "longitude": -75.23731, "is_contracted_for_cba": false}, {"provider_id": 20328383, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 17214", "practiceaddress1": "1824 E RIDGE PIKE", "practiceaddress2": null, "practicecity": "ROYERSFORD", "practicestate": "PA", "practicezip9code": 194682819, "telephonenumber": 6102262152, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.21371, "longitude": -75.49795, "is_contracted_for_cba": false}, {"provider_id": 20338199, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #3859", "practiceaddress1": "4815 BROADWAY", "practiceaddress2": null, "practicecity": "DEPEW", "practicestate": "NY", "practicezip9code": 140433926, "telephonenumber": 7166837971, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.90175, "longitude": -78.69572, "is_contracted_for_cba": false}, {"provider_id": 20336555, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS PHARMACY 03898", "practiceaddress1": "45 CUMBERLAND ST", "practiceaddress2": null, "practicecity": "WOONSOCKET", "practicestate": "RI", "practicezip9code": 28953301, "telephonenumber": 4017655010, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0079, "longitude": -71.50289, "is_contracted_for_cba": false}, {"provider_id": 20328497, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17185", "practiceaddress1": "246 WESTMINSTER DR", "practiceaddress2": null, "practicecity": "CARLISLE", "practicestate": "PA", "practicezip9code": 170133117, "telephonenumber": 7172493509, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.19741, "longitude": -77.1674, "is_contracted_for_cba": false}, {"provider_id": 20328575, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17163", "practiceaddress1": "2701 CASTOR AVE", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191345505, "telephonenumber": 2153059051, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.99046, "longitude": -75.09041, "is_contracted_for_cba": false}, {"provider_id": 20303513, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 490", "practiceaddress1": "805 GLYNN ST S", "practiceaddress2": "STE 117", "practicecity": "FAYETTEVILLE", "practicestate": "GA", "practicezip9code": 302142010, "telephonenumber": 7704618266, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.43271, "longitude": -84.45722, "is_contracted_for_cba": false}, {"provider_id": 20337959, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06621", "practiceaddress1": "415 W 3RD ST", "practiceaddress2": null, "practicecity": "MARION", "practicestate": "IN", "practicezip9code": 469523750, "telephonenumber": 7656621316, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.55873, "longitude": -85.66397, "is_contracted_for_cba": false}, {"provider_id": 20338295, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREEN EASTERN CO INC", "practiceaddress1": "35 MAIN ST", "practiceaddress2": null, "practicecity": "PEABODY", "practicestate": "MA", "practicezip9code": 19605548, "telephonenumber": 9789779211, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.52512, "longitude": -70.92584, "is_contracted_for_cba": false}, {"provider_id": 20330015, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #5723", "practiceaddress1": "960 NORTH AVE", "practiceaddress2": null, "practicecity": "BRIDGEPORT", "practicestate": "CT", "practicezip9code": 66065750, "telephonenumber": 2033346978, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.19145, "longitude": -73.19718, "is_contracted_for_cba": false}, {"provider_id": 20303981, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #344", "practiceaddress1": "3000 OLD ALABAMA RD", "practiceaddress2": null, "practicecity": "ALPHARETTA", "practicestate": "GA", "practicezip9code": 300225860, "telephonenumber": 7707517388, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.02168, "longitude": -84.27166, "is_contracted_for_cba": false}, {"provider_id": 20337719, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "TETER ORTHOTICS & PROSTHETICS, INC", "practicename": "TETER ORTHOTICS AND PROSTHETICS INC", "practiceaddress1": "1225 W FRONT ST", "practiceaddress2": "STE A", "practicecity": "TRAVERSE CITY", "practicestate": "MI", "practicezip9code": 496842368, "telephonenumber": 2319475701, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 44.76392, "longitude": -85.64325, "is_contracted_for_cba": false}, {"provider_id": 20387213, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12373", "practiceaddress1": "606 N BROADWAY ST", "practiceaddress2": null, "practicecity": "JOHNSON CITY", "practicestate": "TN", "practicezip9code": 376013535, "telephonenumber": 4232321524, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.33449, "longitude": -82.34376, "is_contracted_for_cba": false}, {"provider_id": 20387477, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10505", "practiceaddress1": "2785 N PINAL AVE", "practiceaddress2": null, "practicecity": "CASA GRANDE", "practicestate": "AZ", "practicezip9code": 851227916, "telephonenumber": 5204210031, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.93612, "longitude": -111.75702, "is_contracted_for_cba": false}, {"provider_id": 20336741, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS PHARMACY 03719", "practiceaddress1": "25 PUTNAM PIKE", "practiceaddress2": null, "practicecity": "JOHNSTON", "practicestate": "RI", "practicezip9code": 29192029, "telephonenumber": 4012313562, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.8614, "longitude": -71.49144, "is_contracted_for_cba": false}, {"provider_id": 20313083, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06725", "practiceaddress1": "601 N LOOP 274", "practiceaddress2": null, "practicecity": "ANGLETON", "practicestate": "TX", "practicezip9code": 775153256, "telephonenumber": 9798498294, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.17671, "longitude": -95.43121, "is_contracted_for_cba": false}, {"provider_id": 20313077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06727", "practiceaddress1": "1600 S BYPASS 35", "practiceaddress2": null, "practicecity": "ALVIN", "practicestate": "TX", "practicezip9code": 775114602, "telephonenumber": 2813311536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.40902, "longitude": -95.23332, "is_contracted_for_cba": false}, {"provider_id": 20336243, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #06448", "practiceaddress1": "1101 PEORIA ST", "practiceaddress2": null, "practicecity": "WASHINGTON", "practicestate": "IL", "practicezip9code": 615712350, "telephonenumber": 3094442301, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.70114, "longitude": -89.42669, "is_contracted_for_cba": false}, {"provider_id": 20313887, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 06903", "practiceaddress1": "3350 FOREST HILL CIR", "practiceaddress2": null, "practicecity": "FOREST HILL", "practicestate": "TX", "practicezip9code": 761401105, "telephonenumber": 8178689566, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.66001, "longitude": -97.27268, "is_contracted_for_cba": false}, {"provider_id": 20304593, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 519", "practiceaddress1": "1585 GEORGESVILLE SQUARE DR", "practiceaddress2": null, "practicecity": "COLUMBUS", "practicestate": "OH", "practicezip9code": 432283777, "telephonenumber": 6148781664, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.9204, "longitude": -83.12249, "is_contracted_for_cba": false}, {"provider_id": 20304515, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 542", "practiceaddress1": "31550 CHIEFTAIN DR", "practiceaddress2": null, "practicecity": "LOGAN", "practicestate": "OH", "practicezip9code": 431389087, "telephonenumber": 7403802041, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.5457, "longitude": -82.43531, "is_contracted_for_cba": false}, {"provider_id": 20335367, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #08926", "practiceaddress1": "983 IL ROUTE 59", "practiceaddress2": null, "practicecity": "ANTIOCH", "practicestate": "IL", "practicezip9code": 600021453, "telephonenumber": 8473955691, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.47644, "longitude": -88.10411, "is_contracted_for_cba": false}, {"provider_id": 20336057, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 04979", "practiceaddress1": "7855 S WESTERN AVE", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606205823, "telephonenumber": 7734366000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.75102, "longitude": -87.68275, "is_contracted_for_cba": false}, {"provider_id": 20337905, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #6536", "practiceaddress1": "2340 W SYCAMORE ST", "practiceaddress2": null, "practicecity": "KOKOMO", "practicestate": "IN", "practicezip9code": 469014108, "telephonenumber": 7654524437, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.48784, "longitude": -86.16411, "is_contracted_for_cba": false}, {"provider_id": 20313683, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 07207", "practiceaddress1": "210 N BUSINESS IH 35", "practiceaddress2": null, "practicecity": "NEW BRAUNFELS", "practicestate": "TX", "practicezip9code": 781307857, "telephonenumber": 8306295096, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.69412, "longitude": -98.10917, "is_contracted_for_cba": false}, {"provider_id": 20335985, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #06789", "practiceaddress1": "8645 WOODWARD AVE", "practiceaddress2": null, "practicecity": "WOODRIDGE", "practicestate": "IL", "practicezip9code": 605173148, "telephonenumber": 6309102250, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.73307, "longitude": -88.03037, "is_contracted_for_cba": false}, {"provider_id": 20341481, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY #16910", "practiceaddress1": "1901 13TH AVE E", "practiceaddress2": null, "practicecity": "TUSCALOOSA", "practicestate": "AL", "practicezip9code": 354044785, "telephonenumber": 2055565731, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.19665, "longitude": -87.51865, "is_contracted_for_cba": false}, {"provider_id": 20304905, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "600 E MAIN ST", "practiceaddress2": null, "practicecity": "HEBRON", "practicestate": "OH", "practicezip9code": 430258006, "telephonenumber": 7409282152, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.96139, "longitude": -82.47711, "is_contracted_for_cba": false}, {"provider_id": 20304437, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #16-531", "practiceaddress1": "8730 WATERVILLE SWANTON RD", "practiceaddress2": null, "practicecity": "WATERVILLE", "practicestate": "OH", "practicezip9code": 435669726, "telephonenumber": 4198781040, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.50975, "longitude": -83.75859, "is_contracted_for_cba": false}, {"provider_id": 20338511, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #2055", "practiceaddress1": "10962 FRANCIS LEWIS BLVD", "practiceaddress2": null, "practicecity": "QUEENS VILLAGE", "practicestate": "NY", "practicezip9code": 114291753, "telephonenumber": 7187404988, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.70672, "longitude": -73.75135, "is_contracted_for_cba": false}, {"provider_id": 20337989, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06661", "practiceaddress1": "263 W MORGAN ST", "practiceaddress2": null, "practicecity": "KNIGHTSTOWN", "practicestate": "IN", "practicezip9code": 461489312, "telephonenumber": 7653457163, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.80132, "longitude": -85.53137, "is_contracted_for_cba": false}, {"provider_id": 34358504, "acceptsassignement": true, "participationbegindate": 1715904000000, "businessname": "AID DEPOT MEDICAL SUPPLY", "practicename": "AID DEPOT MEDICAL SUPPLY", "practiceaddress1": "15664 MAIN ST", "practiceaddress2": "STE 210", "practicecity": "HESPERIA", "practicestate": "CA", "practicezip9code": 923453412, "telephonenumber": 8184540653, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Surgical Dressings", "latitude": 34.4251049843, "longitude": -117.3211389954, "is_contracted_for_cba": false}, {"provider_id": 23283235, "acceptsassignement": true, "participationbegindate": 1725580800000, "businessname": "EAGLET PHARMACY LLC", "practicename": "EAGLET PHARMACY", "practiceaddress1": "2209 SW 104TH ST", "practiceaddress2": "STE E", "practicecity": "OKLAHOMA CITY", "practicestate": "OK", "practicezip9code": 731597551, "telephonenumber": 4056765300, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 35.3636916845, "longitude": -97.5505982142, "is_contracted_for_cba": false}, {"provider_id": 20338241, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #3000", "practiceaddress1": "12 E MAIN RD", "practiceaddress2": null, "practicecity": "MIDDLETOWN", "practicestate": "RI", "practicezip9code": 28424912, "telephonenumber": 4018478520, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.51712, "longitude": -71.29968, "is_contracted_for_cba": false}, {"provider_id": 20338145, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREEN EASTERN CO INC", "practiceaddress1": "29 NEW DERBY ST", "practiceaddress2": null, "practicecity": "SALEM", "practicestate": "MA", "practicezip9code": 19703637, "telephonenumber": 9787447442, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.51949, "longitude": -70.89474, "is_contracted_for_cba": false}, {"provider_id": 20313449, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07196", "practiceaddress1": "4100 STATE HIGHWAY 121", "practiceaddress2": null, "practicecity": "CARROLLTON", "practicestate": "TX", "practicezip9code": 750101118, "telephonenumber": 9729397062, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.0223, "longitude": -96.93294, "is_contracted_for_cba": false}, {"provider_id": 20304323, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "1720 MARS HILL RD NW", "practiceaddress2": null, "practicecity": "ACWORTH", "practicestate": "GA", "practicezip9code": 301017127, "telephonenumber": 7704195495, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.99632, "longitude": -84.70595, "is_contracted_for_cba": false}, {"provider_id": 20456069, "acceptsassignement": true, "participationbegindate": 1715126400000, "businessname": "DHAKA RX INC", "practicename": "HILLSIDE DHAKA PHARMACY", "practiceaddress1": "17014 HILLSIDE AVE", "practiceaddress2": null, "practicecity": "JAMAICA", "practicestate": "NY", "practicezip9code": 114324547, "telephonenumber": 7185262300, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.71093, "longitude": -73.79174, "is_contracted_for_cba": false}, {"provider_id": 23282995, "acceptsassignement": true, "participationbegindate": 1715126400000, "businessname": "EZ SCRIPTS RX LLC", "practicename": "EZ SCRIPTS RX LLC", "practiceaddress1": "9857 63RD RD", "practiceaddress2": null, "practicecity": "REGO PARK", "practicestate": "NY", "practicezip9code": 113741739, "telephonenumber": 3478134177, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7325916042, "longitude": -73.8573771221, "is_contracted_for_cba": false}, {"provider_id": 26717044, "acceptsassignement": false, "participationbegindate": 1724630400000, "businessname": "RV MEDICAL SUPPLY INC", "practicename": "RV MEDICAL SUPPLY INC", "practiceaddress1": "12202 20TH AVE", "practiceaddress2": null, "practicecity": "COLLEGE POINT", "practicestate": "NY", "practicezip9code": 113562212, "telephonenumber": 3473686589, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Pneumatic Compression Devices and/or Supplies|Walkers|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 40.7815992091, "longitude": -73.8456412004, "is_contracted_for_cba": false}, {"provider_id": 20336591, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06612", "practiceaddress1": "5110 E 38TH ST", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462181717, "telephonenumber": 3175491891, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.82541, "longitude": -86.0828, "is_contracted_for_cba": false}, {"provider_id": 20338337, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06260", "practiceaddress1": "225 12TH ST", "practiceaddress2": null, "practicecity": "TELL CITY", "practicestate": "IN", "practicezip9code": 475861915, "telephonenumber": 8125474201, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.94427, "longitude": -86.76462, "is_contracted_for_cba": false}, {"provider_id": 20305001, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #631", "practiceaddress1": "2460 ENTERPRISE DR", "practiceaddress2": null, "practicecity": "OPELIKA", "practicestate": "AL", "practicezip9code": 368011510, "telephonenumber": 3347372650, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.62884, "longitude": -85.39979, "is_contracted_for_cba": false}, {"provider_id": 20343827, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07417", "practiceaddress1": "11820 ELAM RD", "practiceaddress2": null, "practicecity": "BALCH SPRINGS", "practicestate": "TX", "practicezip9code": 751802734, "telephonenumber": 9722863530, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.71669, "longitude": -96.62946, "is_contracted_for_cba": false}, {"provider_id": 21609081, "acceptsassignement": false, "participationbegindate": 1675728000000, "businessname": "SUTTER RX PHARMACY INC", "practicename": "SUTTER RX PHARMACY INC", "practiceaddress1": "593 SUTTER AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112074180, "telephonenumber": 3472950208, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6692400904, "longitude": -73.8969209296, "is_contracted_for_cba": false}, {"provider_id": 20307341, "acceptsassignement": true, "participationbegindate": 1675641600000, "businessname": "AJ WOODHAVEN CHEMIST INC", "practicename": "AJ WOODHAVEN CHEMIST INC", "practiceaddress1": "6243A WOODHAVEN BLVD", "practiceaddress2": null, "practicecity": "REGO PARK", "practicestate": "NY", "practicezip9code": 113743704, "telephonenumber": 9177915151, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.72567, "longitude": -73.87001, "is_contracted_for_cba": false}, {"provider_id": 26717302, "acceptsassignement": false, "participationbegindate": 1724371200000, "businessname": "DIVINE BEAUTY BAR, LLC", "practicename": "DIVINE BEAUTY BAR, LLC", "practiceaddress1": "4201 CYPRESS CREEK PKWY", "practiceaddress2": "STE 322", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770683414, "telephonenumber": 4694996200, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Breast Prostheses and/or Accessories|Neurostimulators and/or Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Lymphedema Compression Treatment Items", "latitude": 29.9902390083, "longitude": -95.4930760132, "is_contracted_for_cba": false}, {"provider_id": 20338571, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #4535", "practiceaddress1": "107 N MAIN ST", "practiceaddress2": null, "practicecity": "RANDOLPH", "practicestate": "MA", "practicezip9code": 23684629, "telephonenumber": 7819637713, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.1655, "longitude": -71.04336, "is_contracted_for_cba": false}, {"provider_id": 20338565, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #1847", "practiceaddress1": "757 GALLIVAN BLVD STE 3", "practiceaddress2": null, "practicecity": "DORCHESTER", "practicestate": "MA", "practicezip9code": 21223109, "telephonenumber": 6172825246, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.28442, "longitude": -71.04508, "is_contracted_for_cba": false}, {"provider_id": 20340221, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #6553", "practiceaddress1": "2320 CUNNINGHAM RD", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462243702, "telephonenumber": 3172416374, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.79792, "longitude": -86.26507, "is_contracted_for_cba": false}, {"provider_id": 20339903, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06697", "practiceaddress1": "2701 E 3RD ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IN", "practicezip9code": 474015433, "telephonenumber": 8123321419, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.16431, "longitude": -86.4968, "is_contracted_for_cba": false}, {"provider_id": 20307353, "acceptsassignement": true, "participationbegindate": 1675641600000, "businessname": "DENVER PAIN RELIEF CENTER PLLC", "practicename": "DENVER PAIN RELIEF CENTER", "practiceaddress1": "3915 E EXPOSITION AVE", "practiceaddress2": "STE 100", "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 802095052, "telephonenumber": 3039554609, "specialitieslist": null, "providertypelist": "NURSE PRACTITIONER", "supplieslist": "Contracture Treatment Devices: Dynamic Splint|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "latitude": 39.70392, "longitude": -104.94232, "is_contracted_for_cba": false}, {"provider_id": 34358882, "acceptsassignement": true, "participationbegindate": 1675468800000, "businessname": "LAABH PHARMACY LLC", "practicename": "LAABH PHARMACY LLC", "practiceaddress1": "4369 SUWANEE DAM RD", "practiceaddress2": "STE 102", "practicecity": "SUWANEE", "practicestate": "GA", "practicezip9code": 300244646, "telephonenumber": 4707804422, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.0653930111, "longitude": -84.0753869824, "is_contracted_for_cba": false}, {"provider_id": 20307377, "acceptsassignement": false, "participationbegindate": 1675382400000, "businessname": "MEDI PRIME PHARMACY INC", "practicename": "MEDI PRIME PHARMACY INC", "practiceaddress1": "10504 101ST AVE", "practiceaddress2": null, "practicecity": "OZONE PARK", "practicestate": "NY", "practicezip9code": 114162703, "telephonenumber": 3474944240, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.68632, "longitude": -73.83782, "is_contracted_for_cba": false}, {"provider_id": 21610905, "acceptsassignement": true, "participationbegindate": 1722384000000, "businessname": "ATTENTIVE MEDICAL SUPPLY LLC", "practicename": "ATTENTIVE MEDICAL SUPPLY LLC", "practiceaddress1": "12925 HIGHWAY 601", "practiceaddress2": "STE 100", "practicecity": "MIDLAND", "practicestate": "NC", "practicezip9code": 281079536, "telephonenumber": 7047815632, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 35.2388697235, "longitude": -80.5038562792, "is_contracted_for_cba": false}, {"provider_id": 20333429, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08293", "practiceaddress1": "1550 LAKE DR SE", "practiceaddress2": null, "practicecity": "GRAND RAPIDS", "practicestate": "MI", "practicezip9code": 495062704, "telephonenumber": 6162350747, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.95461, "longitude": -85.63038, "is_contracted_for_cba": false}, {"provider_id": 20319911, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16231", "practiceaddress1": "2056 SKIBO RD", "practiceaddress2": null, "practicecity": "FAYETTEVILLE", "practicestate": "NC", "practicezip9code": 283142245, "telephonenumber": 9108604606, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.05513, "longitude": -78.97269, "is_contracted_for_cba": false}, {"provider_id": 20307503, "acceptsassignement": true, "participationbegindate": 1675123200000, "businessname": "PRAMUKHDEV LLC", "practicename": "PRAMUKHDEV LLC", "practiceaddress1": "701 BRUNSWICK AVE", "practiceaddress2": null, "practicecity": "TRENTON", "practicestate": "NJ", "practicezip9code": 86384123, "telephonenumber": 6093965000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.23524, "longitude": -74.7533, "is_contracted_for_cba": false}, {"provider_id": 20683355, "acceptsassignement": false, "participationbegindate": 1722297600000, "businessname": "1-2-3 BREATHE FREE LLC", "practicename": "1-2-3 BREATHE FREE LLC", "practiceaddress1": "10320 W MCDOWELL RD", "practiceaddress2": "STE 3010", "practicecity": "AVONDALE", "practicestate": "AZ", "practicezip9code": 853924867, "telephonenumber": 6235354194, "specialitieslist": null, "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated", "latitude": 33.4652519708, "longitude": -112.2816256584, "is_contracted_for_cba": false}, {"provider_id": 26717326, "acceptsassignement": false, "participationbegindate": 1721692800000, "businessname": "QUADRA HEALTHCARE INC", "practicename": "986 PHARMACY #8026", "practiceaddress1": "8536 DEL WEBB BLVD", "practiceaddress2": null, "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891348676, "telephonenumber": 7024765888, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 36.2102902208, "longitude": -115.2798514451, "is_contracted_for_cba": false}, {"provider_id": 20341385, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05064", "practiceaddress1": "335 LANCASTER AVE", "practiceaddress2": null, "practicecity": "FRAZER", "practicestate": "PA", "practicezip9code": 193551835, "telephonenumber": 6102407871, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.03903, "longitude": -75.55204, "is_contracted_for_cba": false}, {"provider_id": 20331287, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #16471", "practiceaddress1": "1650 NEW BRIGHTON BLVD", "practiceaddress2": null, "practicecity": "MINNEAPOLIS", "practicestate": "MN", "practicezip9code": 554131643, "telephonenumber": 6127817746, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.00413, "longitude": -93.2285, "is_contracted_for_cba": false}, {"provider_id": 20331527, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #17405", "practiceaddress1": "810 COUNTY RD 42 W", "practiceaddress2": null, "practicecity": "BURNSVILLE", "practicestate": "MN", "practicezip9code": 553374492, "telephonenumber": 9524358141, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44.74657, "longitude": -93.28863, "is_contracted_for_cba": false}, {"provider_id": 20329589, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04903", "practiceaddress1": "3100 DAUPHIN ISLAND PKWY", "practiceaddress2": null, "practicecity": "MOBILE", "practicestate": "AL", "practicezip9code": 366053826, "telephonenumber": 2514712591, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.60773, "longitude": -88.07514, "is_contracted_for_cba": false}, {"provider_id": 20307563, "acceptsassignement": false, "participationbegindate": 1674518400000, "businessname": "SHAN-PHAM DIVERSIFIED HOLDINGS, INC", "practicename": "MEDHOPE PHARMACY", "practiceaddress1": "12946 DAIRY ASHFORD RD", "practiceaddress2": "#450", "practicecity": "SUGAR LAND", "practicestate": "TX", "practicezip9code": 774784643, "telephonenumber": 8662790497, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Mail Order)|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 29.63149, "longitude": -95.59792, "is_contracted_for_cba": false}, {"provider_id": 20307611, "acceptsassignement": true, "participationbegindate": 1674172800000, "businessname": "INNOVATIVE PROSTHETICS LLC", "practicename": "INNOVATIVE PROSTHETICS LLC", "practiceaddress1": "121 B PROFESSIONAL LN", "practiceaddress2": null, "practicecity": "PAWLEYS ISLAND", "practicestate": "SC", "practicezip9code": 295857878, "telephonenumber": 8433143148, "specialitieslist": null, "providertypelist": "CERTIFIED ORTH/PROS/PEDORTHIST", "supplieslist": "Contracture Treatment Devices: Dynamic Splint|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 33.44248, "longitude": -79.12729, "is_contracted_for_cba": false}, {"provider_id": 20307653, "acceptsassignement": false, "participationbegindate": 1674086400000, "businessname": "RAPID RX PHARMACY LLC", "practicename": "RAPID RX PHARMACY LLC", "practiceaddress1": "1131 W HAMILTON ST", "practiceaddress2": null, "practicecity": "ALLENTOWN", "practicestate": "PA", "practicezip9code": 181011047, "telephonenumber": 6107075510, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.59983, "longitude": -75.48081, "is_contracted_for_cba": false}, {"provider_id": 20304983, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 339", "practiceaddress1": "203 A COMMERCE STREET", "practiceaddress2": "STE A", "practicecity": "LAGRANGE", "practicestate": "GA", "practicezip9code": 302402358, "telephonenumber": 7068836178, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.04948, "longitude": -85.02552, "is_contracted_for_cba": false}, {"provider_id": 20304359, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #012", "practiceaddress1": "3403 FOREST DR", "practiceaddress2": null, "practicecity": "COLUMBIA", "practicestate": "SC", "practicezip9code": 292044028, "telephonenumber": 8037824027, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.01888, "longitude": -80.99099, "is_contracted_for_cba": false}, {"provider_id": 20342543, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01091", "practiceaddress1": "430 KEYSTONE AVE", "practiceaddress2": null, "practicecity": "SAYRE", "practicestate": "PA", "practicezip9code": 188402006, "telephonenumber": 5708887763, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.99519, "longitude": -76.52972, "is_contracted_for_cba": false}, {"provider_id": 20403929, "acceptsassignement": false, "participationbegindate": 1721174400000, "businessname": "ACCORD SPECIALTY, LLC", "practicename": "ACCORD SPECIALTY PHARMACY", "practiceaddress1": "2752 ENTERPRISE RD", "practiceaddress2": "STE B", "practicecity": "ORANGE CITY", "practicestate": "FL", "practicezip9code": 327638328, "telephonenumber": 3864563000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Urological Supplies|Nebulizer Equipment and/or Supplies", "latitude": 28.90639, "longitude": -81.28939, "is_contracted_for_cba": false}, {"provider_id": 20329637, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04917", "practiceaddress1": "675 TUSCALOOSA ST", "practiceaddress2": null, "practicecity": "GREENSBORO", "practicestate": "AL", "practicezip9code": 367442020, "telephonenumber": 3346248874, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.69886, "longitude": -87.59557, "is_contracted_for_cba": false}, {"provider_id": 20307665, "acceptsassignement": true, "participationbegindate": 1673913600000, "businessname": "FALLS PHARMACY INC", "practicename": "FALLS PHARMACY", "practiceaddress1": "2401 PINE AVE", "practiceaddress2": null, "practicecity": "NIAGARA FALLS", "practicestate": "NY", "practicezip9code": 143012401, "telephonenumber": 7162156302, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Nebulizer Equipment and/or Supplies", "latitude": 43.09502, "longitude": -79.03287, "is_contracted_for_cba": false}, {"provider_id": 23283013, "acceptsassignement": true, "participationbegindate": 1719964800000, "businessname": "ELITE RX INC", "practicename": "ELITE RX INC", "practiceaddress1": "19506 47TH AVE", "practiceaddress2": null, "practicecity": "FLUSHING", "practicestate": "NY", "practicezip9code": 113583910, "telephonenumber": 9172852177, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7524508055, "longitude": -73.7859229901, "is_contracted_for_cba": false}, {"provider_id": 20317631, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01417", "practiceaddress1": "13031 LEE JACKSON HWY", "practiceaddress2": null, "practicecity": "FAIRFAX", "practicestate": "VA", "practicezip9code": 220332050, "telephonenumber": 7033787550, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.88034, "longitude": -77.39625, "is_contracted_for_cba": false}, {"provider_id": 20307803, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "PETER HARSCH PROSTHETICS OTTOBOCK C", "practiceaddress1": "5995 MIRA MESA BLVD", "practiceaddress2": "STE A", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921214305, "telephonenumber": 8584040733, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 32.89792, "longitude": -117.19158, "is_contracted_for_cba": false}, {"provider_id": 20328461, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 04051", "practiceaddress1": "1740 WASHINGTON RD", "practiceaddress2": null, "practicecity": "PITTSBURGH", "practicestate": "PA", "practicezip9code": 152411411, "telephonenumber": 4128335557, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.3479, "longitude": -80.05342, "is_contracted_for_cba": false}, {"provider_id": 20329613, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04838", "practiceaddress1": "708 E MAIN ST", "practiceaddress2": null, "practicecity": "PRATTVILLE", "practicestate": "AL", "practicezip9code": 360673620, "telephonenumber": 3343650661, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.45999, "longitude": -86.45619, "is_contracted_for_cba": false}, {"provider_id": 20329553, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04845", "practiceaddress1": "806 HOKE ST", "practiceaddress2": null, "practicecity": "GADSDEN", "practicestate": "AL", "practicezip9code": 359031810, "telephonenumber": 2564924807, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.00288, "longitude": -85.9695, "is_contracted_for_cba": false}, {"provider_id": 23279497, "acceptsassignement": false, "participationbegindate": 1719878400000, "businessname": "EFFECTIVE MEDICAL EQUIPMENT LLC", "practicename": "EFFECTIVE MEDICAL EQUIPMENT LLC", "practiceaddress1": "650 HENDERSON DR", "practiceaddress2": "STE 428", "practicecity": "CARTERSVILLE", "practicestate": "GA", "practicezip9code": 301203759, "telephonenumber": 4702271882, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Orthoses: Off-The-Shelf", "latitude": 34.1529460131, "longitude": -84.8159970272, "is_contracted_for_cba": false}, {"provider_id": 20329535, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY #04853", "practiceaddress1": "520 HIGHLAND AVENUE", "practiceaddress2": null, "practicecity": "SELMA", "practicestate": "AL", "practicezip9code": 367016655, "telephonenumber": 3348755530, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.43115, "longitude": -87.02983, "is_contracted_for_cba": false}, {"provider_id": 34356722, "acceptsassignement": true, "participationbegindate": 1684281600000, "businessname": "SIMPLY CARE PHARMACY CORP", "practicename": "SIMPLY CARE PHARMACY CORP", "practiceaddress1": "1222 AVENUE U", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112294107, "telephonenumber": 7166662554, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.5983741165, "longitude": -73.9595189942, "is_contracted_for_cba": false}, {"provider_id": 26716918, "acceptsassignement": true, "participationbegindate": 1684281600000, "businessname": "OPRX #11030, LLC", "practicename": "OPRX #11030, LLC", "practiceaddress1": "465 PLANDOME RD", "practiceaddress2": null, "practicecity": "MANHASSET", "practicestate": "NY", "practicezip9code": 110301942, "telephonenumber": 5166278666, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7990495352, "longitude": -73.70059882, "is_contracted_for_cba": false}, {"provider_id": 20364371, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #09092", "practiceaddress1": "70 GATEWAY BLVD", "practiceaddress2": null, "practicecity": "ROCK SPRINGS", "practicestate": "WY", "practicezip9code": 829015709, "telephonenumber": 3073822536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.57623, "longitude": -109.25005, "is_contracted_for_cba": false}, {"provider_id": 20364533, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #01093", "practiceaddress1": "2521 MAIN ST", "practiceaddress2": null, "practicecity": "VANCOUVER", "practicestate": "WA", "practicezip9code": 986602649, "telephonenumber": 3606932524, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.64019, "longitude": -122.67125, "is_contracted_for_cba": false}, {"provider_id": 20306189, "acceptsassignement": false, "participationbegindate": 1684195200000, "businessname": "MISSISSIPPI METHODIST HOSPITAL & REHABILITATION CENTER, INC.", "practicename": "METHODIST ORTHOTICS & PROSTHETICS", "practiceaddress1": "1 LAYFAIR DR", "practiceaddress2": "STE 300", "practicecity": "FLOWOOD", "practicestate": "MS", "practicezip9code": 392329717, "telephonenumber": 6019368899, "specialitieslist": "MSC With Orthotic Personnel|MSC With Prosthetic Personnel|MSC With Orthotic-Prosthetic", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 32.32602, "longitude": -90.10837, "is_contracted_for_cba": false}, {"provider_id": 20329649, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04905", "practiceaddress1": "240 HIGHWAY 31 SW", "practiceaddress2": "STE 11", "practicecity": "HARTSELLE", "practicestate": "AL", "practicezip9code": 356402803, "telephonenumber": 2567731768, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.41052, "longitude": -86.92045, "is_contracted_for_cba": false}, {"provider_id": 20330393, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04906", "practiceaddress1": "4240 NARROW LANE RD", "practiceaddress2": null, "practicecity": "MONTGOMERY", "practicestate": "AL", "practicezip9code": 361112650, "telephonenumber": 3342843297, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.32796, "longitude": -86.28223, "is_contracted_for_cba": false}, {"provider_id": 20563463, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK N SAVE PHARMACY #53400405", "practiceaddress1": "205 CENTRAL BRIDGE ST", "practiceaddress2": null, "practicecity": "WAUSAU", "practicestate": "WI", "practicezip9code": 544012947, "telephonenumber": 4142317345, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.96954, "longitude": -89.63503, "is_contracted_for_cba": false}, {"provider_id": 20563433, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANO'S PHARMACY #8536", "practiceaddress1": "150 W 63RD ST", "practiceaddress2": null, "practicecity": "WESTMONT", "practicestate": "IL", "practicezip9code": 605592614, "telephonenumber": 6309644654, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.77367, "longitude": -87.97891, "is_contracted_for_cba": false}, {"provider_id": 20563505, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANO'S PHARMACY #8535", "practiceaddress1": "9504 W 142ND ST", "practiceaddress2": null, "practicecity": "ORLAND PARK", "practicestate": "IL", "practicezip9code": 604624266, "telephonenumber": 7082260027, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.61532, "longitude": -87.81115, "is_contracted_for_cba": false}, {"provider_id": 23282485, "acceptsassignement": true, "participationbegindate": 1719532800000, "businessname": "GUARDIAN MEDICAL SUPPLIES, INC.", "practicename": "GUARDIAN MEDICAL SUPPLIES, INC", "practiceaddress1": "8408 SIX FORKS RD", "practiceaddress2": "STE 102B", "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276153077, "telephonenumber": 9192290883, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings", "latitude": 35.8950597122, "longitude": -78.646783856, "is_contracted_for_cba": false}, {"provider_id": 20320817, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17818", "practiceaddress1": "8701 SIX FORKS RD", "practiceaddress2": null, "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276152968, "telephonenumber": 9193343706, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.89911, "longitude": -78.65144, "is_contracted_for_cba": false}, {"provider_id": 20320019, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01733", "practiceaddress1": "6360 HOADLY RD", "practiceaddress2": null, "practicecity": "MANASSAS", "practicestate": "VA", "practicezip9code": 201123422, "telephonenumber": 7038974961, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.67333, "longitude": -77.39132, "is_contracted_for_cba": false}, {"provider_id": 20564045, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK N SAVE PHARMACY #6430", "practiceaddress1": "1629S MAIN ST", "practiceaddress2": null, "practicecity": "WEST BEND", "practicestate": "WI", "practicezip9code": 530954935, "telephonenumber": 2623352292, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.40071, "longitude": -88.18094, "is_contracted_for_cba": false}, {"provider_id": 20563751, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK 'N SAVE PHARMACY #6879", "practiceaddress1": "2355 N 35TH ST", "practiceaddress2": null, "practicecity": "MILWAUKEE", "practicestate": "WI", "practicezip9code": 532103033, "telephonenumber": 4144478117, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.06185, "longitude": -87.95762, "is_contracted_for_cba": false}, {"provider_id": 20336855, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #04634", "practiceaddress1": "111 LAKEVIEW DR", "practiceaddress2": null, "practicecity": "NOBLESVILLE", "practicestate": "IN", "practicezip9code": 460601308, "telephonenumber": 3177738100, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.04754, "longitude": -86.02421, "is_contracted_for_cba": false}, {"provider_id": 20337773, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 06494", "practiceaddress1": "700 N WAYNE ST", "practiceaddress2": null, "practicecity": "ANGOLA", "practicestate": "IN", "practicezip9code": 467031006, "telephonenumber": 2606652106, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.6431, "longitude": -84.99934, "is_contracted_for_cba": false}, {"provider_id": 20340209, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #04468", "practiceaddress1": "7935 S EMERSON AVE", "practiceaddress2": "STE B", "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462378607, "telephonenumber": 3178657593, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.65181, "longitude": -86.08263, "is_contracted_for_cba": false}, {"provider_id": 20396741, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "909 HASTY SCHOOL RD", "practiceaddress2": null, "practicecity": "THOMASVILLE", "practicestate": "NC", "practicezip9code": 273608620, "telephonenumber": 3368874927, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.91855, "longitude": -80.05892, "is_contracted_for_cba": false}, {"provider_id": 20397485, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "COMMUNITY A WALGREEN PHARMACY 16522", "practiceaddress1": "360 SHERMAN ST", "practiceaddress2": "STE 100", "practicecity": "SAINT PAUL", "practicestate": "MN", "practicezip9code": 551022425, "telephonenumber": 6514680604, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.94224, "longitude": -93.10694, "is_contracted_for_cba": false}, {"provider_id": 20397473, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "709 N GREEN BAY RD", "practiceaddress2": null, "practicecity": "WAUKEGAN", "practicestate": "IL", "practicezip9code": 600852235, "telephonenumber": 8476628091, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.37113, "longitude": -87.88184, "is_contracted_for_cba": false}, {"provider_id": 20397467, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16550", "practiceaddress1": "836 PRUDENTIAL DR", "practiceaddress2": "STE 120", "practicecity": "JACKSONVILLE", "practicestate": "FL", "practicezip9code": 322078334, "telephonenumber": 9042025288, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.3162, "longitude": -81.66401, "is_contracted_for_cba": false}, {"provider_id": 20320067, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08938", "practiceaddress1": "1701 INDEPENDENCE BLVD", "practiceaddress2": null, "practicecity": "VIRGINIA BEACH", "practicestate": "VA", "practicezip9code": 234554042, "telephonenumber": 7574602607, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.89431, "longitude": -76.14293, "is_contracted_for_cba": false}, {"provider_id": 20320031, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06852", "practiceaddress1": "16712 JEFFERSON DAVIS HWY", "practiceaddress2": null, "practicecity": "DUMFRIES", "practicestate": "VA", "practicezip9code": 22026, "telephonenumber": 7032217467, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.58798, "longitude": -77.306, "is_contracted_for_cba": false}, {"provider_id": 20320565, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07523", "practiceaddress1": "1040 ALAMANCE CHURCH ROAD", "practiceaddress2": null, "practicecity": "GREENSBORO", "practicestate": "NC", "practicezip9code": 274063808, "telephonenumber": 3362724121, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.04132, "longitude": -79.77069, "is_contracted_for_cba": false}, {"provider_id": 20334695, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04162", "practiceaddress1": "2556 CONSTITUTION BLVD", "practiceaddress2": null, "practicecity": "BEAVER FALLS", "practicestate": "PA", "practicezip9code": 150101249, "telephonenumber": 7248470675, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.77449, "longitude": -80.37703, "is_contracted_for_cba": false}, {"provider_id": 20329187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01624", "practiceaddress1": "5001 JONESTOWN RD", "practiceaddress2": null, "practicecity": "HARRISBURG", "practicestate": "PA", "practicezip9code": 171122922, "telephonenumber": 7175454229, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.30775, "longitude": -76.80431, "is_contracted_for_cba": false}, {"provider_id": 20331077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHAMACY 01774", "practiceaddress1": "100 PROVIDENCE MAIN ST NW", "practiceaddress2": "STE G", "practicecity": "HUNTSVILLE", "practicestate": "AL", "practicezip9code": 358064827, "telephonenumber": 2568372057, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.74893, "longitude": -86.69338, "is_contracted_for_cba": false}, {"provider_id": 20331335, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #16027", "practiceaddress1": "13201 RIDGEDALE DR", "practiceaddress2": null, "practicecity": "MINNETONKA", "practicestate": "MN", "practicezip9code": 553051809, "telephonenumber": 9525428266, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 44.97048, "longitude": -93.4456, "is_contracted_for_cba": false}, {"provider_id": 20395829, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4266", "practiceaddress1": "2150 W ORANGE GROVE RD", "practiceaddress2": null, "practicecity": "TUCSON", "practicestate": "AZ", "practicezip9code": 857413119, "telephonenumber": 5205449480, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.32323, "longitude": -111.01336, "is_contracted_for_cba": false}, {"provider_id": 20306249, "acceptsassignement": true, "participationbegindate": 1683676800000, "businessname": "5 STARS DME LLC", "practicename": "5 STARS DME LLC", "practiceaddress1": "501 MARINA", "practiceaddress2": "1A", "practicecity": "LAREDO", "practicestate": "TX", "practicezip9code": 780464065, "telephonenumber": 9567013509, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27.4361, "longitude": -99.48043, "is_contracted_for_cba": false}, {"provider_id": 20329229, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04144", "practiceaddress1": "3075 W LIBERTY AVE", "practiceaddress2": null, "practicecity": "PITTSBURGH", "practicestate": "PA", "practicezip9code": 152162460, "telephonenumber": 4123412269, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.39226, "longitude": -80.03766, "is_contracted_for_cba": false}, {"provider_id": 20306309, "acceptsassignement": true, "participationbegindate": 1683504000000, "businessname": "SANFORD HEALTH OF NORTHERN MINNESOTA", "practicename": "SANFORD BEMIDJI INFUSION PHARMACY", "practiceaddress1": "1233 34TH ST NW", "practiceaddress2": "STE B", "practicecity": "BEMIDJI", "practicestate": "MN", "practicezip9code": 566015112, "telephonenumber": 2183334770, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies", "latitude": 47.5015, "longitude": -94.90041, "is_contracted_for_cba": false}, {"provider_id": 20306393, "acceptsassignement": true, "participationbegindate": 1682899200000, "businessname": "DME EXPERT CARE LLC", "practicename": "DME EXPERT CARE LLC", "practiceaddress1": "1600 PROVIDENCE HWY", "practiceaddress2": "UNIT 222", "practicecity": "WALPOLE", "practicestate": "MA", "practicezip9code": 20812553, "telephonenumber": 8882029361, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42.12338, "longitude": -71.23223, "is_contracted_for_cba": false}, {"provider_id": 20564141, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK N SAVE PHARMACY #6397", "practiceaddress1": "15170 W GREENFIELD AVE", "practiceaddress2": null, "practicecity": "BROOKFIELD", "practicestate": "WI", "practicezip9code": 530057018, "telephonenumber": 2627822787, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.01689, "longitude": -88.10345, "is_contracted_for_cba": false}, {"provider_id": 20563631, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK 'N SAVE PHARMACY #6418", "practiceaddress1": "7401 W GOOD HOPE RD", "practiceaddress2": null, "practicecity": "MILWAUKEE", "practicestate": "WI", "practicezip9code": 532234618, "telephonenumber": 4147603273, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.14855, "longitude": -87.99869, "is_contracted_for_cba": false}, {"provider_id": 20564111, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "ROUNDYS SUPERMARKETS INC", "practiceaddress1": "1819 MAIN ST", "practiceaddress2": null, "practicecity": "GREEN BAY", "practicestate": "WI", "practicezip9code": 543023918, "telephonenumber": 9204693436, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.49453, "longitude": -87.97757, "is_contracted_for_cba": false}, {"provider_id": 20340167, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #02734", "practiceaddress1": "1299 W SOUTHPORT RD", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462174174, "telephonenumber": 3178595881, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.6626, "longitude": -86.18267, "is_contracted_for_cba": false}, {"provider_id": 20321171, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04441", "practiceaddress1": "1119 EASTCHESTER DR", "practiceaddress2": null, "practicecity": "HIGH POINT", "practicestate": "NC", "practicezip9code": 272653113, "telephonenumber": 3368811040, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.99225, "longitude": -79.99907, "is_contracted_for_cba": false}, {"provider_id": 20563343, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK N SAVE PHARMACY #6847", "practiceaddress1": "6760 W NATIONAL AVE", "practiceaddress2": null, "practicecity": "WEST ALLIS", "practicestate": "WI", "practicezip9code": 532144965, "telephonenumber": 4144765111, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.01394, "longitude": -87.9973, "is_contracted_for_cba": false}, {"provider_id": 23281003, "acceptsassignement": true, "participationbegindate": 1702598400000, "businessname": "BONITA MEDICAL SUPPLY INC", "practicename": "BONITA MEDICAL SUPPLY, INC.", "practiceaddress1": "4045 BONITA RD", "practiceaddress2": "STE 310", "practicecity": "BONITA", "practicestate": "CA", "practicezip9code": 919021347, "telephonenumber": 6195394725, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "latitude": 32.6586401781, "longitude": -117.0398362873, "is_contracted_for_cba": false}, {"provider_id": 23281015, "acceptsassignement": true, "participationbegindate": 1702512000000, "businessname": "DIABETIC MEDICS LLC", "practicename": "DIABETIC MEDICS", "practiceaddress1": "26039 205TH ST", "practiceaddress2": null, "practicecity": "DALLAS CENTER", "practicestate": "IA", "practicezip9code": 500638254, "telephonenumber": 5158507807, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies", "latitude": 41.7395310065, "longitude": -93.9681599727, "is_contracted_for_cba": false}, {"provider_id": 20316569, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02979", "practiceaddress1": "6120 E MOCKINGBIRD LN", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752142601, "telephonenumber": 2148876955, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.83634, "longitude": -96.76047, "is_contracted_for_cba": false}, {"provider_id": 20306369, "acceptsassignement": true, "participationbegindate": 1682899200000, "businessname": "DR RICHARD BARBER PLLC", "practicename": "BONA FIDE MEDICAL WOUND AND WELLNES", "practiceaddress1": "4455 S PADRE ISLAND DR", "practiceaddress2": "STE 13", "practicecity": "CORPUS CHRISTI", "practicestate": "TX", "practicezip9code": 784115161, "telephonenumber": 3612482663, "specialitieslist": null, "providertypelist": "PHYSICIAN ASSISTANT|NURSE PRACTITIONER|PHYSICIAN \u2013 ORTHOPEDIC/ORTHOPEDIC SURGERY|MULTI-SPECIALTY - PHYSICIAN", "supplieslist": "Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 27.71739, "longitude": -97.39067, "is_contracted_for_cba": false}, {"provider_id": 20306417, "acceptsassignement": true, "participationbegindate": 1682640000000, "businessname": "MASPETH DRUGS INC", "practicename": "MASPETH DRUGS INC", "practiceaddress1": "7111 GRAND AVE", "practiceaddress2": null, "practicecity": "MASPETH", "practicestate": "NY", "practicezip9code": 113781822, "telephonenumber": 7182556700, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.72832, "longitude": -73.89177, "is_contracted_for_cba": false}, {"provider_id": 20317649, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06292", "practiceaddress1": "7515 WILLIAMSON RD", "practiceaddress2": null, "practicecity": "ROANOKE", "practicestate": "VA", "practicezip9code": 240194301, "telephonenumber": 5405631010, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.34796, "longitude": -79.94976, "is_contracted_for_cba": false}, {"provider_id": 20317523, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06283", "practiceaddress1": "817 W MAIN ST", "practiceaddress2": null, "practicecity": "DANVILLE", "practicestate": "VA", "practicezip9code": 245414204, "telephonenumber": 4347930231, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.56997, "longitude": -79.42322, "is_contracted_for_cba": false}, {"provider_id": 20328485, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05709", "practiceaddress1": "405 W DUBOIS AVE", "practiceaddress2": null, "practicecity": "DUBOIS", "practicestate": "PA", "practicezip9code": 158012712, "telephonenumber": 8143719480, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.12901, "longitude": -78.76326, "is_contracted_for_cba": false}, {"provider_id": 20333603, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08160", "practiceaddress1": "23800 WEST RD", "practiceaddress2": null, "practicecity": "BROWNSTOWN TWP", "practicestate": "MI", "practicezip9code": 481833179, "telephonenumber": 7346924230, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.13819, "longitude": -83.26504, "is_contracted_for_cba": false}, {"provider_id": 20400065, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3782", "practiceaddress1": "5701 NW 183RD ST", "practiceaddress2": null, "practicecity": "HIALEAH", "practicestate": "FL", "practicezip9code": 330156022, "telephonenumber": 3056250952, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.9394, "longitude": -80.29586, "is_contracted_for_cba": false}, {"provider_id": 23281021, "acceptsassignement": true, "participationbegindate": 1702512000000, "businessname": "TRUE HEALTHCARE SERVICES LLC", "practicename": "TRUE HEALTHCARE SERVICES, LLC", "practiceaddress1": "5812 W PICO BLVD", "practiceaddress2": "STE B", "practicecity": "LOS ANGELES", "practicestate": "CA", "practicezip9code": 900193713, "telephonenumber": 3233302600, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 34.0508980183, "longitude": -118.3651529804, "is_contracted_for_cba": false}, {"provider_id": 23281039, "acceptsassignement": false, "participationbegindate": 1702425600000, "businessname": "SUZY HAJJAR", "practicename": "MEDIBELLA MEDICAL SUPPLY", "practiceaddress1": "14401 GILMORE ST", "practiceaddress2": "STE 203", "practicecity": "VAN NUYS", "practicestate": "CA", "practicezip9code": 914016269, "telephonenumber": 8188793260, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Surgical Dressings", "latitude": 34.1878480065, "longitude": -118.4467249915, "is_contracted_for_cba": false}, {"provider_id": 20307725, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "SCOTT SABOLICH OTTOBOCK CARE", "practiceaddress1": "15900 PRESTON RD", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752483551, "telephonenumber": 2143829270, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses", "latitude": 32.96551, "longitude": -96.80454, "is_contracted_for_cba": false}, {"provider_id": 20317805, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01534", "practiceaddress1": "1301 EAST NINE MILE RD", "practiceaddress2": null, "practicecity": "HIGHLAND SPRINGS", "practicestate": "VA", "practicezip9code": 230752305, "telephonenumber": 8047376493, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.53604, "longitude": -77.31858, "is_contracted_for_cba": false}, {"provider_id": 20339909, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06550", "practiceaddress1": "1700 E MAIN ST", "practiceaddress2": null, "practicecity": "PLAINFIELD", "practicestate": "IN", "practicezip9code": 461681849, "telephonenumber": 3178396822, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.71035, "longitude": -86.37779, "is_contracted_for_cba": false}, {"provider_id": 20340077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "HOOK-SUPERX LLC", "practiceaddress1": "100 N ANDERSON ST", "practiceaddress2": null, "practicecity": "ELWOOD", "practicestate": "IN", "practicezip9code": 460361541, "telephonenumber": 7655529565, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.27817, "longitude": -85.84198, "is_contracted_for_cba": false}, {"provider_id": 20339795, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06698", "practiceaddress1": "2650 S WALNUT ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IN", "practicezip9code": 474017302, "telephonenumber": 8123366223, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.13526, "longitude": -86.53138, "is_contracted_for_cba": false}, {"provider_id": 20399747, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04645", "practiceaddress1": "1534 CAPE CORAL PKWY W", "practiceaddress2": null, "practicecity": "CAPE CORAL", "practicestate": "FL", "practicezip9code": 339146953, "telephonenumber": 2395412035, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.56256, "longitude": -82.00587, "is_contracted_for_cba": false}, {"provider_id": 20399735, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "11101 US HIGHWAY 441", "practiceaddress2": "WALGREENS #4648", "practicecity": "TAVARES", "practicestate": "FL", "practicezip9code": 327784647, "telephonenumber": 3527421700, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.81671, "longitude": -81.76455, "is_contracted_for_cba": false}, {"provider_id": 20392499, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4608", "practiceaddress1": "1045 S GRATIOT AVE", "practiceaddress2": null, "practicecity": "CLINTON TOWNSHIP", "practicestate": "MI", "practicezip9code": 480363501, "telephonenumber": 5869544905, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.58369, "longitude": -82.88446, "is_contracted_for_cba": false}, {"provider_id": 20392505, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4688", "practiceaddress1": "14928 14TH AVE", "practiceaddress2": null, "practicecity": "WHITESTONE", "practicestate": "NY", "practicezip9code": 113571730, "telephonenumber": 7187469862, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.78848, "longitude": -73.81416, "is_contracted_for_cba": false}, {"provider_id": 20392547, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5426", "practiceaddress1": "1815 ROCHESTER RD", "practiceaddress2": null, "practicecity": "ROYAL OAK", "practicestate": "MI", "practicezip9code": 480734136, "telephonenumber": 2485466572, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.50497, "longitude": -83.14309, "is_contracted_for_cba": false}, {"provider_id": 20400233, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4378", "practiceaddress1": "925 BARTON BLVD", "practiceaddress2": null, "practicecity": "ROCKLEDGE", "practicestate": "FL", "practicezip9code": 329553129, "telephonenumber": 3216382482, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.33065, "longitude": -80.74178, "is_contracted_for_cba": false}, {"provider_id": 20359433, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #05621", "practiceaddress1": "6011 RANGEWOOD DR", "practiceaddress2": null, "practicecity": "COLORADO SPRINGS", "practicestate": "CO", "practicezip9code": 809187301, "telephonenumber": 7195937119, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.92074, "longitude": -104.7393, "is_contracted_for_cba": false}, {"provider_id": 20306477, "acceptsassignement": true, "participationbegindate": 1682380800000, "businessname": "CENTERPOINT MEDICAL LLC", "practicename": "CENTERPOINT MEDICAL LLC", "practiceaddress1": "5071 N RAINBOW BLVD", "practiceaddress2": "STE 190", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891301606, "telephonenumber": 7024441255, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies", "latitude": 36.28219, "longitude": -115.26889, "is_contracted_for_cba": false}, {"provider_id": 20306483, "acceptsassignement": true, "participationbegindate": 1682294400000, "businessname": "UNIVERSITY PHYSICIAN GROUP", "practicename": "UNIVERSITY PHYSICIAN GROUP", "practiceaddress1": "26400 W 12 MILE RD", "practiceaddress2": "STE 60", "practicecity": "SOUTHFIELD", "practicestate": "MI", "practicezip9code": 480341774, "telephonenumber": 2485946702, "specialitieslist": "Optometrist", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 42.50068, "longitude": -83.30695, "is_contracted_for_cba": false}, {"provider_id": 23282851, "acceptsassignement": true, "participationbegindate": 1682208000000, "businessname": "UNITED RX OF PENNSYLVANIA LLC", "practicename": "UNITED RX OF PENNSYLVANIA LLC", "practiceaddress1": "44 PRIMOS INDEPENDENCE CT", "practiceaddress2": "BAYS 15-17", "practicecity": "FOLCROFT", "practicestate": "PA", "practicezip9code": 190322111, "telephonenumber": 2158444500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.8937725011, "longitude": -75.2744727678, "is_contracted_for_cba": false}, {"provider_id": 20306513, "acceptsassignement": false, "participationbegindate": 1681776000000, "businessname": "MOUNTAIN PEAK ASSOCIATES LLC", "practicename": "YOU CAN HOME MEDICAL", "practiceaddress1": "4875 E EVANS AVE", "practiceaddress2": null, "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 802225213, "telephonenumber": 3033767449, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Lymphedema Compression Treatment Items", "latitude": 39.67855, "longitude": -104.93097, "is_contracted_for_cba": false}, {"provider_id": 34356758, "acceptsassignement": false, "participationbegindate": 1681689600000, "businessname": "STERLING COMMUNITY PHARMACY", "practicename": "STERLING COMMUNITY PHARMACY", "practiceaddress1": "129 W KEMPER RD", "practiceaddress2": null, "practicecity": "SPRINGDALE", "practicestate": "OH", "practicezip9code": 452462511, "telephonenumber": 5138103299, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.2876415297, "longitude": -84.4722645138, "is_contracted_for_cba": false}, {"provider_id": 20323565, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 10152", "practiceaddress1": "1501E OHIO ST", "practiceaddress2": null, "practicecity": "CLINTON", "practicestate": "MO", "practicezip9code": 647352432, "telephonenumber": 6608900707, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.36632, "longitude": -93.75153, "is_contracted_for_cba": false}, {"provider_id": 20323967, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 10053", "practiceaddress1": "400 MID RIVERS MALL DR", "practiceaddress2": null, "practicecity": "SAINT PETERS", "practicestate": "MO", "practicezip9code": 633761577, "telephonenumber": 6362791516, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.78998, "longitude": -90.62557, "is_contracted_for_cba": false}, {"provider_id": 20318027, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01372", "practiceaddress1": "6404 WILLIAMSBURG BLVD", "practiceaddress2": null, "practicecity": "ARLINGTON", "practicestate": "VA", "practicezip9code": 222071153, "telephonenumber": 7035386968, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.90025, "longitude": -77.15639, "is_contracted_for_cba": false}, {"provider_id": 20317691, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "VIRGINIA CVS PHARMACY LLC", "practiceaddress1": "2823 W MAIN ST", "practiceaddress2": "CVS PHARMACY # 00074", "practicecity": "WAYNESBORO", "practicestate": "VA", "practicezip9code": 229801619, "telephonenumber": 5409498871, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.08209, "longitude": -78.9285, "is_contracted_for_cba": false}, {"provider_id": 20318063, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01375", "practiceaddress1": "5017 COLUMBIA PIKE", "practiceaddress2": null, "practicecity": "ARLINGTON", "practicestate": "VA", "practicezip9code": 222042906, "telephonenumber": 7036712331, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.85574, "longitude": -77.11284, "is_contracted_for_cba": false}, {"provider_id": 20334809, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04008", "practiceaddress1": "242-250 FIFTH AVE", "practiceaddress2": "# 250", "practicecity": "PITTSBURGH", "practicestate": "PA", "practicezip9code": 152222712, "telephonenumber": 4125662619, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.44077, "longitude": -80.00075, "is_contracted_for_cba": false}, {"provider_id": 20314373, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16025", "practiceaddress1": "8601 RESEARCH BLVD", "practiceaddress2": null, "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787587121, "telephonenumber": 5126520483, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.36378, "longitude": -97.71731, "is_contracted_for_cba": false}, {"provider_id": 20392445, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5884", "practiceaddress1": "9527 S 27TH ST", "practiceaddress2": null, "practicecity": "FRANKLIN", "practicestate": "WI", "practicezip9code": 531329533, "telephonenumber": 4143041239, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.87199, "longitude": -87.95213, "is_contracted_for_cba": false}, {"provider_id": 20392421, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5828", "practiceaddress1": "1420 W STONE DR", "practiceaddress2": null, "practicecity": "KINGSPORT", "practicestate": "TN", "practicezip9code": 376602522, "telephonenumber": 4232463551, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.55836, "longitude": -82.57571, "is_contracted_for_cba": false}, {"provider_id": 20392757, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "111 S HALSTED ST", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606613507, "telephonenumber": 3124639142, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.87989, "longitude": -87.64718, "is_contracted_for_cba": false}, {"provider_id": 20359451, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06006", "practiceaddress1": "9525 E 21ST ST N", "practiceaddress2": null, "practicecity": "WICHITA", "practicestate": "KS", "practicezip9code": 672062946, "telephonenumber": 3166311401, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.72294, "longitude": -97.22679, "is_contracted_for_cba": false}, {"provider_id": 20372237, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7915", "practiceaddress1": "3580 ROUTE 66", "practiceaddress2": null, "practicecity": "NEPTUNE", "practicestate": "NJ", "practicezip9code": 77532603, "telephonenumber": 7329226379, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.22293, "longitude": -74.08524, "is_contracted_for_cba": false}, {"provider_id": 20322413, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #18026", "practiceaddress1": "48 PLAZA 94", "practiceaddress2": null, "practicecity": "SAINT PETERS", "practicestate": "MO", "practicezip9code": 633767405, "telephonenumber": 6369281625, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.74899, "longitude": -90.59219, "is_contracted_for_cba": false}, {"provider_id": 20340701, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06479", "practiceaddress1": "1703 CARROLL RD", "practiceaddress2": null, "practicecity": "FORT WAYNE", "practicestate": "IN", "practicezip9code": 468459372, "telephonenumber": 2603380834, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.19195, "longitude": -85.16544, "is_contracted_for_cba": false}, {"provider_id": 20340713, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #01078", "practiceaddress1": "14835 SUNNY DELL LN", "practiceaddress2": null, "practicecity": "NOBLESVILLE", "practicestate": "IN", "practicezip9code": 460626984, "telephonenumber": 3175691392, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.00314, "longitude": -86.06953, "is_contracted_for_cba": false}, {"provider_id": 20345477, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09234", "practiceaddress1": "46445 MISSION BLVD", "practiceaddress2": null, "practicecity": "FREMONT", "practicestate": "CA", "practicezip9code": 945397909, "telephonenumber": 5106562467, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.49171, "longitude": -121.92741, "is_contracted_for_cba": false}, {"provider_id": 20341733, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09554", "practiceaddress1": "77 BOVET RD", "practiceaddress2": null, "practicecity": "SAN MATEO", "practicestate": "CA", "practicezip9code": 944023104, "telephonenumber": 6503496303, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.55123, "longitude": -122.31445, "is_contracted_for_cba": false}, {"provider_id": 20317973, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 01547", "practiceaddress1": "6400 CENTRALIA RD", "practiceaddress2": null, "practicecity": "CHESTERFIELD", "practicestate": "VA", "practicezip9code": 238326523, "telephonenumber": 8047969084, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.37375, "longitude": -77.5006, "is_contracted_for_cba": false}, {"provider_id": 20319557, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01989", "practiceaddress1": "5001 FOREST HILL AVE", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232253147, "telephonenumber": 8042323333, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.52207, "longitude": -77.48996, "is_contracted_for_cba": false}, {"provider_id": 20317775, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01975", "practiceaddress1": "7023 THREE CHOPT RD", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232263606, "telephonenumber": 8042854449, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.59023, "longitude": -77.53188, "is_contracted_for_cba": false}, {"provider_id": 20319545, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05790", "practiceaddress1": "11271 NUCKOLS RD", "practiceaddress2": null, "practicecity": "GLEN ALLEN", "practicestate": "VA", "practicezip9code": 230595502, "telephonenumber": 8043178881, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.68007, "longitude": -77.58794, "is_contracted_for_cba": false}, {"provider_id": 20354963, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10149", "practiceaddress1": "13741 E 116TH ST", "practiceaddress2": null, "practicecity": "FISHERS", "practicestate": "IN", "practicezip9code": 460377604, "telephonenumber": 3175958764, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.95766, "longitude": -85.91957, "is_contracted_for_cba": false}, {"provider_id": 20372291, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7918", "practiceaddress1": "5 PATRICIA AVE", "practiceaddress2": null, "practicecity": "DUNEDIN", "practicestate": "FL", "practicezip9code": 346988102, "telephonenumber": 7277345354, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.99902, "longitude": -82.77543, "is_contracted_for_cba": false}, {"provider_id": 20371919, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10157", "practiceaddress1": "150 GRANT AVE", "practiceaddress2": null, "practicecity": "AUBURN", "practicestate": "NY", "practicezip9code": 130211502, "telephonenumber": 3157040293, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.94676, "longitude": -76.54894, "is_contracted_for_cba": false}, {"provider_id": 20314283, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16687", "practiceaddress1": "529 LINCOLN ST", "practiceaddress2": null, "practicecity": "WORCESTER", "practicestate": "MA", "practicezip9code": 16051905, "telephonenumber": 5088525790, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.294, "longitude": -71.77582, "is_contracted_for_cba": false}, {"provider_id": 20320139, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 16835", "practiceaddress1": "594 RIVER HWY", "practiceaddress2": null, "practicecity": "MOORESVILLE", "practicestate": "NC", "practicezip9code": 281176829, "telephonenumber": 7047991477, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.59527, "longitude": -80.86965, "is_contracted_for_cba": false}, {"provider_id": 20319551, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01988", "practiceaddress1": "3514 W CARY ST", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232212729, "telephonenumber": 8043558533, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.55574, "longitude": -77.4877, "is_contracted_for_cba": false}, {"provider_id": 20324345, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16868", "practiceaddress1": "1106 E NORTH AVE", "practiceaddress2": null, "practicecity": "BELTON", "practicestate": "MO", "practicezip9code": 640125104, "telephonenumber": 8163314325, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.81428, "longitude": -94.52432, "is_contracted_for_cba": false}, {"provider_id": 20311631, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16159", "practiceaddress1": "2000 CRATER LAKE HWY", "practiceaddress2": null, "practicecity": "MEDFORD", "practicestate": "OR", "practicezip9code": 975044161, "telephonenumber": 5417795110, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.34723, "longitude": -122.87611, "is_contracted_for_cba": false}, {"provider_id": 20371673, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02156", "practiceaddress1": "2551 W MAIN ST", "practiceaddress2": null, "practicecity": "ALHAMBRA", "practicestate": "CA", "practicezip9code": 918011652, "telephonenumber": 6262811637, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.09529, "longitude": -118.15168, "is_contracted_for_cba": false}, {"provider_id": 20355401, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9780", "practiceaddress1": "15480 MAIN ST", "practiceaddress2": null, "practicecity": "HESPERIA", "practicestate": "CA", "practicezip9code": 923453318, "telephonenumber": 7609472283, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.42553, "longitude": -117.32597, "is_contracted_for_cba": false}, {"provider_id": 20363723, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6888", "practiceaddress1": "5027 YOUNGSTOWN WARREN RD", "practiceaddress2": null, "practicecity": "NILES", "practicestate": "OH", "practicezip9code": 444464905, "telephonenumber": 3305543462, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.21366, "longitude": -80.7613, "is_contracted_for_cba": false}, {"provider_id": 20312495, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16744", "practiceaddress1": "4575 W 11TH AVE", "practiceaddress2": null, "practicecity": "EUGENE", "practicestate": "OR", "practicezip9code": 974025442, "telephonenumber": 5416844589, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44.0482, "longitude": -123.17187, "is_contracted_for_cba": false}, {"provider_id": 20319857, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 16834", "practiceaddress1": "12000 RETAIL DR", "practiceaddress2": null, "practicecity": "WAKE FOREST", "practicestate": "NC", "practicezip9code": 275877353, "telephonenumber": 9197611002, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.97648, "longitude": -78.54331, "is_contracted_for_cba": false}, {"provider_id": 20317529, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01976", "practiceaddress1": "5100 S LABURNUM AVE", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232314410, "telephonenumber": 8042227827, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.51565, "longitude": -77.34948, "is_contracted_for_cba": false}, {"provider_id": 20355041, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9085", "practiceaddress1": "1490 N ROCHESTER RD", "practiceaddress2": null, "practicecity": "ROCHESTER HILLS", "practicestate": "MI", "practicezip9code": 483071188, "telephonenumber": 2486011584, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.69514, "longitude": -83.13343, "is_contracted_for_cba": false}, {"provider_id": 20326277, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARIZONA CVS STORES LLC", "practicename": "CVS PHARMACY #09231", "practiceaddress1": "3506 E ROUTE 66", "practiceaddress2": null, "practicecity": "FLAGSTAFF", "practicestate": "AZ", "practicezip9code": 860044033, "telephonenumber": 9285266505, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.21543, "longitude": -111.59626, "is_contracted_for_cba": false}, {"provider_id": 20365061, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6843", "practiceaddress1": "2281 E SOUTH BLVD", "practiceaddress2": null, "practicecity": "MONTGOMERY", "practicestate": "AL", "practicezip9code": 361162488, "telephonenumber": 3342866678, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.32932, "longitude": -86.26779, "is_contracted_for_cba": false}, {"provider_id": 20364305, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06258", "practiceaddress1": "11607 98TH AVE NE", "practiceaddress2": null, "practicecity": "KIRKLAND", "practicestate": "WA", "practicezip9code": 980344216, "telephonenumber": 4258258841, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 47.70446, "longitude": -122.21028, "is_contracted_for_cba": false}, {"provider_id": 20364275, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7018", "practiceaddress1": "6838 N 7TH ST", "practiceaddress2": null, "practicecity": "PHOENIX", "practicestate": "AZ", "practicezip9code": 850141014, "telephonenumber": 6022746209, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.53765, "longitude": -112.06516, "is_contracted_for_cba": false}, {"provider_id": 20364299, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6963", "practiceaddress1": "106 MEMORIAL DR", "practiceaddress2": null, "practicecity": "PARIS", "practicestate": "TN", "practicezip9code": 382425414, "telephonenumber": 7316416669, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.28313, "longitude": -88.30547, "is_contracted_for_cba": false}, {"provider_id": 20363963, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7320", "practiceaddress1": "7320 CLINTON HWY", "practiceaddress2": null, "practicecity": "POWELL", "practicestate": "TN", "practicezip9code": 378495205, "telephonenumber": 8659474232, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0158, "longitude": -84.04519, "is_contracted_for_cba": false}, {"provider_id": 20358329, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2128", "practiceaddress1": "1845 ALTON RD", "practiceaddress2": null, "practicecity": "MIAMI BEACH", "practicestate": "FL", "practicezip9code": 331391504, "telephonenumber": 3055318868, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.79425, "longitude": -80.14125, "is_contracted_for_cba": false}, {"provider_id": 20358365, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #209", "practiceaddress1": "1028 S ELMHURST RD", "practiceaddress2": null, "practicecity": "MT PROSPECT", "practicestate": "IL", "practicezip9code": 600564240, "telephonenumber": 8474371858, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0464, "longitude": -87.94087, "is_contracted_for_cba": false}, {"provider_id": 20358371, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "3501 INGERSOLL AVE", "practiceaddress2": null, "practicecity": "DES MOINES", "practicestate": "IA", "practicezip9code": 503123406, "telephonenumber": 5152715047, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.5864, "longitude": -93.66477, "is_contracted_for_cba": false}, {"provider_id": 20364857, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4809", "practiceaddress1": "3595 SW 22ND ST", "practiceaddress2": null, "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331453012, "telephonenumber": 3054448427, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.75006, "longitude": -80.25149, "is_contracted_for_cba": false}, {"provider_id": 20340227, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY 01658", "practiceaddress1": "1074 N STATE ROAD 267", "practiceaddress2": null, "practicecity": "AVON", "practicestate": "IN", "practicezip9code": 461238863, "telephonenumber": 3172722133, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.77797, "longitude": -86.40015, "is_contracted_for_cba": false}, {"provider_id": 20337599, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06508", "practiceaddress1": "529 W MAIN ST", "practiceaddress2": null, "practicecity": "BUTLER", "practicestate": "IN", "practicezip9code": 467211348, "telephonenumber": 2608682427, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.42968, "longitude": -84.88347, "is_contracted_for_cba": false}, {"provider_id": 20340377, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #08665", "practiceaddress1": "3910 W 3RD ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IN", "practicezip9code": 474044853, "telephonenumber": 8123394006, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.16474, "longitude": -86.58245, "is_contracted_for_cba": false}, {"provider_id": 20355473, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #1988", "practiceaddress1": "1915 WISCONSIN AVE", "practiceaddress2": null, "practicecity": "GRAFTON", "practicestate": "WI", "practicezip9code": 530242605, "telephonenumber": 2623770352, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.30793, "longitude": -87.95885, "is_contracted_for_cba": false}, {"provider_id": 20407439, "acceptsassignement": true, "participationbegindate": 1613347200000, "businessname": "FOOT COUNTRY LLC", "practicename": "FOOT COUNTRY, LLC", "practiceaddress1": "232 LEE ST N", "practiceaddress2": "STE D", "practicecity": "LEWISBURG", "practicestate": "WV", "practicezip9code": 249010300, "telephonenumber": 3045203086, "specialitieslist": "Orthotic Personnel", "providertypelist": "PHYSICIAN \u2013 GENERAL PRACTICE)", "supplieslist": "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 37.84379, "longitude": -80.45784, "is_contracted_for_cba": false}, {"provider_id": 20462165, "acceptsassignement": true, "participationbegindate": 1701907200000, "businessname": "A STEP AHEAD ORTHOTICS AND PROSTHETICS INC", "practicename": "A STEP AHEAD ORTHOTICS AND PROSTHET", "practiceaddress1": "237 DOVER RD", "practiceaddress2": null, "practicecity": "CLARKSVILLE", "practicestate": "TN", "practicezip9code": 370424155, "telephonenumber": 6153830048, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": "PEDORTHIC PERSONNEL", "supplieslist": "Contracture Treatment Devices: Dynamic Splint|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 36.55115, "longitude": -87.39526, "is_contracted_for_cba": false}, {"provider_id": 20312471, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 11392", "practiceaddress1": "1821 NE 33RD AVE", "practiceaddress2": null, "practicecity": "PORTLAND", "practicestate": "OR", "practicezip9code": 972125113, "telephonenumber": 5035356031, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.53612, "longitude": -122.63079, "is_contracted_for_cba": false}, {"provider_id": 21609111, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "OTTO BOCK PATIENT CARE LLC", "practiceaddress1": "11871 PLAZA DR", "practiceaddress2": "UNIT 6", "practicecity": "MURRELLS INLET", "practicestate": "SC", "practicezip9code": 295767450, "telephonenumber": 8436515347, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 33.5893460054, "longitude": -79.0254609748, "is_contracted_for_cba": false}, {"provider_id": 20307779, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "OTTO BOCK PATIENT CARE LLC", "practiceaddress1": "1795 PARKER RD SE", "practiceaddress2": "STE E120E130", "practicecity": "CONYERS", "practicestate": "GA", "practicezip9code": 300946659, "telephonenumber": 7702715581, "specialitieslist": null, "providertypelist": "CERTIFIED ORTH/PROS/PEDORTHIST", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 33.65228, "longitude": -84.01204, "is_contracted_for_cba": false}, {"provider_id": 20364797, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "2107 AIRLINE DR", "practiceaddress2": null, "practicecity": "BOSSIER CITY", "practicestate": "LA", "practicezip9code": 711113105, "telephonenumber": 3187425590, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.52758, "longitude": -93.70128, "is_contracted_for_cba": false}, {"provider_id": 20314673, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10910", "practiceaddress1": "3030 SYLVAN AVE", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752124025, "telephonenumber": 2147495197, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.77925, "longitude": -96.83569, "is_contracted_for_cba": false}, {"provider_id": 20319533, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02338", "practiceaddress1": "700 MERRIMAC TRL", "practiceaddress2": null, "practicecity": "WILLIAMSBURG", "practicestate": "VA", "practicezip9code": 231855351, "telephonenumber": 7572584450, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.2682, "longitude": -76.67701, "is_contracted_for_cba": false}, {"provider_id": 20321963, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07566", "practiceaddress1": "8765 HWY 52", "practiceaddress2": null, "practicecity": "ROCKWELL", "practicestate": "NC", "practicezip9code": 281388550, "telephonenumber": 7042792581, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.56193, "longitude": -80.41579, "is_contracted_for_cba": false}, {"provider_id": 20312885, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16651", "practiceaddress1": "400 COCHITUATE RD", "practiceaddress2": null, "practicecity": "FRAMINGHAM", "practicestate": "MA", "practicezip9code": 17014655, "telephonenumber": 5086289004, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.30374, "longitude": -71.40008, "is_contracted_for_cba": false}, {"provider_id": 20361107, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3398", "practiceaddress1": "5501 S KIRKMAN RD", "practiceaddress2": null, "practicecity": "ORLANDO", "practicestate": "FL", "practicezip9code": 328197915, "telephonenumber": 4072480315, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.48162, "longitude": -81.45859, "is_contracted_for_cba": false}, {"provider_id": 20407463, "acceptsassignement": false, "participationbegindate": 1613088000000, "businessname": "B7 HEALTH", "practicename": "B7 HEALTH", "practiceaddress1": "2675 E SLAUSON AVE", "practiceaddress2": "STE A", "practicecity": "HUNTINGTON PARK", "practicestate": "CA", "practicezip9code": 902552926, "telephonenumber": 3234877007, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.98931, "longitude": -118.22387, "is_contracted_for_cba": false}, {"provider_id": 20407481, "acceptsassignement": false, "participationbegindate": 1613001600000, "businessname": "REMARKABLE PROSTHETICS & ORTHOTICS INC", "practicename": "REMARKABLE PROSTHETICS & ORTHOTICS,", "practiceaddress1": "23 WEST JAMAICA AVE", "practiceaddress2": null, "practicecity": "VALLEY STREAM", "practicestate": "NY", "practicezip9code": 11580, "telephonenumber": 5162846699, "specialitieslist": "Orthotic Personnel", "providertypelist": null, "supplieslist": "Contracture Treatment Devices: Dynamic Splint|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.66182, "longitude": -73.70011, "is_contracted_for_cba": false}, {"provider_id": 24547260, "acceptsassignement": true, "participationbegindate": 1613001600000, "businessname": "HORIZON PHARMACY", "practicename": "PHARMACY WARWICK", "practiceaddress1": "2756 POST RD", "practiceaddress2": "STE 105", "practicecity": "WARWICK", "practicestate": "RI", "practicezip9code": 28863077, "telephonenumber": 4016814220, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Enteral Nutrients|Nebulizer Equipment and/or Supplies", "latitude": 41.7090090186, "longitude": -71.44976202, "is_contracted_for_cba": false}, {"provider_id": 20407493, "acceptsassignement": true, "participationbegindate": 1612915200000, "businessname": "FLORIDA HOSPITAL HOME INFUSION, LLP", "practicename": "FLORIDA HOSPITAL HOME INFUSION,LLP", "practiceaddress1": "11461 N US HIGHWAY 301", "practiceaddress2": "STE 105", "practicecity": "THONOTOSASSA", "practicestate": "FL", "practicezip9code": 335923541, "telephonenumber": 8134362900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 28.0534, "longitude": -82.33203, "is_contracted_for_cba": false}, {"provider_id": 20345183, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "PREFERRED ORTHOTIC AND PROSTHETIC SERVICES, INC", "practicename": "PREFERRED ORTHOTIC AND PROSTHETIC S", "practiceaddress1": "922 S 348TH ST", "practiceaddress2": null, "practicecity": "FEDERAL WAY", "practicestate": "WA", "practicezip9code": 980037021, "telephonenumber": 2539523887, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 47.28995, "longitude": -122.32204, "is_contracted_for_cba": false}, {"provider_id": 20344151, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO PHARMACY 320", "practiceaddress1": "1055 HUDSON ST", "practiceaddress2": null, "practicecity": "UNION", "practicestate": "NJ", "practicezip9code": 70836809, "telephonenumber": 9088101458, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.69412, "longitude": -74.29006, "is_contracted_for_cba": false}, {"provider_id": 20312297, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MAIN STREET PHARMACY, LLC", "practicename": "CVS PHARMACY #48353", "practiceaddress1": "14703 EAGLE VISTA DR", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770775394, "telephonenumber": 2812497290, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.76227, "longitude": -95.64102, "is_contracted_for_cba": false}, {"provider_id": 20308007, "acceptsassignement": true, "participationbegindate": 1673308800000, "businessname": "MELROSE AVE PHARMACY LLC", "practicename": "MELROSE AVE PHARMACY LLC", "practiceaddress1": "899 MELROSE AVE", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104514166, "telephonenumber": 9179155656, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.82467, "longitude": -73.91371, "is_contracted_for_cba": false}, {"provider_id": 20407571, "acceptsassignement": true, "participationbegindate": 1612396800000, "businessname": "R2 MEDICAL", "practicename": "R2 MEDICAL", "practiceaddress1": "2136 S RICHARDS ST", "practiceaddress2": null, "practicecity": "SALT LAKE CITY", "practicestate": "UT", "practicezip9code": 841152606, "telephonenumber": 8013088992, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf", "latitude": 40.72461, "longitude": -111.89291, "is_contracted_for_cba": false}, {"provider_id": 20360339, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2810", "practiceaddress1": "1810 FREEDOM BLVD", "practiceaddress2": null, "practicecity": "FREEDOM", "practicestate": "CA", "practicezip9code": 950193000, "telephonenumber": 8317680183, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.93418, "longitude": -121.77222, "is_contracted_for_cba": false}, {"provider_id": 20361695, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1780 N UNIVERSITY DR", "practiceaddress2": null, "practicecity": "PLANTATION", "practicestate": "FL", "practicezip9code": 333224107, "telephonenumber": 9547413010, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.1486, "longitude": -80.25624, "is_contracted_for_cba": false}, {"provider_id": 20318141, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "R&M REYES ENTERPRISE, LLC", "practicename": "R & M REYES ENTERPRISE, LLC", "practiceaddress1": "94-479 UKEE ST", "practiceaddress2": "STE 101", "practicecity": "WAIPAHU", "practicestate": "HI", "practicezip9code": 967976208, "telephonenumber": 8086767661, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Urological Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 21.42463, "longitude": -158.00235, "is_contracted_for_cba": false}, {"provider_id": 20308085, "acceptsassignement": false, "participationbegindate": 1672876800000, "businessname": "WEST MEDRX LLC", "practicename": "WEST MEDRX LLC", "practiceaddress1": "375 E CENTRAL AVE", "practiceaddress2": "STE 373B", "practicecity": "WINTER HAVEN", "practicestate": "FL", "practicezip9code": 338803047, "telephonenumber": 8334734323, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf", "latitude": 28.02232, "longitude": -81.72277, "is_contracted_for_cba": false}, {"provider_id": 20683145, "acceptsassignement": true, "participationbegindate": 1672704000000, "businessname": "SB VENTURE LLC", "practicename": "DOCTOR PHARMACY RX", "practiceaddress1": "215 S POWER RD", "practiceaddress2": "STE 251", "practicecity": "MESA", "practicestate": "AZ", "practicezip9code": 852065238, "telephonenumber": 4802562522, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Insulin Infusion Pumps and/or Supplies", "latitude": 33.411615418, "longitude": -111.6820068526, "is_contracted_for_cba": false}, {"provider_id": 20315741, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07603", "practiceaddress1": "1301 N SAGINAW BLVD", "practiceaddress2": null, "practicecity": "SAGINAW", "practicestate": "TX", "practicezip9code": 761795095, "telephonenumber": 8178476918, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.8819, "longitude": -97.38331, "is_contracted_for_cba": false}, {"provider_id": 20344211, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO PHARMACY #749", "practiceaddress1": "100 CENTERTON RD", "practiceaddress2": null, "practicecity": "MOUNT LAUREL", "practicestate": "NJ", "practicezip9code": 80546103, "telephonenumber": 8563593650, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.97176, "longitude": -74.90755, "is_contracted_for_cba": false}, {"provider_id": 20344205, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO PHARMACY #1025", "practiceaddress1": "245 STAFFORD PARK BLVD", "practiceaddress2": null, "practicecity": "STAFFORD TOWNSHIP", "practicestate": "NJ", "practicezip9code": 80502734, "telephonenumber": 6092422011, "specialitieslist": "Medical Supply Company Other|Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.71181, "longitude": -74.28327, "is_contracted_for_cba": false}, {"provider_id": 20312909, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16019", "practiceaddress1": "105 W TROUTMAN PKWY", "practiceaddress2": null, "practicecity": "FORT COLLINS", "practicestate": "CO", "practicezip9code": 805253038, "telephonenumber": 9702230840, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.52854, "longitude": -105.07835, "is_contracted_for_cba": false}, {"provider_id": 20331869, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #00211", "practiceaddress1": "18900 TELEGRAPH RD", "practiceaddress2": null, "practicecity": "BROWNSTOWN TOWNSHIP", "practicestate": "MI", "practicezip9code": 481749566, "telephonenumber": 7349412067, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.1692, "longitude": -83.26691, "is_contracted_for_cba": false}, {"provider_id": 20331809, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "EVERGREEN PROSTHETICS AND ORTHOTICS LLC", "practicename": "EVERGREEN PROSTHETICS & ORTHOTICS", "practiceaddress1": "149 NE 102ND AVE", "practiceaddress2": null, "practicecity": "PORTLAND", "practicestate": "OR", "practicezip9code": 972204168, "telephonenumber": 5032083699, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 45.52373, "longitude": -122.55836, "is_contracted_for_cba": false}, {"provider_id": 24547266, "acceptsassignement": true, "participationbegindate": 1612137600000, "businessname": "1ST AMERICA INFUSION SERVICES LLC", "practicename": "1ST AMERICA INFUSION SERVICES LLC", "practiceaddress1": "10 WARREN RD", "practiceaddress2": "STE 220", "practicecity": "COCKEYSVILLE", "practicestate": "MD", "practicezip9code": 210302531, "telephonenumber": 4433187696, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Infusion Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 39.4751109972, "longitude": -76.6399819761, "is_contracted_for_cba": false}, {"provider_id": 20407787, "acceptsassignement": true, "participationbegindate": 1612137600000, "businessname": "WALLABOUT PHARMACY INC", "practicename": "REMEDIES PHARMACY", "practiceaddress1": "711 BEDFORD AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112065428, "telephonenumber": 7188550214, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.69935, "longitude": -73.95698, "is_contracted_for_cba": false}, {"provider_id": 20345243, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06381", "practiceaddress1": "2425 N 16TH ST", "practiceaddress2": null, "practicecity": "ORANGE", "practicestate": "TX", "practicezip9code": 776302382, "telephonenumber": 4098863546, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.1133, "longitude": -93.74751, "is_contracted_for_cba": false}, {"provider_id": 26715454, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "JANNE M LYNCH DDS PLLC", "practicename": "AZ DENTIST", "practiceaddress1": "10245 E VIA LINDA", "practiceaddress2": "STE 226", "practicecity": "SCOTTSDALE", "practicestate": "AZ", "practicezip9code": 852585345, "telephonenumber": 6239791900, "specialitieslist": null, "providertypelist": "ORAL SURGERY - DENTIST|INTERVENTIONAL PAIN MANAGEMENT - PHYSICIAN", "supplieslist": "Orthoses: Prefabricated (Non-Custom Fabricated)", "latitude": 33.574171827, "longitude": -111.8605584893, "is_contracted_for_cba": false}, {"provider_id": 20318207, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "CINDERELLA'S CLOSET YOUR SPECIALTY LINGERIE BOUTIQUE", "practicename": "CINDERELLA'S CLOSET LINGERIE", "practiceaddress1": "9651 BUSINESS CENTER DR", "practiceaddress2": "STE B", "practicecity": "RANCHO CUCAMONGA", "practicestate": "CA", "practicezip9code": 917304562, "telephonenumber": 9517588827, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Breast Prostheses and/or Accessories|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 34.12146, "longitude": -117.60806, "is_contracted_for_cba": false}, {"provider_id": 26717788, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "4728 W IRVING PARK RD", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606412701, "telephonenumber": 7736280043, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.9539880343, "longitude": -87.7466076835, "is_contracted_for_cba": false}, {"provider_id": 20358071, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3459", "practiceaddress1": "2115 E HILLSBOROUGH AVE", "practiceaddress2": null, "practicecity": "TAMPA", "practicestate": "FL", "practicezip9code": 336108211, "telephonenumber": 8132373743, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.99598, "longitude": -82.43562, "is_contracted_for_cba": false}, {"provider_id": 20358065, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #1925", "practiceaddress1": "13317 N BOULEVARD", "practiceaddress2": null, "practicecity": "TAMPA", "practicestate": "FL", "practicezip9code": 336123317, "telephonenumber": 8139358524, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.06823, "longitude": -82.46764, "is_contracted_for_cba": false}, {"provider_id": 20357963, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1490 MEXICO LOOP RD E", "practiceaddress2": null, "practicecity": "O FALLON", "practicestate": "MO", "practicezip9code": 633666015, "telephonenumber": 6369781602, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.78957, "longitude": -90.69859, "is_contracted_for_cba": false}, {"provider_id": 20358011, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5315", "practiceaddress1": "840 W SHERMAN BLVD", "practiceaddress2": null, "practicecity": "MUSKEGON", "practicestate": "MI", "practicezip9code": 494413533, "telephonenumber": 2317598587, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.20522, "longitude": -86.264, "is_contracted_for_cba": false}, {"provider_id": 20314187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 17452", "practiceaddress1": "6931 FM 1960 RD E", "practiceaddress2": null, "practicecity": "HUMBLE", "practicestate": "TX", "practicezip9code": 773462705, "telephonenumber": 2813182238, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.99885, "longitude": -95.17229, "is_contracted_for_cba": false}, {"provider_id": 20334245, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #17022", "practiceaddress1": "28201 DIEHL RD", "practiceaddress2": null, "practicecity": "WARRENVILLE", "practicestate": "IL", "practicezip9code": 605553934, "telephonenumber": 6306575565, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.8015, "longitude": -88.16563, "is_contracted_for_cba": false}, {"provider_id": 20340131, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #03297", "practiceaddress1": "4935 S ARLINGTON AVE", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462373516, "telephonenumber": 3177913822, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.69473, "longitude": -86.06348, "is_contracted_for_cba": false}, {"provider_id": 20313635, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07808", "practiceaddress1": "4805 MEDICAL DR", "practiceaddress2": null, "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 782294301, "telephonenumber": 2106160482, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.51058, "longitude": -98.58089, "is_contracted_for_cba": false}, {"provider_id": 20341853, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09556", "practiceaddress1": "1740 S VICTORIA AVE", "practiceaddress2": null, "practicecity": "VENTURA", "practicestate": "CA", "practicezip9code": 930036592, "telephonenumber": 8056441833, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.25833, "longitude": -119.21083, "is_contracted_for_cba": false}, {"provider_id": 20321927, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03808", "practiceaddress1": "2225 12TH AVE NE", "practiceaddress2": null, "practicecity": "HICKORY", "practicestate": "NC", "practicezip9code": 286013188, "telephonenumber": 8282566456, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.74374, "longitude": -81.29487, "is_contracted_for_cba": false}, {"provider_id": 20342117, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09567", "practiceaddress1": "1835 CLIFF DR", "practiceaddress2": null, "practicecity": "SANTA BARBARA", "practicestate": "CA", "practicezip9code": 931091652, "telephonenumber": 8059628709, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.40131, "longitude": -119.72143, "is_contracted_for_cba": false}, {"provider_id": 20321141, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03508", "practiceaddress1": "762 E CHURCH ST", "practiceaddress2": null, "practicecity": "MARTINSVILLE", "practicestate": "VA", "practicezip9code": 241123107, "telephonenumber": 2766329804, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.68967, "longitude": -79.85496, "is_contracted_for_cba": false}, {"provider_id": 20322125, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03589", "practiceaddress1": "6131 SIX FORKS RD", "practiceaddress2": null, "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276093841, "telephonenumber": 9198475458, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.86418, "longitude": -78.63758, "is_contracted_for_cba": false}, {"provider_id": 20407733, "acceptsassignement": true, "participationbegindate": 1612137600000, "businessname": "FOSTERS PHARMACY, INC.", "practicename": "FOSTERS PHARMACY INC", "practiceaddress1": "207 W HIGH ST", "practiceaddress2": null, "practicecity": "MOUNT VERNON", "practicestate": "OH", "practicezip9code": 430502427, "telephonenumber": 7403920911, "specialitieslist": "Medical Supply Company Other|Certified Other|Pharmacy", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 40.39388, "longitude": -82.48844, "is_contracted_for_cba": false}, {"provider_id": 20341559, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #03069", "practiceaddress1": "451 S REINO RD", "practiceaddress2": null, "practicecity": "NEWBURY PARK", "practicestate": "CA", "practicezip9code": 913204267, "telephonenumber": 8054994006, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.16815, "longitude": -118.95634, "is_contracted_for_cba": false}, {"provider_id": 20333183, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 18048", "practiceaddress1": "800 CARLYLE AVE", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622215509, "telephonenumber": 6182770419, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.51737, "longitude": -89.95154, "is_contracted_for_cba": false}, {"provider_id": 20333243, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #18098", "practiceaddress1": "2642 CHARLES ST", "practiceaddress2": null, "practicecity": "ROCKFORD", "practicestate": "IL", "practicezip9code": 611081671, "telephonenumber": 8154842461, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.25939, "longitude": -89.05389, "is_contracted_for_cba": false}, {"provider_id": 20333129, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "2555 SYCAMORE RD", "practiceaddress2": null, "practicecity": "DEKALB", "practicestate": "IL", "practicezip9code": 601152051, "telephonenumber": 8157876971, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.95371, "longitude": -88.72404, "is_contracted_for_cba": false}, {"provider_id": 20333063, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "7601 KINGERY HWY", "practiceaddress2": null, "practicecity": "WILLOWBROOK", "practicestate": "IL", "practicezip9code": 605275538, "telephonenumber": 6303212081, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.74947, "longitude": -87.94438, "is_contracted_for_cba": false}, {"provider_id": 23282557, "acceptsassignement": false, "participationbegindate": 1611878400000, "businessname": "BRANAC NY LLC", "practicename": "BRANAC NY LLC", "practiceaddress1": "2720 MERMAID AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112242006, "telephonenumber": 7183332525, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.575499316, "longitude": -73.9938842943, "is_contracted_for_cba": false}, {"provider_id": 20336333, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN LOUISIANA CO INC", "practicename": "WALGREENS #5040", "practiceaddress1": "1801 SAINT CHARLES AVE", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701305225, "telephonenumber": 5045618458, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.93616, "longitude": -90.07798, "is_contracted_for_cba": false}, {"provider_id": 20336363, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN LOUISIANA CO INC", "practicename": "WALGREENS #6219", "practiceaddress1": "2636 RYAN ST", "practiceaddress2": null, "practicecity": "LAKE CHARLES", "practicestate": "LA", "practicezip9code": 706017326, "telephonenumber": 3374334178, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.20625, "longitude": -93.21876, "is_contracted_for_cba": false}, {"provider_id": 20363111, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6753", "practiceaddress1": "8045 N LOOP DR", "practiceaddress2": null, "practicecity": "EL PASO", "practicestate": "TX", "practicezip9code": 799153227, "telephonenumber": 9155925849, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 31.72995, "longitude": -106.35006, "is_contracted_for_cba": false}, {"provider_id": 20362817, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5407", "practiceaddress1": "295 MAIN ST", "practiceaddress2": null, "practicecity": "MANCHESTER", "practicestate": "CT", "practicezip9code": 60404128, "telephonenumber": 8606498747, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.78257, "longitude": -72.52273, "is_contracted_for_cba": false}, {"provider_id": 20320637, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07574", "practiceaddress1": "12121 S 226 HWY", "practiceaddress2": null, "practicecity": "SPRUCE PINE", "practicestate": "NC", "practicezip9code": 287778908, "telephonenumber": 8287657076, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.88946, "longitude": -82.06681, "is_contracted_for_cba": false}, {"provider_id": 20320685, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07580", "practiceaddress1": "1180 N BRIGHT LEAF BLVD", "practiceaddress2": null, "practicecity": "SMITHFIELD", "practicestate": "NC", "practicezip9code": 275774228, "telephonenumber": 9199380591, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.51835, "longitude": -78.31689, "is_contracted_for_cba": false}, {"provider_id": 34358894, "acceptsassignement": true, "participationbegindate": 1611360000000, "businessname": "ELLSWORTH FOOT AND ANKLE CLINIC", "practicename": "ELLSWORTH FOOT AND ANKLE CLINIC", "practiceaddress1": "2019 E RIVERSIDE DR", "practiceaddress2": "STE A101", "practicecity": "ST GEORGE", "practicestate": "UT", "practicezip9code": 847908147, "telephonenumber": 8012536886, "specialitieslist": null, "providertypelist": "NURSE PRACTITIONER|PHYSICIAN \u2013 PODIATRY", "supplieslist": "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 37.0989351986, "longitude": -113.5400960006, "is_contracted_for_cba": false}, {"provider_id": 24546606, "acceptsassignement": true, "participationbegindate": 1611360000000, "businessname": "PHARMACY ON BAY STREET INC.", "practicename": "PHARMACY ON BAY STREET INC.", "practiceaddress1": "1209 BAY ST", "practiceaddress2": null, "practicecity": "STATEN ISLAND", "practicestate": "NY", "practicezip9code": 103053121, "telephonenumber": 9292697000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6138105647, "longitude": -74.065756348, "is_contracted_for_cba": false}, {"provider_id": 20341163, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09951", "practiceaddress1": "8063 SAN MIGUEL CANYON RD", "practiceaddress2": null, "practicecity": "SALINAS", "practicestate": "CA", "practicezip9code": 939071244, "telephonenumber": 8316632135, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.80092, "longitude": -121.66519, "is_contracted_for_cba": false}, {"provider_id": 20337191, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #18075", "practiceaddress1": "3700 1ST AVE", "practiceaddress2": null, "practicecity": "EVANSVILLE", "practicestate": "IN", "practicezip9code": 477103324, "telephonenumber": 8124643952, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.01276, "longitude": -87.57429, "is_contracted_for_cba": false}, {"provider_id": 20341133, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONG'S DRUGS #09952", "practiceaddress1": "645 ALEKA LOOP", "practiceaddress2": null, "practicecity": "KAPAA", "practicestate": "HI", "practicezip9code": 967462099, "telephonenumber": 8088224918, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 22.05197, "longitude": -159.33193, "is_contracted_for_cba": false}, {"provider_id": 20320559, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07597", "practiceaddress1": "803 S MAIN ST", "practiceaddress2": null, "practicecity": "LILLINGTON", "practicestate": "NC", "practicezip9code": 275465831, "telephonenumber": 9108935745, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.39818, "longitude": -78.81632, "is_contracted_for_cba": false}, {"provider_id": 20363357, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2524", "practiceaddress1": "337 75TH AVE", "practiceaddress2": null, "practicecity": "ST PETE BEACH", "practicestate": "FL", "practicezip9code": 337061829, "telephonenumber": 7273677657, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.74325, "longitude": -82.74985, "is_contracted_for_cba": false}, {"provider_id": 20363369, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3828", "practiceaddress1": "2110 SE OCEAN BLVD", "practiceaddress2": null, "practicecity": "STUART", "practicestate": "FL", "practicezip9code": 349963306, "telephonenumber": 7722831045, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.19716, "longitude": -80.22354, "is_contracted_for_cba": false}, {"provider_id": 20358293, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6605 4TH ST NW", "practiceaddress2": null, "practicecity": "LOS RANCHOS", "practicestate": "NM", "practicezip9code": 871076112, "telephonenumber": 5053459059, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.15326, "longitude": -106.63855, "is_contracted_for_cba": false}, {"provider_id": 20408069, "acceptsassignement": true, "participationbegindate": 1611187200000, "businessname": "CAREFLUENT CONNECT LLC", "practicename": "CAREFLUENT CONNECT", "practiceaddress1": "60 ATHLETES WAY N", "practiceaddress2": "STE 300", "practicecity": "MT JULIET", "practicestate": "TN", "practicezip9code": 371224440, "telephonenumber": 6153223010, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist|MSC With Orthotic Personnel|Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 36.1572, "longitude": -86.50497, "is_contracted_for_cba": false}, {"provider_id": 20437643, "acceptsassignement": true, "participationbegindate": 1546300800000, "businessname": "GERMAN DOBSON CVS LLC", "practicename": "GERMAN DOBSON CVS LLC", "practiceaddress1": "3931 S GILBERT RD", "practiceaddress2": null, "practicecity": "GILBERT", "practicestate": "AZ", "practicezip9code": 852972004, "telephonenumber": 4802810202, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.27812, "longitude": -111.78858, "is_contracted_for_cba": false}, {"provider_id": 20336285, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN LOUISIANA CO INC", "practicename": "WALGREEN LOUISIANA CO, INC", "practiceaddress1": "718 S CARROLLTON AVE", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701181010, "telephonenumber": 5048617864, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.94431, "longitude": -90.13321, "is_contracted_for_cba": false}, {"provider_id": 20341949, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09399", "practiceaddress1": "29412 AUBERRY RD", "practiceaddress2": null, "practicecity": "PRATHER", "practicestate": "CA", "practicezip9code": 936519719, "telephonenumber": 5598554220, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.00077, "longitude": -119.51904, "is_contracted_for_cba": false}, {"provider_id": 20341229, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09975", "practiceaddress1": "4400 COFFEE RD", "practiceaddress2": null, "practicecity": "BAKERSFIELD", "practicestate": "CA", "practicezip9code": 933085032, "telephonenumber": 6615881060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.39771, "longitude": -119.09211, "is_contracted_for_cba": false}, {"provider_id": 20333111, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #16362", "practiceaddress1": "2102 N PROSPECT AVE", "practiceaddress2": null, "practicecity": "CHAMPAIGN", "practicestate": "IL", "practicezip9code": 618221231, "telephonenumber": 2173553345, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.14102, "longitude": -88.25778, "is_contracted_for_cba": false}, {"provider_id": 20334317, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #10052", "practiceaddress1": "1515 SHERIDAN RD", "practiceaddress2": null, "practicecity": "WILMETTE", "practicestate": "IL", "practicezip9code": 600911822, "telephonenumber": 8472516223, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.0867, "longitude": -87.70001, "is_contracted_for_cba": false}, {"provider_id": 20333261, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #17068", "practiceaddress1": "355 W MOUND RD", "practiceaddress2": null, "practicecity": "DECATUR", "practicestate": "IL", "practicezip9code": 625261965, "telephonenumber": 2178756550, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.89109, "longitude": -88.95934, "is_contracted_for_cba": false}, {"provider_id": 20384435, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16292", "practiceaddress1": "99 HIGHWAY 37 W", "practiceaddress2": "STE 100", "practicecity": "TOMS RIVER", "practicestate": "NJ", "practicezip9code": 87556423, "telephonenumber": 7327368590, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.96143, "longitude": -74.21328, "is_contracted_for_cba": false}, {"provider_id": 20437715, "acceptsassignement": true, "participationbegindate": 1546300800000, "businessname": "GERMAN DOBSON CVS LLC", "practicename": "GERMAN DOBSON CVS LLC", "practiceaddress1": "995 S COTTON LN", "practiceaddress2": null, "practicecity": "GOODYEAR", "practicestate": "AZ", "practicezip9code": 853384604, "telephonenumber": 4806273276, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.43856, "longitude": -112.42671, "is_contracted_for_cba": false}, {"provider_id": 20325845, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARIZONA CVS STORES LLC", "practicename": "CVS PHARMACY #9343", "practiceaddress1": "506 MILLER VALLEY RD", "practiceaddress2": null, "practicecity": "PRESCOTT", "practicestate": "AZ", "practicezip9code": 863012314, "telephonenumber": 9284420312, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.54947, "longitude": -112.47862, "is_contracted_for_cba": false}, {"provider_id": 20334275, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "PHARMACY #16325", "practiceaddress1": "401 W IRVING PARK ROAD", "practiceaddress2": null, "practicecity": "WOOD DALE", "practicestate": "IL", "practicezip9code": 601911338, "telephonenumber": 6305945520, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.9658, "longitude": -87.9931, "is_contracted_for_cba": false}, {"provider_id": 20333051, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #17396", "practiceaddress1": "5601 BELLEVILLE CROSSING ST", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622263104, "telephonenumber": 6183101902, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.5238, "longitude": -90.03148, "is_contracted_for_cba": false}, {"provider_id": 20387609, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15446", "practiceaddress1": "118 W CONSTANCE RD", "practiceaddress2": null, "practicecity": "SUFFOLK", "practicestate": "VA", "practicezip9code": 234344411, "telephonenumber": 7575143451, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.73773, "longitude": -76.58296, "is_contracted_for_cba": false}, {"provider_id": 20384591, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS PHARMACY #16512", "practiceaddress1": "3462 JEROME AVE", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104671002, "telephonenumber": 7185470077, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.88234, "longitude": -73.88152, "is_contracted_for_cba": false}, {"provider_id": 20320979, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04655", "practiceaddress1": "401 S MAIN STREET", "practiceaddress2": null, "practicecity": "GRAHAM", "practicestate": "NC", "practicezip9code": 272533303, "telephonenumber": 3362299191, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.06261, "longitude": -79.40068, "is_contracted_for_cba": false}, {"provider_id": 20443901, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WAL-MART PHARMACY 10-4244", "practiceaddress1": "1303 CHARLES ST", "practiceaddress2": null, "practicecity": "PARK RAPIDS", "practicestate": "MN", "practicezip9code": 564701241, "telephonenumber": 2187320329, "specialitieslist": "Pharmacy|Optician", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 46.92625, "longitude": -95.04928, "is_contracted_for_cba": false}, {"provider_id": 20438237, "acceptsassignement": true, "participationbegindate": 1546300800000, "businessname": "GERMAN DOBSON CVS LLC", "practicename": "CVS PHARMACY #05029", "practiceaddress1": "9230 E BROADWAY RD", "practiceaddress2": null, "practicecity": "MESA", "practicestate": "AZ", "practicezip9code": 852082426, "telephonenumber": 4809863004, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.4097, "longitude": -111.63108, "is_contracted_for_cba": false}, {"provider_id": 20358449, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7374", "practiceaddress1": "4423 WESTERN AVE", "practiceaddress2": null, "practicecity": "KNOXVILLE", "practicestate": "TN", "practicezip9code": 379214306, "telephonenumber": 8659714234, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.97274, "longitude": -83.98742, "is_contracted_for_cba": false}, {"provider_id": 20384327, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13588", "practiceaddress1": "4201 HIGHWAY 71 E", "practiceaddress2": null, "practicecity": "BASTROP", "practicestate": "TX", "practicezip9code": 786027405, "telephonenumber": 5123081239, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.09142, "longitude": -97.28582, "is_contracted_for_cba": false}, {"provider_id": 20384639, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15391", "practiceaddress1": "34300 WOODWARD AVE", "practiceaddress2": null, "practicecity": "BIRMINGHAM", "practicestate": "MI", "practicezip9code": 480090919, "telephonenumber": 2485938450, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.54184, "longitude": -83.20834, "is_contracted_for_cba": false}, {"provider_id": 20388509, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15121", "practiceaddress1": "141 CARMICHAEL RD", "practiceaddress2": null, "practicecity": "HUDSON", "practicestate": "WI", "practicezip9code": 540167716, "telephonenumber": 7153810183, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.96737, "longitude": -92.72117, "is_contracted_for_cba": false}, {"provider_id": 20388329, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6703", "practiceaddress1": "16750 W 159TH ST", "practiceaddress2": null, "practicecity": "LOCKPORT", "practicestate": "IL", "practicezip9code": 604417968, "telephonenumber": 8158341351, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.59789, "longitude": -88.02561, "is_contracted_for_cba": false}, {"provider_id": 20388887, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS # 15022", "practiceaddress1": "1440 PINE GROVE RD", "practiceaddress2": null, "practicecity": "STEAMBOAT SPRINGS", "practicestate": "CO", "practicezip9code": 80487, "telephonenumber": 9708791968, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.46532, "longitude": -106.82596, "is_contracted_for_cba": false}, {"provider_id": 20314493, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17318", "practiceaddress1": "5270 S STATE HWY 360", "practiceaddress2": null, "practicecity": "GRAND PRAIRIE", "practicestate": "TX", "practicezip9code": 750528307, "telephonenumber": 4693482101, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.64473, "longitude": -97.0619, "is_contracted_for_cba": false}, {"provider_id": 20314517, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10631", "practiceaddress1": "3711 W DAVIS ST", "practiceaddress2": null, "practicecity": "CONROE", "practicestate": "TX", "practicezip9code": 773041835, "telephonenumber": 9365231613, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.325, "longitude": -95.49629, "is_contracted_for_cba": false}, {"provider_id": 20362769, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6715", "practiceaddress1": "1305 W UNIVERSITY BLVD", "practiceaddress2": null, "practicecity": "ODESSA", "practicestate": "TX", "practicezip9code": 797647121, "telephonenumber": 4325800166, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 31.86437, "longitude": -102.39867, "is_contracted_for_cba": false}, {"provider_id": 20319431, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 04335", "practiceaddress1": "1 MCWHIRT LOOP", "practiceaddress2": null, "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224061082, "telephonenumber": 5403712627, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.35408, "longitude": -77.51187, "is_contracted_for_cba": false}, {"provider_id": 20318675, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05750", "practiceaddress1": "1379 NORTH FREDERICK PIKE", "practiceaddress2": null, "practicecity": "WINCHESTER", "practicestate": "VA", "practicezip9code": 226038693, "telephonenumber": 5406629777, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.20786, "longitude": -78.17422, "is_contracted_for_cba": false}, {"provider_id": 20331815, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "EVERGREEN PROSTHETICS AND ORTHOTICS LLC", "practicename": "EVERGREEN PROSTHETICS & ORTHOTICS", "practiceaddress1": "2120 EXCHANGE ST", "practiceaddress2": "SUITE 204", "practicecity": "ASTORIA", "practicestate": "OR", "practicezip9code": 971033365, "telephonenumber": 8885745934, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 46.18863, "longitude": -123.81811, "is_contracted_for_cba": false}, {"provider_id": 20441375, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WALMART PHARMACY 10-3525", "practiceaddress1": "16502 MERIDIAN E", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983752515, "telephonenumber": 2534461754, "specialitieslist": "Pharmacy|Optician", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 47.10624, "longitude": -122.29355, "is_contracted_for_cba": false}, {"provider_id": 20441447, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WAL MART PHARMACY 10-3848", "practiceaddress1": "2228 W 1700 S", "practiceaddress2": null, "practicecity": "SYRACUSE", "practicestate": "UT", "practicezip9code": 840757126, "telephonenumber": 8017759880, "specialitieslist": "Pharmacy|Optician", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 41.08927, "longitude": -112.06961, "is_contracted_for_cba": false}, {"provider_id": 20443847, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WALMART PHARMACY 10-4336", "practiceaddress1": "12900 W THUNDERBIRD RD", "practiceaddress2": null, "practicecity": "EL MIRAGE", "practicestate": "AZ", "practicezip9code": 853355945, "telephonenumber": 6235838725, "specialitieslist": "Pharmacy|Optician", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 33.60914, "longitude": -112.33859, "is_contracted_for_cba": false}, {"provider_id": 20441549, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WAL MART PHARMACY 10-4249", "practiceaddress1": "583 COMMERCE DR", "practiceaddress2": null, "practicecity": "SMELTERVILLE", "practicestate": "ID", "practicezip9code": 83868, "telephonenumber": 2087832739, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 47.53709, "longitude": -116.19058, "is_contracted_for_cba": false}, {"provider_id": 20381633, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS", "practiceaddress1": "403 WILLIAM FLOYD PKWY", "practiceaddress2": null, "practicecity": "SHIRLEY", "practicestate": "NY", "practicezip9code": 119673473, "telephonenumber": 6313990700, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.78203, "longitude": -72.86449, "is_contracted_for_cba": false}, {"provider_id": 20385725, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15185", "practiceaddress1": "600 WASHINGTON BLVD S", "practiceaddress2": null, "practicecity": "LAUREL", "practicestate": "MD", "practicezip9code": 207074636, "telephonenumber": 3017250236, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.09944, "longitude": -76.84832, "is_contracted_for_cba": false}, {"provider_id": 20316899, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06741", "practiceaddress1": "910 W DAVIS ST", "practiceaddress2": null, "practicecity": "CONROE", "practicestate": "TX", "practicezip9code": 773012709, "telephonenumber": 9365391849, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.31369, "longitude": -95.46844, "is_contracted_for_cba": false}, {"provider_id": 20384039, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12576", "practiceaddress1": "15318 ROY ROGERS DR", "practiceaddress2": null, "practicecity": "VICTORVILLE", "practicestate": "CA", "practicezip9code": 923942160, "telephonenumber": 7609527555, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.52157, "longitude": -117.32716, "is_contracted_for_cba": false}, {"provider_id": 20384033, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11500", "practiceaddress1": "15990 ANNAPOLIS RD", "practiceaddress2": null, "practicecity": "BOWIE", "practicestate": "MD", "practicezip9code": 207153041, "telephonenumber": 3013522340, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.98217, "longitude": -76.72859, "is_contracted_for_cba": false}, {"provider_id": 20384207, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13456", "practiceaddress1": "1303 WEHRLI RD", "practiceaddress2": null, "practicecity": "NAPERVILLE", "practicestate": "IL", "practicezip9code": 605651752, "telephonenumber": 6304280496, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.74361, "longitude": -88.09262, "is_contracted_for_cba": false}, {"provider_id": 20388773, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7520", "practiceaddress1": "404 AVE BARBOSA ESQ SICILIA BO RIOS PIEDRAS", "practiceaddress2": null, "practicecity": "SAN JUAN", "practicestate": "PR", "practicezip9code": 917, "telephonenumber": 7879190270, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.41754, "longitude": -66.04912, "is_contracted_for_cba": false}, {"provider_id": 20388917, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS SPECIALTY PHARMACY #15312", "practiceaddress1": "901 S RANCHO DR", "practiceaddress2": "STE 20", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891063815, "telephonenumber": 7024717828, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.1609, "longitude": -115.17261, "is_contracted_for_cba": false}, {"provider_id": 20356115, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10682", "practiceaddress1": "109 N MARQUETTE RD", "practiceaddress2": null, "practicecity": "PRAIRIE DU CHIEN", "practicestate": "WI", "practicezip9code": 538211512, "telephonenumber": 6083260581, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.05038, "longitude": -91.14104, "is_contracted_for_cba": false}, {"provider_id": 20355485, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5521", "practiceaddress1": "12400 PEMBROKE RD", "practiceaddress2": null, "practicecity": "MIRAMAR", "practicestate": "FL", "practicezip9code": 330272505, "telephonenumber": 9544309510, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.99266, "longitude": -80.31272, "is_contracted_for_cba": false}], "stage_runningstate": "executed", "datacache": 0, "originalcount": 59566, "samplecount": 6019, "samplefile": "/FileStore/platform/sampleData/678abdf1bdb869a10b24512b/part-00000-df9f8a87-a225-43b8-9bee-ad4fb0750247-c000.csv", "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}, {"_id": "678abdf1bdb869a10b24512c", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/Medical-Equipment-Suppliers1.csv", "in": ["678abdf1bdb869a10b24512b"], "out": ["678abdf1bdb869a10b24512d"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "MedEquipmentSuppliers_AutoFE", "dataPercentage": "10", "comment": "", "pipeline_id": "678abdf1bdb869a10b245128", "sub_type": "Feature", "stage_type": "transformation", "stage_attributes": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10", "sampledata": [{"provider_id": 20330615, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01941", "practiceaddress1": "511 MONROE TPKE", "practiceaddress2": "UNIT B1", "practicecity": "MONROE", "practicestate": "CT", "practicezip9code": 64682386, "telephonenumber": 2032611185.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 130.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330495, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02210", "practiceaddress1": "1239 E PUTNAM AVE", "practiceaddress2": "UNIT B1", "practicecity": "RIVERSIDE", "practicestate": "CT", "practicezip9code": 68781522, "telephonenumber": 2036984006.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330507, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02220", "practiceaddress1": "3514 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "COVENTRY", "practicestate": "CT", "practicezip9code": 62381551, "telephonenumber": 17488951.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20319419, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02274", "practiceaddress1": "3141 WILSON BLVD", "practiceaddress2": "UNIT B1", "practicecity": "ARLINGTON", "practicestate": "VA", "practicezip9code": 222014419, "telephonenumber": -1554691957.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 336.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330513, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01156", "practiceaddress1": "1240 FARMINGTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "WEST HARTFORD", "practicestate": "CT", "practicezip9code": 61072618, "telephonenumber": 15285285.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330849, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01166", "practiceaddress1": "219 BROAD ST", "practiceaddress2": "UNIT B1", "practicecity": "WINDSOR", "practicestate": "CT", "practicezip9code": 60952904, "telephonenumber": 13051333.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330921, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01180", "practiceaddress1": "358 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "AVON", "practicestate": "CT", "practicezip9code": 60013643, "telephonenumber": 16854013.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330975, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01183", "practiceaddress1": "777 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "HARTFORD", "practicestate": "CT", "practicezip9code": 61032308, "telephonenumber": 12514832.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330969, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01202", "practiceaddress1": "20 BANK ST", "practiceaddress2": "UNIT B1", "practicecity": "GRANBY", "practicestate": "CT", "practicezip9code": 60352302, "telephonenumber": 16599629.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20330963, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01213", "practiceaddress1": "94 PARK ST", "practiceaddress2": "UNIT B1", "practicecity": "NEW CANAAN", "practicestate": "CT", "practicezip9code": 68405401, "telephonenumber": 2039666758.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330957, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01219", "practiceaddress1": "229 HOPE ST", "practiceaddress2": "UNIT B1", "practicecity": "STAMFORD", "practicestate": "CT", "practicezip9code": 69061601, "telephonenumber": 2039211313.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330951, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CONNECTICUT CVS PHARMACY LLC", "practiceaddress1": "734 BRIDGEPORT AVE", "practiceaddress2": "CVS PHARMACY #01241", "practicecity": "MILFORD", "practicestate": "CT", "practicezip9code": 64603169, "telephonenumber": 2038778127.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 19.0, "practicecity_stringindexer_transform": 286.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20317793, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01551", "practiceaddress1": "1341 LONG STREET", "practiceaddress2": "UNIT B1", "practicecity": "CHARLOTTESVILLE", "practicestate": "VA", "practicezip9code": 229014935, "telephonenumber": 47992860.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -78.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 321.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20319305, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02278", "practiceaddress1": "6400 LANSDOWNE CENTER", "practiceaddress2": "UNIT B1", "practicecity": "ALEXANDRIA", "practicestate": "VA", "practicezip9code": 223155003, "telephonenumber": -1554521032.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330945, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01242", "practiceaddress1": "714 HOPMEADOW ST", "practiceaddress2": "UNIT B1", "practicecity": "SIMSBURY", "practicestate": "CT", "practicezip9code": 60702234, "telephonenumber": 16576848.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330855, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00943", "practiceaddress1": "1200 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "WILLIMANTIC", "practicestate": "CT", "practicezip9code": 62261908, "telephonenumber": 14631339.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330477, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00785", "practiceaddress1": "632 MIDDLE TPKE", "practiceaddress2": "UNIT B1", "practicecity": "STORRS", "practicestate": "CT", "practicezip9code": 62681308, "telephonenumber": 14937442.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330909, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00954", "practiceaddress1": "311 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "TERRYVILLE", "practicestate": "CT", "practicezip9code": 67865928, "telephonenumber": 13208299.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20330843, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00916", "practiceaddress1": "26 DAVIS ST", "practiceaddress2": "UNIT B1", "practicecity": "OAKVILLE", "practicestate": "CT", "practicezip9code": 67791925, "telephonenumber": 19518798.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330903, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02109", "practiceaddress1": "22 WINDSOR AVE", "practiceaddress2": "UNIT B1", "practicecity": "VERNON ROCKVILLE", "practicestate": "CT", "practicezip9code": 60662439, "telephonenumber": 18772173.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330891, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02119", "practiceaddress1": "1055 FARMINGTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "KENSINGTON", "practicestate": "CT", "practicezip9code": 60372244, "telephonenumber": 18351992.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330885, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02140", "practiceaddress1": "526 MERIDEN RD", "practiceaddress2": "UNIT B1", "practicecity": "WATERBURY", "practicestate": "CT", "practicezip9code": 67052217, "telephonenumber": 2034657055.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330561, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CONNECTICUT CVS PHARMACY LLC", "practiceaddress1": "1968 BLACK ROCK TPKE", "practiceaddress2": "UNIT B1", "practicecity": "FAIRFIELD", "practicestate": "CT", "practicezip9code": 68253543, "telephonenumber": 2033668070.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20330621, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01897", "practiceaddress1": "6 QUEEN ST", "practiceaddress2": "UNIT B1", "practicecity": "NEWTOWN", "practicestate": "CT", "practicezip9code": 64702146, "telephonenumber": 2034262595.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330927, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01098", "practiceaddress1": "47 HAZARD AVE", "practiceaddress2": "UNIT B1", "practicecity": "ENFIELD", "practicestate": "CT", "practicezip9code": 60823813, "telephonenumber": 17476159.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330633, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00941", "practiceaddress1": "844 JONES HILL RD", "practiceaddress2": "UNIT B1", "practicecity": "WEST HAVEN", "practicestate": "CT", "practicezip9code": 65165643, "telephonenumber": 2039333603.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330471, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00775", "practiceaddress1": "2045 DIXWELL AVE", "practiceaddress2": "UNIT B1", "practicecity": "HAMDEN", "practicestate": "CT", "practicezip9code": 65142405, "telephonenumber": 2032870835.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330939, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01244", "practiceaddress1": "26 WATERBURY RD", "practiceaddress2": "UNIT B1", "practicecity": "PROSPECT", "practicestate": "CT", "practicezip9code": 67121215, "telephonenumber": 2037583316.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330465, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02573", "practiceaddress1": "1425 BARNUM AVE", "practiceaddress2": "UNIT B1", "practicecity": "STRATFORD", "practicestate": "CT", "practicezip9code": 66145404, "telephonenumber": 2033837741.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330459, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02388", "practiceaddress1": "2000 N MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "WATERBURY", "practicestate": "CT", "practicezip9code": 67042364, "telephonenumber": 2035913081.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330453, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02502", "practiceaddress1": "581 HIGHLAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "CHESHIRE", "practicestate": "CT", "practicezip9code": 64102205, "telephonenumber": 2032502251.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330447, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02525", "practiceaddress1": "323 CROMWELL AVE", "practiceaddress2": "UNIT B1", "practicecity": "ROCKY HILL", "practicestate": "CT", "practicezip9code": 60671801, "telephonenumber": 15704801.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330441, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02545", "practiceaddress1": "35 PADANARAM RD", "practiceaddress2": "UNIT B1", "practicecity": "DANBURY", "practicestate": "CT", "practicezip9code": 68113701, "telephonenumber": 2037304870.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330435, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02572", "practiceaddress1": "1 HAWLEY LN", "practiceaddress2": "UNIT B1", "practicecity": "STRATFORD", "practicestate": "CT", "practicezip9code": 66141200, "telephonenumber": 2033837735.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330429, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01898", "practiceaddress1": "225 SOUND BEACH AVE", "practiceaddress2": "UNIT B1", "practicecity": "OLD GREENWICH", "practicestate": "CT", "practicezip9code": 68701607, "telephonenumber": 2036981457.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330417, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01948", "practiceaddress1": "690 WETHERSFIELD AVE", "practiceaddress2": "UNIT B1", "practicecity": "HARTFORD", "practicestate": "CT", "practicezip9code": 61141930, "telephonenumber": 13026563.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330933, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CONNECTICUT CVS PHARMACY LLC", "practiceaddress1": "153 BROAD ST", "practiceaddress2": "CVS PHARMACY #06807", "practicecity": "MERIDEN", "practicestate": "CT", "practicezip9code": 64506550, "telephonenumber": 2032378997.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 28.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20320937, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07688", "practiceaddress1": "3440 WILKINSON BLVD", "practiceaddress2": "UNIT B1", "practicecity": "CHARLOTTE", "practicestate": "NC", "practicezip9code": 282085634, "telephonenumber": -1545980921.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 93.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20321159, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 10013", "practiceaddress1": "2981 S. MILITARY HWY", "practiceaddress2": "UNIT B1", "practicecity": "CHESAPEAKE", "practicestate": "VA", "practicezip9code": 233225810, "telephonenumber": -1014344762.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330639, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01280", "practiceaddress1": "99 GREENWICH AVE", "practiceaddress2": "UNIT B1", "practicecity": "GREENWICH", "practicestate": "CT", "practicezip9code": 68305511, "telephonenumber": 2038629320.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327141, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10130", "practiceaddress1": "110 MAIN STREET", "practiceaddress2": "UNIT B1", "practicecity": "HEBRON", "practicestate": "CT", "practicezip9code": 62481518, "telephonenumber": 12349296.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20330681, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CONNECTICUT CVS PHARMACY LLC", "practiceaddress1": "163 MOUNTAIN RD", "practiceaddress2": "UNIT B1", "practicecity": "SUFFIELD", "practicestate": "CT", "practicezip9code": 60782005, "telephonenumber": 16750523.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330675, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02056", "practiceaddress1": "25 BROADWAY AVE", "practiceaddress2": "UNIT B1", "practicecity": "MYSTIC", "practicestate": "CT", "practicezip9code": 63552834, "telephonenumber": 15431043.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -71.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330669, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02097", "practiceaddress1": "279 BOSTON POST RD", "practiceaddress2": "UNIT B1", "practicecity": "ORANGE", "practicestate": "CT", "practicezip9code": 64773558, "telephonenumber": 2037954704.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330663, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02099", "practiceaddress1": "479 BLUE HILLS AVE", "practiceaddress2": "UNIT B1", "practicecity": "HARTFORD", "practicestate": "CT", "practicezip9code": 61121514, "telephonenumber": 17762278.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20330657, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00918", "practiceaddress1": "964 POST RD", "practiceaddress2": "UNIT B1", "practicecity": "DARIEN", "practicestate": "CT", "practicezip9code": 68204508, "telephonenumber": 2036556335.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330651, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01268", "practiceaddress1": "106 BOSTON POST RD", "practiceaddress2": "UNIT B1", "practicecity": "WATERFORD", "practicestate": "CT", "practicezip9code": 63852426, "telephonenumber": 14496652.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20384939, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15790", "practiceaddress1": "191 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "ASHDOWN", "practicestate": "AR", "practicezip9code": 718222714, "telephonenumber": 119050559.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 23.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384759, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "900 N 6TH STREET", "practiceaddress2": "UNIT B1", "practicecity": "BLYTHEVILLE", "practicestate": "AR", "practicezip9code": 723151702, "telephonenumber": 117699915.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 23.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384765, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15703", "practiceaddress1": "300 E 8TH ST", "practiceaddress2": "UNIT B1", "practicecity": "DANVILLE", "practicestate": "AR", "practicezip9code": 728338800, "telephonenumber": 499988148.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 17.0, "practicestate_stringindexer_transform": 23.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384771, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15730", "practiceaddress1": "3222 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "JOPLIN", "practicestate": "MO", "practicezip9code": 648043824, "telephonenumber": -118720996.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384777, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10440", "practiceaddress1": "2703 ROUTE 130", "practiceaddress2": "UNIT B1", "practicecity": "NORTH BRUNSWICK", "practicestate": "NJ", "practicezip9code": 89024721, "telephonenumber": -1261723299.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.0, "longitude": -74.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 11.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384789, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGRENS #12756", "practiceaddress1": "2025 FIRST AVENUE SE", "practiceaddress2": "UNIT B1", "practicecity": "MOULTRIE", "practicestate": "GA", "practicezip9code": 31788, "telephonenumber": -1996064520.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 31.0, "longitude": -83.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 15.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385095, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15811", "practiceaddress1": "5046 S SHERIDAN RD", "practiceaddress2": "UNIT B1", "practicecity": "TULSA", "practicestate": "OK", "practicezip9code": 741455714, "telephonenumber": 596341872.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385083, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15809", "practiceaddress1": "4016 S STATE HIGHWAY 97", "practiceaddress2": "UNIT B1", "practicecity": "SAND SPRINGS", "practicestate": "OK", "practicezip9code": 740636673, "telephonenumber": 592522069.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -96.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384993, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15763", "practiceaddress1": "591 S MILL ST", "practiceaddress2": "UNIT B1", "practicecity": "PRYOR", "practicestate": "OK", "practicezip9code": 743616015, "telephonenumber": 598320711.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385005, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15239", "practiceaddress1": "27 S COAST HWY", "practiceaddress2": "UNIT B1", "practicecity": "NEWPORT", "practicestate": "OR", "practicezip9code": 973653831, "telephonenumber": 1120777109.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.0, "longitude": -124.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384855, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15199", "practiceaddress1": "5518 MAGAZINE ST", "practiceaddress2": "UNIT B1", "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701153152, "telephonenumber": 754022738.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 320.0, "practicestate_stringindexer_transform": 26.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385119, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "AVA DRUG #15726 BY WALGREENS", "practiceaddress1": "124 W WASHINGTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "AVA", "practicestate": "MO", "practicezip9code": 656086504, "telephonenumber": -118133169.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384861, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15789", "practiceaddress1": "701 W GROVE ST", "practiceaddress2": "UNIT B1", "practicecity": "EL DORADO", "practicestate": "AR", "practicezip9code": 717304415, "telephonenumber": 118883842.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 23.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384867, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "ELLISVILLE DRUG #15828 BY WALGREENS", "practiceaddress1": "915 HILL ST", "practiceaddress2": "UNIT B1", "practicecity": "ELLISVILLE", "practicestate": "MS", "practicezip9code": 394372419, "telephonenumber": 1719806277.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 31.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384873, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "220 N ALEXANDER AVE", "practiceaddress2": "UNIT B1", "practicecity": "PORT ALLEN", "practicestate": "LA", "practicezip9code": 707672514, "telephonenumber": -2041146631.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -91.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 26.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384879, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #21379", "practiceaddress1": "5905 DOLLARWAY RD", "practiceaddress2": "UNIT B1", "practicecity": "PINE BLUFF", "practicestate": "AR", "practicezip9code": 716023825, "telephonenumber": 115413276.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 23.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384927, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15164", "practiceaddress1": "2611 E OAKLAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "BLOOMINGTON", "practicestate": "IL", "practicezip9code": 617015839, "telephonenumber": -1198328952.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 120.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384891, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "CARTHAGE DISCOUNT DRUG #15737", "practiceaddress1": "602 HIGHWAY 16 E", "practiceaddress2": "UNIT B1", "practicecity": "CARTHAGE", "practicestate": "MS", "practicezip9code": 390514212, "telephonenumber": 1717707237.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 252.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384909, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "12352 FM 1957", "practiceaddress2": "UNIT B1", "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 782539273, "telephonenumber": 2106790130.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.0, "longitude": -98.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 25.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384921, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "MANSFIELD DRUG #15731 BY WALGREENS", "practiceaddress1": "101 N BUSINESS 60", "practiceaddress2": "UNIT B1", "practicecity": "MANSFIELD", "practicestate": "MO", "practicezip9code": 657047101, "telephonenumber": -115718419.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 218.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384915, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "214 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "SEYMOUR", "practicestate": "MO", "practicezip9code": 657468748, "telephonenumber": -115612396.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385071, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "304 E MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "LINN", "practicestate": "MO", "practicezip9code": 650519000, "telephonenumber": 1444006844.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -91.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385065, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6 E SPRINGFIELD RD", "practiceaddress2": "UNIT B1", "practicecity": "SULLIVAN", "practicestate": "MO", "practicezip9code": 630801310, "telephonenumber": 1439719168.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -91.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20413895, "acceptsassignement": 1, "participationbegindate": 1590019200000, "businessname": "BEE'S MEDICAL EQUIPMENT & SUPPLIES LLC", "practicename": "BEE'S MEDICAL EQUIPMENT & SUPPLIES", "practiceaddress1": "1219 E BUSTAMANTE ST", "practiceaddress2": "STE E", "practicecity": "LAREDO", "practicestate": "TX", "practicezip9code": 780415208, "telephonenumber": 976318319.0, "specialitieslist": "Medical Supply Company Other", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27.0, "longitude": -99.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 21, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 4.0, "practicecity_stringindexer_transform": 273.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 3.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 33.0}, {"provider_id": 20413919, "acceptsassignement": 1, "participationbegindate": 1589932800000, "businessname": "GOODRICH PHARMACY INC", "practicename": "GOODRICH PHARMACY LTC", "practiceaddress1": "2321 7TH AVE", "practiceaddress2": "UNIT B1", "practicecity": "ANOKA", "practicestate": "MN", "practicezip9code": 553031710, "telephonenumber": -956985017.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Nebulizer Equipment and/or Supplies", "latitude": 45.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 17.0}, {"provider_id": 20413937, "acceptsassignement": 1, "participationbegindate": 1589932800000, "businessname": "CREST RX LLC", "practicename": "CREST RX LLC", "practiceaddress1": "10601 S MAY AVE", "practiceaddress2": "STE 11", "practicecity": "OKLAHOMA CITY", "practicestate": "OK", "practicezip9code": 731702501, "telephonenumber": -241180125.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 35.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 18.0, "practicecity_stringindexer_transform": 140.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 45.0}, {"provider_id": 20413943, "acceptsassignement": 1, "participationbegindate": 1589932800000, "businessname": "SOUTHEASTERN PHARMACY LLC", "practicename": "ALTAMA PHARMACY", "practiceaddress1": "5711 ALTAMA AVE", "practiceaddress2": "STE G", "practicecity": "BRUNSWICK", "practicestate": "GA", "practicezip9code": 315252200, "telephonenumber": 532708030.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 31.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 26.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 15.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 12.0}, {"provider_id": 20413949, "acceptsassignement": 1, "participationbegindate": 1589932800000, "businessname": "GOODRICH PHARMACY INC", "practicename": "GOODRICH PHARMACY ST FRANCIS", "practiceaddress1": "23122 SAINT FRANCIS BLVD", "practiceaddress2": "UNIT B1", "practicecity": "SAINT FRANCIS", "practicestate": "MN", "practicezip9code": 550709807, "telephonenumber": -952404370.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "latitude": 45.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 48.0}, {"provider_id": 20413913, "acceptsassignement": 1, "participationbegindate": 1589932800000, "businessname": "GOODRICH PHARMACY INC", "practicename": "GOODRICH PHARMACY", "practiceaddress1": "15245 BLUEBIRD ST NW", "practiceaddress2": "STE B", "practicecity": "ANDOVER", "practicestate": "MN", "practicezip9code": 553043539, "telephonenumber": -955592691.0, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Wheelchairs (Standard Manual)|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 1.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 4.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 39.0}, {"provider_id": 20413925, "acceptsassignement": 1, "participationbegindate": 1589932800000, "businessname": "GOODRICH PHARMACY INC", "practicename": "GOODRICH PHARMACY", "practiceaddress1": "530 3RD ST NW", "practiceaddress2": "UNIT B1", "practicecity": "ELK RIVER", "practicestate": "MN", "practicezip9code": 553301445, "telephonenumber": -955523828.0, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Surgical Dressings", "latitude": 45.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 4.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 25.0}, {"provider_id": 34356944, "acceptsassignement": 0, "participationbegindate": 1589932800000, "businessname": "ADVANCED HEALTHCARE SOLUTIONS LLC", "practicename": "ADVANCED HEALTHCARE SOLUTIONS LLC", "practiceaddress1": "100 ASMA BLVD", "practiceaddress2": "STE 203-E", "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 70508, "telephonenumber": -919618990.0, "specialitieslist": "Medical Supply Company Other", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 20.0, "practicecity_stringindexer_transform": 210.0, "practicestate_stringindexer_transform": 26.0, "specialitieslist_stringindexer_transform": 3.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 34.0}, {"provider_id": 20413955, "acceptsassignement": 1, "participationbegindate": 1589932800000, "businessname": "GOODRICH PHARMACY INC", "practicename": "GOODRICH PHARMACY ANOKA", "practiceaddress1": "2621 GREENHAVEN RD", "practiceaddress2": "UNIT B1", "practicecity": "ANOKA", "practicestate": "MN", "practicezip9code": 553035566, "telephonenumber": -955719052.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 45.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 14.0}, {"provider_id": 20413979, "acceptsassignement": 1, "participationbegindate": 1589846400000, "businessname": "CPAP EXPERTS LLC", "practicename": "CPAP EXPERTS LLC", "practiceaddress1": "820 BAY AVE", "practiceaddress2": "STE 203A", "practicecity": "CAPITOLA", "practicestate": "CA", "practicezip9code": 950102100, "telephonenumber": -274777560.0, "specialitieslist": "MSC With Respiratory Therapist", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Continuous Positive Airway Pressure (CPAP) Devices|Respiratory Assist Devices", "latitude": 36.0, "longitude": -121.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 19, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 22.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 12.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 32.0}, {"provider_id": 20413967, "acceptsassignement": 1, "participationbegindate": 1589846400000, "businessname": "OSO ORTHOTICS & PROSTHETICS LLC", "practicename": "OSO ORTHOTICS & PROSTHETICS", "practiceaddress1": "11983 TAMIAMI TRL N", "practiceaddress2": "STE 100C", "practicecity": "NAPLES", "practicestate": "FL", "practicezip9code": 341101603, "telephonenumber": -1897299356.0, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 26.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 19, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 11.0, "practicecity_stringindexer_transform": 219.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 5.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 40.0}, {"provider_id": 20413961, "acceptsassignement": 1, "participationbegindate": 1589846400000, "businessname": "MED-SAVE LLC", "practicename": "MED-SAVE BEREA", "practiceaddress1": "102 PRINCE ROYAL DR", "practiceaddress2": "STE 2", "practicecity": "BEREA", "practicestate": "KY", "practicezip9code": 404031468, "telephonenumber": 9922691.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 37.0, "longitude": -84.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 19, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 3.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 22.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 24.0}, {"provider_id": 34356950, "acceptsassignement": 1, "participationbegindate": 1589760000000, "businessname": "A PLUS DURABLE MEDICAL EQUIPMENTS LLC", "practicename": "A+ MEDICAL SUPPLIES", "practiceaddress1": "433 W ALLEN AVE", "practiceaddress2": "STE 116", "practicecity": "SAN DIMAS", "practicestate": "CA", "practicezip9code": 917734725, "telephonenumber": 1329524904.0, "specialitieslist": "Medical Supply Company Other", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings", "latitude": 34.0, "longitude": -117.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 18, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 23.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 3.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 18.0}, {"provider_id": 20413991, "acceptsassignement": 1, "participationbegindate": 1589587200000, "businessname": "GUY PARK PHARMACY LLC", "practicename": "GUY PARK PHARMACY LLC", "practiceaddress1": "151 GUY PARK AVE", "practiceaddress2": "UNIT B1", "practicecity": "AMSTERDAM", "practicestate": "NY", "practicezip9code": 120103229, "telephonenumber": 887158724.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 42.0, "longitude": -74.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 16, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20413997, "acceptsassignement": 1, "participationbegindate": 1589500800000, "businessname": "CURANT HEALTH FLORIDA LLC", "practicename": "CURANT HEALTH FLORIDA, LLC", "practiceaddress1": "11001 ROOSEVELT BLVD N", "practiceaddress2": "STE 1400", "practicecity": "ST PETERSBURG", "practicestate": "FL", "practicezip9code": 337162338, "telephonenumber": -1800117418.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 27.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 17.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 46.0}, {"provider_id": 20414003, "acceptsassignement": 0, "participationbegindate": 1589500800000, "businessname": "PREMIER PHARMACY & WELLNESS INC", "practicename": "PREMIER PHARMACY & WELLNESS", "practiceaddress1": "516 BECKLEY CROSSING SHPG CTR", "practiceaddress2": "UNIT B1", "practicecity": "BECKLEY", "practicestate": "WV", "practicezip9code": 258017110, "telephonenumber": -1777856082.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 37.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20414015, "acceptsassignement": 1, "participationbegindate": 1589500800000, "businessname": "IDABEL EXPRESS PHARMACY LLC", "practicename": "IDABEL EXPRESS PHARMACY", "practiceaddress1": "810 SE WASHINGTON ST", "practiceaddress2": "UNIT B1", "practicecity": "IDABEL", "practicestate": "OK", "practicezip9code": 747453332, "telephonenumber": 1507488873.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "latitude": 33.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 20.0}, {"provider_id": 20330645, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01276", "practiceaddress1": "81 NORTH ST", "practiceaddress2": "UNIT B1", "practicecity": "BRISTOL", "practicestate": "CT", "practicezip9code": 60104152, "telephonenumber": 15914406.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327105, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 05703", "practiceaddress1": "60 MIDDLE ST", "practiceaddress2": "UNIT B1", "practicecity": "BRISTOL", "practicestate": "CT", "practicezip9code": 60105201, "telephonenumber": 15915530.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20330879, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMAACY #02143", "practiceaddress1": "3710 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "BRIDGEPORT", "practicestate": "CT", "practicezip9code": 66063613, "telephonenumber": 2033711280.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330489, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CONNECTICUT CVS PHARMACY LLC", "practiceaddress1": "40 EAST ST", "practiceaddress2": "UNIT B1", "practicecity": "NEW MILFORD", "practicestate": "CT", "practicezip9code": 67763014, "telephonenumber": 13609863.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330861, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01153", "practiceaddress1": "1875 BOSTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "BRIDGEPORT", "practicestate": "CT", "practicezip9code": 66102623, "telephonenumber": 2033308278.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327009, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01089", "practiceaddress1": "20 BURNSIDE AVE", "practiceaddress2": "UNIT B1", "practicecity": "EAST HARTFORD", "practicestate": "CT", "practicezip9code": 61083403, "telephonenumber": 12967499.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326919, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00953", "practiceaddress1": "45 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "UNIONVILLE", "practicestate": "CT", "practicezip9code": 60851278, "telephonenumber": 16824618.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326907, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04436", "practiceaddress1": "241 MIDDLE TPKE W", "practiceaddress2": "UNIT B1", "practicecity": "MANCHESTER", "practicestate": "CT", "practicezip9code": 60403834, "telephonenumber": 15396564.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 107.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326901, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04473", "practiceaddress1": "15 CHESTERFIELD RD", "practiceaddress2": "UNIT B1", "practicecity": "EAST LYME", "practicestate": "CT", "practicezip9code": 63331730, "telephonenumber": 11995684.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20326895, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CONNECTICUT CVS PHARMACY LLC", "practiceaddress1": "57 PROVIDENCE PIKE", "practiceaddress2": "UNIT B1", "practicecity": "PUTNAM", "practicestate": "CT", "practicezip9code": 62602413, "telephonenumber": 19697956.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -71.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327021, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03719", "practiceaddress1": "11 FOREST ST", "practiceaddress2": "UNIT B1", "practicecity": "STAMFORD", "practicestate": "CT", "practicezip9code": 69011877, "telephonenumber": 2033630627.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327027, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00343", "practiceaddress1": "66 HIGH RIDGE RD", "practiceaddress2": "UNIT B1", "practicecity": "STAMFORD", "practicestate": "CT", "practicezip9code": 69053807, "telephonenumber": 2035413972.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20385059, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15821", "practiceaddress1": "903 BENHAM ST", "practiceaddress2": "UNIT B1", "practicecity": "BONNE TERRE", "practicestate": "MO", "practicezip9code": 636281305, "telephonenumber": 1438616015.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384843, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15150", "practiceaddress1": "2251 COMMERCE BLVD", "practiceaddress2": "UNIT B1", "practicecity": "MOUND", "practicestate": "MN", "practicezip9code": 553641546, "telephonenumber": 934788337.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385053, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15822", "practiceaddress1": "1142 N DESLOGE DR", "practiceaddress2": "UNIT B1", "practicecity": "DESLOGE", "practicestate": "MO", "practicezip9code": 636012937, "telephonenumber": 1439344946.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385041, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15816", "practiceaddress1": "2401 N CENTRAL AVE", "practiceaddress2": "UNIT B1", "practicecity": "HUMBOLDT", "practicestate": "TN", "practicezip9code": 383431753, "telephonenumber": -1272091979.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 28.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384609, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13869", "practiceaddress1": "PR #14 KM 51.5", "practiceaddress2": "BO PUEBLO SEC PUEBLO NORTE", "practicecity": "AIBONITO", "practicestate": "PR", "practicezip9code": 705, "telephonenumber": -710017237.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.0, "longitude": -66.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 15.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 29.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385035, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13892", "practiceaddress1": "17703 VIRGINIA AVE", "practiceaddress2": "UNIT B1", "practicecity": "HAGERSTOWN", "practicestate": "MD", "practicezip9code": 217407850, "telephonenumber": -1890761986.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 12.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385029, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15390", "practiceaddress1": "24 SCHOOL ST.", "practiceaddress2": "UNIT B1", "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21085113, "telephonenumber": 1878760860.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -71.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 2.0, "practicestate_stringindexer_transform": 0.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385023, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "605 N MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "IRONTON", "practicestate": "MO", "practicezip9code": 636501006, "telephonenumber": 1440500619.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385011, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15785", "practiceaddress1": "6068 S 1ST ST", "practiceaddress2": "UNIT B1", "practicecity": "MILAN", "practicestate": "TN", "practicezip9code": 383583131, "telephonenumber": -1273073035.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 28.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385101, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15506", "practiceaddress1": "3303 W 26TH ST STE 101", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606234036, "telephonenumber": -854722874.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 0.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385077, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15344", "practiceaddress1": "11500 W BROAD ST", "practiceaddress2": "UNIT B1", "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232331117, "telephonenumber": -546332061.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 37.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384831, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15116", "practiceaddress1": "5580 GEORGETOWN RD", "practiceaddress2": "UNIT B1", "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462543710, "telephonenumber": -1121995519.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 16.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385377, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12087", "practiceaddress1": "13723 N LITCHFIELD RD", "practiceaddress2": "UNIT B1", "practicecity": "SURPRISE", "practicestate": "AZ", "practicezip9code": 853794268, "telephonenumber": 1937585912.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -112.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 31.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383505, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "871 W OAKLAND PARK BLVD", "practiceaddress2": "STE 100", "practicecity": "WILTON MANORS", "practicestate": "FL", "practicezip9code": 33311, "telephonenumber": 952397529.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 7.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383499, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS # 11291", "practiceaddress1": "11 ASHFORD AVE", "practiceaddress2": "UNIT B1", "practicecity": "DOBBS FERRY", "practicestate": "NY", "practicezip9code": 105221822, "telephonenumber": 554845765.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383493, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15812", "practiceaddress1": "6505 E 71ST ST", "practiceaddress2": "UNIT B1", "practicecity": "TULSA", "practicestate": "OK", "practicezip9code": 741332755, "telephonenumber": 594989058.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383487, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15810", "practiceaddress1": "950 E TAFT AVE", "practiceaddress2": "UNIT B1", "practicecity": "SAPULPA", "practicestate": "OK", "practicezip9code": 740665729, "telephonenumber": 592342608.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -96.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383223, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "MURPHY DRUG #15804 BY WALGREENS", "practiceaddress1": "1357 VETERANS MEMORIAL BLVD", "practiceaddress2": "UNIT B1", "practicecity": "EUPORA", "practicestate": "MS", "practicezip9code": 397442064, "telephonenumber": -1967351961.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383235, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10461", "practiceaddress1": "901 SW STATE ROUTE 150", "practiceaddress2": "UNIT B1", "practicecity": "LEES SUMMIT", "practicestate": "MO", "practicezip9code": 640824410, "telephonenumber": -423701453.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385395, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "4500 OLD PASS RD", "practiceaddress2": "UNIT B1", "practicecity": "GULFPORT", "practicestate": "MS", "practicezip9code": 395012585, "telephonenumber": -2011448235.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383151, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11951", "practiceaddress1": "11085 CATHELL RD", "practiceaddress2": "UNIT B1", "practicecity": "BERLIN", "practicestate": "MD", "practicezip9code": 218119301, "telephonenumber": -192883485.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -75.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 12.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385389, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15212", "practiceaddress1": "411 KING ST", "practiceaddress2": "UNIT B1", "practicecity": "CHAPPAQUA", "practicestate": "NY", "practicezip9code": 105143543, "telephonenumber": 558684538.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385383, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13927", "practiceaddress1": "3375 RINCONADA BLVD", "practiceaddress2": "UNIT B1", "practicecity": "LAS CRUCES", "practicestate": "NM", "practicezip9code": 880117193, "telephonenumber": 1458861804.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.0, "longitude": -106.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 14.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20330867, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01152", "practiceaddress1": "58 PENNSYLVANIA AVE", "practiceaddress2": "UNIT B1", "practicecity": "NIANTIC", "practicestate": "CT", "practicezip9code": 63573230, "telephonenumber": 16975788.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330531, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01148", "practiceaddress1": "905 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "CHESHIRE", "practicestate": "CT", "practicezip9code": 64103418, "telephonenumber": 2032723255.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330525, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01097", "practiceaddress1": "661 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "TORRINGTON", "practicestate": "CT", "practicezip9code": 67903602, "telephonenumber": 14893706.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330627, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02018", "practiceaddress1": "540 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "MERIDEN", "practicestate": "CT", "practicezip9code": 64512710, "telephonenumber": 2032378984.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330555, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01968", "practiceaddress1": "369 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "EAST HAVEN", "practicestate": "CT", "practicezip9code": 65122835, "telephonenumber": 2034686594.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327033, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02151", "practiceaddress1": "330 GRASMERE AVE", "practiceaddress2": "UNIT B1", "practicecity": "FAIRFIELD", "practicestate": "CT", "practicezip9code": 68246102, "telephonenumber": 2032550060.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20327189, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10605", "practiceaddress1": "37 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "STAFFORD SPRINGS", "practicestate": "CT", "practicezip9code": 60761459, "telephonenumber": 16905423.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20327129, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00556", "practiceaddress1": "1657 ROUTE 12", "practiceaddress2": "UNIT B1", "practicecity": "GALES FERRY", "practicestate": "CT", "practicezip9code": 63351533, "telephonenumber": 14705696.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 21.0}, {"provider_id": 20327123, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 02253", "practiceaddress1": "111 ALBANY TPKE", "practiceaddress2": "UNIT B1", "practicecity": "CANTON", "practicestate": "CT", "practicezip9code": 60192507, "telephonenumber": 17003485.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20326913, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05263", "practiceaddress1": "150 WASHINGTON STREET", "practiceaddress2": "UNIT B1", "practicecity": "HARTFORD", "practicestate": "CT", "practicezip9code": 61064405, "telephonenumber": 16017158.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20327165, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 10367", "practiceaddress1": "965 WHITE PLAINS RD", "practiceaddress2": "UNIT B1", "practicecity": "TRUMBULL", "practicestate": "CT", "practicezip9code": 66114502, "telephonenumber": 2032612541.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20327411, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 07856", "practiceaddress1": "281 CONNECTICUT AVE", "practiceaddress2": "UNIT B1", "practicecity": "NORWALK", "practicestate": "CT", "practicezip9code": 68541938, "telephonenumber": 2032995486.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20385371, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16152", "practiceaddress1": "710 FAYETTEVILLE ST", "practiceaddress2": "UNIT B1", "practicecity": "DURHAM", "practicestate": "NC", "practicezip9code": 277013911, "telephonenumber": 605374182.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -78.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384807, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13790", "practiceaddress1": "14095 RICHMOND HWY", "practiceaddress2": "UNIT B1", "practicecity": "WOODBRIDGE", "practicestate": "VA", "practicezip9code": 221912169, "telephonenumber": -1555020962.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385365, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15614", "practiceaddress1": "3140 HWY 280", "practiceaddress2": "UNIT B1", "practicecity": "ALEXANDER CITY", "practicestate": "AL", "practicezip9code": 350104414, "telephonenumber": -1731669072.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 20.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384747, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16158", "practiceaddress1": "206 US HIGHWAY 117 S", "practiceaddress2": "UNIT B1", "practicecity": "BURGAW", "practicestate": "NC", "practicezip9code": 284257799, "telephonenumber": 512657922.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384339, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15434", "practiceaddress1": "3555 COLORADO BLVD", "practiceaddress2": "UNIT B1", "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 802053813, "telephonenumber": -1261759449.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.0, "longitude": -104.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 167.0, "practicestate_stringindexer_transform": 7.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383145, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16137", "practiceaddress1": "1812 HOLLOWAY STREET", "practiceaddress2": "UNIT B1", "practicecity": "DURHAM", "practicestate": "NC", "practicezip9code": 277032210, "telephonenumber": 606894954.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -78.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384333, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16129", "practiceaddress1": "407 W MAIN STREET", "practiceaddress2": "UNIT B1", "practicecity": "JAMESTOWN", "practicestate": "NC", "practicezip9code": 272829558, "telephonenumber": -930424195.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -79.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383325, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16102", "practiceaddress1": "1124 PATTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "ASHEVILLE", "practicestate": "NC", "practicezip9code": 288062706, "telephonenumber": -307573073.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383319, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16133", "practiceaddress1": "454 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "SPARTA", "practicestate": "NC", "practicezip9code": 286759606, "telephonenumber": -931245195.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383313, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16154", "practiceaddress1": "140 NC 102 W", "practiceaddress2": "UNIT B1", "practicecity": "AYDEN", "practicestate": "NC", "practicezip9code": 285138792, "telephonenumber": -1767504270.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383307, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11367", "practiceaddress1": "28895 W IL RTE 120", "practiceaddress2": "UNIT B1", "practicecity": "LAKEMOOR", "practicestate": "IL", "practicezip9code": 600517258, "telephonenumber": -434145246.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383301, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16123", "practiceaddress1": "101 E ATKINS ST", "practiceaddress2": "UNIT B1", "practicecity": "DOBSON", "practicestate": "NC", "practicezip9code": 270178700, "telephonenumber": -931103128.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383511, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11267", "practiceaddress1": "244 E 161ST ST", "practiceaddress2": "UNIT B1", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104513555, "telephonenumber": -1405828642.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 3.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383517, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "4021 CROSS TIMBERS ROAD", "practiceaddress2": "UNIT B1", "practicecity": "FLOWER MOUND", "practicestate": "TX", "practicezip9code": 750283001, "telephonenumber": 1133623750.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383523, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15274", "practiceaddress1": "1645 CRANIUM DR", "practiceaddress2": "UNIT B1", "practicecity": "ROCK HILL", "practicestate": "SC", "practicezip9code": 297323509, "telephonenumber": -556681800.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 163.0, "practicestate_stringindexer_transform": 27.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383529, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15250", "practiceaddress1": "1606 HIGHLAND COLONY PKWY", "practiceaddress2": "UNIT B1", "practicecity": "MADISON", "practicestate": "MS", "practicezip9code": 391106917, "telephonenumber": 1721088632.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 198.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384813, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15381", "practiceaddress1": "1921 S 77 SUNSHINE STRIP", "practiceaddress2": "UNIT B1", "practicecity": "HARLINGEN", "practicestate": "TX", "practicezip9code": 785508272, "telephonenumber": 973718443.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384897, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10670", "practiceaddress1": "17970 N TAMIAMI TRL", "practiceaddress2": "UNIT B1", "practicecity": "NORTH FORT MYERS", "practicestate": "FL", "practicezip9code": 339031412, "telephonenumber": -1898974291.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385665, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15189", "practiceaddress1": "40 FLOWING SPRINGS WAY", "practiceaddress2": "UNIT B1", "practicecity": "CHARLES TOWN", "practicestate": "WV", "practicezip9code": 254146041, "telephonenumber": -1247727294.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384741, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15432", "practiceaddress1": "2590 N TEXAS ST", "practiceaddress2": "UNIT B1", "practicecity": "FAIRFIELD", "practicestate": "CA", "practicezip9code": 945331606, "telephonenumber": -1515935263.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -122.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385653, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15501", "practiceaddress1": "1086 JEFF RD NW", "practiceaddress2": "UNIT B1", "practicecity": "HUNTSVILLE", "practicestate": "AL", "practicezip9code": 358061048, "telephonenumber": -1727754545.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 338.0, "practicestate_stringindexer_transform": 20.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20385569, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12441", "practiceaddress1": "81 US HIGHWAY 9", "practiceaddress2": "UNIT B1", "practicecity": "ENGLISHTOWN", "practicestate": "NJ", "practicezip9code": 77268417, "telephonenumber": -1260213568.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.0, "longitude": -74.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 11.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383217, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15507", "practiceaddress1": "3800 W MADISON ST STE 101", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606242312, "telephonenumber": -851672775.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 0.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359631, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "7403 ALOMA AVE", "practiceaddress2": "WALGREENS #5495", "practicecity": "WINTER PARK", "practicestate": "FL", "practicezip9code": 327929101, "telephonenumber": -218188707.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 24.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359559, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12108", "practiceaddress1": "2719 GRAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "AMES", "practicestate": "IA", "practicezip9code": 500104659, "telephonenumber": 857360988.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359721, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15332", "practiceaddress1": "4720 S KIRKMAN RD", "practiceaddress2": "UNIT B1", "practicecity": "ORLANDO", "practicestate": "FL", "practicezip9code": 328113643, "telephonenumber": -222028838.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360135, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6727", "practiceaddress1": "4720 N MARINE DR", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606405120, "telephonenumber": -852243277.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 0.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359715, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5356", "practiceaddress1": "4710 S WESTERN AVE", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606094060, "telephonenumber": -854144226.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 0.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20358317, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4279", "practiceaddress1": "1800 W INDIANTOWN RD", "practiceaddress2": "UNIT B1", "practicecity": "JUPITER", "practicestate": "FL", "practicezip9code": 334583900, "telephonenumber": 1322479526.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391287, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04156", "practiceaddress1": "12405 NE 85TH ST", "practiceaddress2": "UNIT B1", "practicecity": "KIRKLAND", "practicestate": "WA", "practicezip9code": 980338032, "telephonenumber": -36738094.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 47.0, "longitude": -122.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 21.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360057, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4458", "practiceaddress1": "3601 W WILLIAM CANNON DR", "practiceaddress2": "UNIT B1", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787491533, "telephonenumber": 833953634.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 9.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359619, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13850", "practiceaddress1": "3200 E BAY DR", "practiceaddress2": "UNIT B1", "practicecity": "HOLMES BEACH", "practicestate": "FL", "practicezip9code": 342172031, "telephonenumber": 827845859.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359517, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6510", "practiceaddress1": "19710 HOLZWARTH RD", "practiceaddress2": "UNIT B1", "practicecity": "SPRING", "practicestate": "TX", "practicezip9code": 773886215, "telephonenumber": -1481465796.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359511, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7413", "practiceaddress1": "19302 KUYKENDAHL RD", "practiceaddress2": "UNIT B1", "practicecity": "SPRING", "practicestate": "TX", "practicezip9code": 773793404, "telephonenumber": -1481428675.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359505, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4962", "practiceaddress1": "128 E BRANDON BLVD", "practiceaddress2": "UNIT B1", "practicecity": "BRANDON", "practicestate": "FL", "practicezip9code": 335115219, "telephonenumber": -453040093.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20358929, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4379", "practiceaddress1": "4320 26TH ST W", "practiceaddress2": "UNIT B1", "practicecity": "BRADENTON", "practicestate": "FL", "practicezip9code": 342053563, "telephonenumber": 827624004.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20358935, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3963", "practiceaddress1": "6003 14TH ST W", "practiceaddress2": "UNIT B1", "practicecity": "BRADENTON", "practicestate": "FL", "practicezip9code": 342074105, "telephonenumber": 827623934.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20358947, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11918", "practiceaddress1": "11000 VENTURA BLVD", "practiceaddress2": "UNIT B1", "practicecity": "STUDIO CITY", "practicestate": "CA", "practicezip9code": 916043546, "telephonenumber": -402318029.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0, "longitude": -118.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360099, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06861", "practiceaddress1": "9307 N LAMAR BLVD", "practiceaddress2": "UNIT B1", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787534103, "telephonenumber": 828431370.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 9.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360165, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12529", "practiceaddress1": "305 N BREED ST", "practiceaddress2": "UNIT B1", "practicecity": "LOS ANGELES", "practicestate": "CA", "practicezip9code": 90033, "telephonenumber": -1062326949.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0, "longitude": -118.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360159, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #74", "practiceaddress1": "1634 S FEDERAL HWY", "practiceaddress2": "UNIT B1", "practicecity": "BOYNTON BEACH", "practicestate": "FL", "practicezip9code": 334356901, "telephonenumber": 1322403964.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360153, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15248", "practiceaddress1": "9865 GLADES RD", "practiceaddress2": "UNIT B1", "practicecity": "BOCA RATON", "practicestate": "FL", "practicezip9code": 334343985, "telephonenumber": 1319905040.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359625, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6015", "practiceaddress1": "3200 S FEDERAL HWY", "practiceaddress2": "UNIT B1", "practicecity": "DELRAY BEACH", "practicestate": "FL", "practicezip9code": 334833260, "telephonenumber": 1318339975.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359781, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15395", "practiceaddress1": "1851 CLINT MOORE RD", "practiceaddress2": "UNIT B1", "practicecity": "BOCA RATON", "practicestate": "FL", "practicezip9code": 334872756, "telephonenumber": 1324656098.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359787, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "4218 LINDELL BLVD", "practiceaddress2": "UNIT B1", "practicecity": "SAINT LOUIS", "practicestate": "MO", "practicezip9code": 631082916, "telephonenumber": -1151253010.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20358953, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1515 N ALEXANDER DR", "practiceaddress2": "UNIT B1", "practicecity": "BAYTOWN", "practicestate": "TX", "practicezip9code": 775205321, "telephonenumber": -1480694044.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20326889, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 03549", "practiceaddress1": "355 CAMPBELL AVE", "practiceaddress2": "UNIT B1", "practicecity": "WEST HAVEN", "practicestate": "CT", "practicezip9code": 65165329, "telephonenumber": 2039311190.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20327207, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10462", "practiceaddress1": "720 BRANCHVILLE RD", "practiceaddress2": "UNIT B1", "practicecity": "RIDGEFIELD", "practicestate": "CT", "practicezip9code": 68776129, "telephonenumber": 2035447094.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327147, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 00935", "practiceaddress1": "891N COLONY RD", "practiceaddress2": "UNIT B1", "practicecity": "WALLINGFORD", "practicestate": "CT", "practicezip9code": 64922437, "telephonenumber": 2032948890.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20327201, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10317", "practiceaddress1": "8 ROYCE CIR", "practiceaddress2": "UNIT B1", "practicecity": "STORRS", "practicestate": "CT", "practicezip9code": 62682273, "telephonenumber": 14356944.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326925, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00692", "practiceaddress1": "162 WASHINGTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "NORTH HAVEN", "practicestate": "CT", "practicezip9code": 64731711, "telephonenumber": 2032394071.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327153, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 06702", "practiceaddress1": "644 W PUTNAM AVE", "practiceaddress2": "UNIT B1", "practicecity": "GREENWICH", "practicestate": "CT", "practicezip9code": 68306088, "telephonenumber": 2034222022.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326931, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00718", "practiceaddress1": "24 PERSHING DR", "practiceaddress2": "# 36", "practicecity": "ANSONIA", "practicestate": "CT", "practicezip9code": 64012214, "telephonenumber": 2037357837.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 12.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326937, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00696", "practiceaddress1": "14 CANDLEWOOD LAKE RD", "practiceaddress2": "UNIT B1", "practicecity": "BROOKFIELD", "practicestate": "CT", "practicezip9code": 68042529, "telephonenumber": 2037759593.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327591, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00691", "practiceaddress1": "1181 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "NEWINGTON", "practicestate": "CT", "practicezip9code": 61113033, "telephonenumber": 16737296.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330705, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01154", "practiceaddress1": "6 WILLARD RD", "practiceaddress2": "UNIT B1", "practicecity": "NORWALK", "practicestate": "CT", "practicezip9code": 68514414, "telephonenumber": 2037506901.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330693, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #00629", "practiceaddress1": "146 SOUTH ST", "practiceaddress2": "UNIT B1", "practicecity": "DANBURY", "practicestate": "CT", "practicezip9code": 68107951, "telephonenumber": 2037978919.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330411, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01109", "practiceaddress1": "7 DURANT AVE", "practiceaddress2": "UNIT B1", "practicecity": "BETHEL", "practicestate": "CT", "practicezip9code": 68011906, "telephonenumber": 2037949500.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20383211, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15152", "practiceaddress1": "7950 FAYETTEVILLE RD", "practiceaddress2": "UNIT B1", "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276035632, "telephonenumber": 607804259.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -78.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 129.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383205, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15261", "practiceaddress1": "283 W IL ROUTE 173", "practiceaddress2": "UNIT B1", "practicecity": "ANTIOCH", "practicestate": "IL", "practicezip9code": 600021833, "telephonenumber": -115984255.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383199, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15388", "practiceaddress1": "301 UNIVERSITY AVE", "practiceaddress2": "UNIT B1", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921033008, "telephonenumber": 1898283127.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.0, "longitude": -117.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 7.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383193, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #21148", "practiceaddress1": "3801 BISCAYNE BLVD", "practiceaddress2": "STE 260", "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331379800, "telephonenumber": -1239895904.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 8.0, "practicecity_stringindexer_transform": 373.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383187, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15180", "practiceaddress1": "101 N TENNESSEE STREET", "practiceaddress2": "UNIT B1", "practicecity": "CARTERSVILLE", "practicestate": "GA", "practicezip9code": 301203211, "telephonenumber": -886062067.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0, "longitude": -84.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 15.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383181, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15464", "practiceaddress1": "3 PLAISTOW RD", "practiceaddress2": "UNIT B1", "practicecity": "PLAISTOW", "practicestate": "NH", "practicezip9code": 38652803, "telephonenumber": 1738812908.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -71.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 24.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383175, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15792", "practiceaddress1": "8815 STAGECOACH RD", "practiceaddress2": "UNIT B1", "practicecity": "LITTLE ROCK", "practicestate": "AR", "practicezip9code": 722104786, "telephonenumber": 719590784.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 23.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383169, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15791", "practiceaddress1": "1601 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "LITTLE ROCK", "practicestate": "AR", "practicezip9code": 722061433, "telephonenumber": 718751933.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 23.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383163, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15511", "practiceaddress1": "4003 W VERNON AVE", "practiceaddress2": "UNIT B1", "practicecity": "KINSTON", "practicestate": "NC", "practicezip9code": 285049674, "telephonenumber": -1769376175.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383157, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13846", "practiceaddress1": "4030 ANNAS RETREAT", "practiceaddress2": "UNIT B1", "practicecity": "ST THOMAS", "practicestate": "VI", "practicezip9code": 8022221, "telephonenumber": -887188041.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.0, "longitude": -64.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383337, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13440", "practiceaddress1": "125 MORRIS AVE", "practiceaddress2": "UNIT B1", "practicecity": "SPRINGFIELD", "practicestate": "NJ", "practicezip9code": 7081, "telephonenumber": 1145710609.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.0, "longitude": -74.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 4.0, "practicestate_stringindexer_transform": 11.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383343, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "3501 N HALSTED ST", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606571832, "telephonenumber": -857451432.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 0.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383349, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13866", "practiceaddress1": "302 ROUTE 25A", "practiceaddress2": "UNIT B1", "practicecity": "MILLER PLACE", "practicestate": "NY", "practicezip9code": 117642413, "telephonenumber": 2018345866.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20383355, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "5555W 79TH ST", "practiceaddress2": "UNIT B1", "practicecity": "BURBANK", "practicestate": "IL", "practicezip9code": 604591301, "telephonenumber": -1504940837.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384837, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15009", "practiceaddress1": "5496 UNIVERSITY PKWY", "practiceaddress2": "UNIT B1", "practicecity": "WINSTON SALEM", "practicestate": "NC", "practicezip9code": 271051366, "telephonenumber": -927219267.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384825, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11535", "practiceaddress1": "3501 UNIQUE CIRCLE", "practiceaddress2": "UNIT B1", "practicecity": "FORT MYERS", "practicestate": "FL", "practicezip9code": 339084711, "telephonenumber": -1902253372.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 298.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20387669, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12716", "practiceaddress1": "12020 CULEBRA RD", "practiceaddress2": "UNIT B1", "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 782536478, "telephonenumber": 2107623040.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.0, "longitude": -98.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 25.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20384507, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15653", "practiceaddress1": "4353 LAKE OTIS PKWY", "practiceaddress2": "UNIT B1", "practicecity": "ANCHORAGE", "practicestate": "AK", "practicezip9code": 995085216, "telephonenumber": 485677413.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 61.0, "longitude": -149.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20463773, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #2600", "practiceaddress1": "1801 W 11TH ST", "practiceaddress2": "UNIT B1", "practicecity": "TRACY", "practicestate": "CA", "practicezip9code": 953763727, "telephonenumber": 2098302955.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 37.0, "longitude": -121.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 9.0}, {"provider_id": 20463767, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #3545", "practiceaddress1": "900 MERIDIAN E", "practiceaddress2": "UNIT B1", "practicecity": "MILTON", "practicestate": "WA", "practicezip9code": 983547001, "telephonenumber": -1755446906.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 47.0, "longitude": -122.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 21.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 5.0}, {"provider_id": 20468195, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY #0430", "practiceaddress1": "1455 NE DIVISION ST", "practiceaddress2": "UNIT B1", "practicecity": "GRESHAM", "practicestate": "OR", "practicezip9code": 970304270, "telephonenumber": 739959983.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 45.0, "longitude": -122.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 9.0}, {"provider_id": 20463917, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #1437", "practiceaddress1": "1302 E 38TH ST", "practiceaddress2": "UNIT B1", "practicecity": "TACOMA", "practicestate": "WA", "practicezip9code": 984183708, "telephonenumber": -1760251785.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 47.0, "longitude": -122.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 21.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 6.0}, {"provider_id": 20330687, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01123", "practiceaddress1": "22 DEPOT HILL RD", "practiceaddress2": "UNIT B1", "practicecity": "SOUTHBURY", "practicestate": "CT", "practicezip9code": 64882258, "telephonenumber": 2032621831.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327195, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05881", "practiceaddress1": "969 HIGH RIDGE RD", "practiceaddress2": "UNIT B1", "practicecity": "STAMFORD", "practicestate": "CT", "practicezip9code": 69051608, "telephonenumber": 2033221520.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330537, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01125", "practiceaddress1": "10 LATHROP RD", "practiceaddress2": "UNIT B1", "practicecity": "PLAINFIELD", "practicestate": "CT", "practicezip9code": 63742030, "telephonenumber": 15707519.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -71.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 136.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20330519, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01284", "practiceaddress1": "17 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "CLINTON", "practicestate": "CT", "practicezip9code": 64132034, "telephonenumber": 16714745.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20328551, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16775", "practiceaddress1": "1 MIFFLIN ST", "practiceaddress2": "UNIT B1", "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191482017, "telephonenumber": -2140333995.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.0, "longitude": -75.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 8.0, "practicestate_stringindexer_transform": 6.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20328545, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16752", "practiceaddress1": "200 BUTLER CMNS", "practiceaddress2": "UNIT B1", "practicecity": "BUTLER", "practicestate": "PA", "practicezip9code": 160012485, "telephonenumber": -1347097323.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.0, "longitude": -79.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 6.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326955, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CONNECTICUT CVS PHARMACY LLC", "practiceaddress1": "467 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "RIDGEFIELD", "practicestate": "CT", "practicezip9code": 68774513, "telephonenumber": 2034318888.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326943, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01102", "practiceaddress1": "341 COTTAGE GROVE RD", "practiceaddress2": "UNIT B1", "practicecity": "BLOOMFIELD", "practicestate": "CT", "practicezip9code": 60023148, "telephonenumber": 12503759.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20327003, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01027", "practiceaddress1": "372 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "NORWICH", "practicestate": "CT", "practicezip9code": 63605421, "telephonenumber": 18941378.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326997, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01038", "practiceaddress1": "1044 BOULEVARD", "practiceaddress2": "UNIT B1", "practicecity": "WEST HARTFORD", "practicestate": "CT", "practicezip9code": 61191801, "telephonenumber": 12434756.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20326991, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01043", "practiceaddress1": "525 BUCKLAND RD", "practiceaddress2": "UNIT B1", "practicecity": "SOUTH WINDSOR", "practicestate": "CT", "practicezip9code": 60743746, "telephonenumber": 16509649.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326985, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CONNECTICUT CVS PHARMACY LLC", "practiceaddress1": "656 NEW HAVEN AVE", "practiceaddress2": "UNIT B1", "practicecity": "DERBY", "practicestate": "CT", "practicezip9code": 64182528, "telephonenumber": 2037324495.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20463437, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "RANDALLS FOOD & DRUGS LP", "practicename": "TOM THUMB PHARMACY #2963", "practiceaddress1": "5550 FM 423", "practiceaddress2": "UNIT B1", "practicecity": "FRISCO", "practicestate": "TX", "practicezip9code": 750348900, "telephonenumber": -2120021070.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 33.0, "longitude": -96.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 171.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 6.0}, {"provider_id": 20468159, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #1260", "practiceaddress1": "401 S ROOSEVELT DR", "practiceaddress2": "UNIT B1", "practicecity": "SEASIDE", "practicestate": "OR", "practicezip9code": 971386738, "telephonenumber": 742417410.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 45.0, "longitude": -123.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 6.0}, {"provider_id": 20467949, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #1275", "practiceaddress1": "599 W 4TH ST", "practiceaddress2": "UNIT B1", "practicecity": "BENSON", "practicestate": "AZ", "practicezip9code": 856026501, "telephonenumber": 910900027.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 31.0, "longitude": -110.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 31.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 23.0}, {"provider_id": 20467943, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #1732", "practiceaddress1": "1449 N ARIZONA BLVD", "practiceaddress2": "UNIT B1", "practicecity": "COOLIDGE", "practicestate": "AZ", "practicezip9code": 851283214, "telephonenumber": 912268256.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 32.0, "longitude": -111.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 31.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 5.0}, {"provider_id": 20463857, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #2954", "practiceaddress1": "6519 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "BONNERS FERRY", "practicestate": "ID", "practicezip9code": 838058521, "telephonenumber": 2082672301.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 48.0, "longitude": -116.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 5.0}, {"provider_id": 20463863, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #1234", "practiceaddress1": "1125 2ND ST", "practiceaddress2": "UNIT B1", "practicecity": "BRENTWOOD", "practicestate": "CA", "practicezip9code": 945132211, "telephonenumber": 666412190.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 37.0, "longitude": -121.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 6.0}, {"provider_id": 20463869, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #1209", "practiceaddress1": "831 KUHIO HWY", "practiceaddress2": "UNIT B1", "practicecity": "KAPAA", "practicestate": "HI", "practicezip9code": 96746, "telephonenumber": -501712401.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 22.0, "longitude": -159.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 37.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 9.0}, {"provider_id": 20491949, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WL-MART PHARMACY 10-2509", "practiceaddress1": "1810 S IRISH RD", "practiceaddress2": "UNIT B1", "practicecity": "CHILTON", "practicestate": "WI", "practicezip9code": 530141773, "telephonenumber": 618562738.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 44.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 29.0}, {"provider_id": 20492135, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-2658", "practiceaddress1": "1515 W PARADISE DR", "practiceaddress2": "UNIT B1", "practicecity": "WEST BEND", "practicestate": "WI", "practicezip9code": 530959794, "telephonenumber": -1671617436.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 43.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20492207, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-2872", "practiceaddress1": "10562 BELLEVILLE RD", "practiceaddress2": "UNIT B1", "practicecity": "BELLEVILLE", "practicestate": "MI", "practicezip9code": 481111308, "telephonenumber": -1242959808.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 42.0, "longitude": -83.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 33.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490401, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY #10-0099", "practiceaddress1": "1445 E CENTRAL CT", "practiceaddress2": "UNIT B1", "practicecity": "UNION", "practicestate": "MO", "practicezip9code": 630844323, "telephonenumber": 2070870662.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 7.0}, {"provider_id": 20490383, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY #10-0176", "practiceaddress1": "822 CITY AVE S", "practiceaddress2": "UNIT B1", "practicecity": "RIPLEY", "practicestate": "MS", "practicezip9code": 386632905, "telephonenumber": -1961560492.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 34.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 7.0}, {"provider_id": 20492291, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-1366", "practiceaddress1": "505 S. PINE RIDGE AVE", "practiceaddress2": "UNIT B1", "practicecity": "MERRILL", "practicestate": "WI", "practicezip9code": 544528812, "telephonenumber": -1434569062.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 45.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 7.0}, {"provider_id": 20490437, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-2078", "practiceaddress1": "804 PIKE ST", "practiceaddress2": "UNIT B1", "practicecity": "MARIETTA", "practicestate": "OH", "practicezip9code": 457503503, "telephonenumber": -1186165557.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490497, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-2420", "practiceaddress1": "100 SARA WAY", "practiceaddress2": "UNIT B1", "practicecity": "BELLE VERNON", "practicestate": "PA", "practicezip9code": 150121963, "telephonenumber": -1340642155.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 40.0, "longitude": -79.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 6.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490431, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-2035", "practiceaddress1": "1501 WAGNER AVE", "practiceaddress2": "UNIT B1", "practicecity": "GREENVILLE", "practicestate": "OH", "practicezip9code": 453312763, "telephonenumber": 785545252.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 40.0, "longitude": -84.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490425, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST, LP", "practiceaddress1": "4141 PEARL RD", "practiceaddress2": "UNIT B1", "practicecity": "MEDINA", "practicestate": "OH", "practicezip9code": 442567649, "telephonenumber": -987735785.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 41.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20326979, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01051", "practiceaddress1": "593 NEWFIELD AVE", "practiceaddress2": "UNIT B1", "practicecity": "STAMFORD", "practicestate": "CT", "practicezip9code": 69053302, "telephonenumber": 2039674600.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20326973, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "CONNECTICUT CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01060", "practiceaddress1": "326 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "SOUTHINGTON", "practicestate": "CT", "practicezip9code": 64892508, "telephonenumber": 16277404.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20432189, "acceptsassignement": 0, "participationbegindate": 1546300800000, "businessname": "GARFIELD BEACH CVS LLC", "practicename": "CVS PHARMACY #09141", "practiceaddress1": "3151 UNIVERSITY AVE", "practiceaddress2": "UNIT B1", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921042039, "telephonenumber": 1897870070.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.0, "longitude": -117.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2019, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 7.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20431871, "acceptsassignement": 0, "participationbegindate": 1546300800000, "businessname": "GARFIELD BEACH CVS LLC", "practicename": "CVS PHARMACY #09771", "practiceaddress1": "9256 SLAUSON AVE", "practiceaddress2": "UNIT B1", "practicecity": "PICO RIVERA", "practicestate": "CA", "practicezip9code": 906604526, "telephonenumber": 1334528128.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.0, "longitude": -118.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2019, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20431307, "acceptsassignement": 0, "participationbegindate": 1546300800000, "businessname": "GARFIELD BEACH CVS LLC", "practicename": "CVS PHARMACY #09750", "practiceaddress1": "1830 N BROADWAY", "practiceaddress2": "UNIT B1", "practicecity": "SANTA MARIA", "practicestate": "CA", "practicezip9code": 934541449, "telephonenumber": -536451037.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.0, "longitude": -120.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2019, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 192.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20431823, "acceptsassignement": 0, "participationbegindate": 1546300800000, "businessname": "GARFIELD BEACH CVS LLC", "practicename": "CVS PHARMACY #09779", "practiceaddress1": "74955 US HIGHWAY 111", "practiceaddress2": "UNIT B1", "practicecity": "INDIAN WELLS", "practicestate": "CA", "practicezip9code": 922107136, "telephonenumber": -986470128.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.0, "longitude": -116.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2019, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20432195, "acceptsassignement": 0, "participationbegindate": 1546300800000, "businessname": "GARFIELD BEACH CVS LLC", "practicename": "CVS PHARMACY # 01176", "practiceaddress1": "25829 NARBONNE AVE", "practiceaddress2": "UNIT B1", "practicecity": "LOMITA", "practicestate": "CA", "practicezip9code": 907173001, "telephonenumber": -1189788776.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.0, "longitude": -118.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2019, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20423819, "acceptsassignement": 0, "participationbegindate": 1546300800000, "businessname": "GARFIELD BEACH CVS LLC", "practicename": "CVS PHARMACY #16049", "practiceaddress1": "1200 N SEPULVEDA BLVD", "practiceaddress2": "UNIT B1", "practicecity": "MANHATTAN BEACH", "practicestate": "CA", "practicezip9code": 902665104, "telephonenumber": -1189501695.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.0, "longitude": -118.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2019, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20425055, "acceptsassignement": 0, "participationbegindate": 1546300800000, "businessname": "GARFIELD BEACH CVS LLC", "practicename": "CVS PHARMACY #16723", "practiceaddress1": "9100 ROSEDALE HWY", "practiceaddress2": "UNIT B1", "practicecity": "BAKERSFIELD", "practicestate": "CA", "practicezip9code": 933122143, "telephonenumber": -1974037400.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.0, "longitude": -119.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2019, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20425709, "acceptsassignement": 0, "participationbegindate": 1546300800000, "businessname": "GARFIELD BEACH CVS LLC", "practicename": "CVS PHARMACY #16069", "practiceaddress1": "43525 10TH ST W", "practiceaddress2": "UNIT B1", "practicecity": "LANCASTER", "practicestate": "CA", "practicezip9code": 935346091, "telephonenumber": -1973191466.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.0, "longitude": -118.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2019, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 67.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20425727, "acceptsassignement": 0, "participationbegindate": 1546300800000, "businessname": "GARFIELD BEACH CVS LLC", "practicename": "CVS PHARMACY #16360", "practiceaddress1": "1790 AIRLINE HWY", "practiceaddress2": "UNIT B1", "practicecity": "HOLLISTER", "practicestate": "CA", "practicezip9code": 950235621, "telephonenumber": -273549768.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.0, "longitude": -121.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2019, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 21609405, "acceptsassignement": 0, "participationbegindate": 1485475200000, "businessname": "CARR-GOTTSTEIN FOODS CO", "practicename": "SAFEWAY PHARMACY #1820", "practiceaddress1": "3033 VINTAGE BLVD", "practiceaddress2": "UNIT B1", "practicecity": "JUNEAU", "practicestate": "AK", "practicezip9code": 998017109, "telephonenumber": 485297468.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 58.0, "longitude": -134.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 5.0}, {"provider_id": 20462759, "acceptsassignement": 0, "participationbegindate": 1485475200000, "businessname": "CARR-GOTTSTEIN FOODS CO", "practicename": "SAFEWAY PHARMACY #1818", "practiceaddress1": "2417 TONGASS AVE", "practiceaddress2": "UNIT B1", "practicecity": "KETCHIKAN", "practicestate": "AK", "practicezip9code": 999015900, "telephonenumber": 482347368.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 55.0, "longitude": -131.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 6.0}, {"provider_id": 20489081, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-1167", "practiceaddress1": "3500 BRUMBACK BLVD", "practiceaddress2": "UNIT B1", "practicecity": "KENOSHA", "practicestate": "WI", "practicezip9code": 531444816, "telephonenumber": -1668445838.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 42.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490521, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-1986", "practiceaddress1": "340 WESTWIND DR", "practiceaddress2": "UNIT B1", "practicecity": "NORWALK", "practicestate": "OH", "practicezip9code": 448579104, "telephonenumber": -98334883.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 41.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20491955, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY #10-0295", "practiceaddress1": "131 EUREKA TWNCTR DR", "practiceaddress2": "UNIT B1", "practicecity": "EUREKA", "practicestate": "MO", "practicezip9code": 630251031, "telephonenumber": 2074422129.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20491967, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY #10-0056", "practiceaddress1": "1309 NW 12TH AVE", "practiceaddress2": "UNIT B1", "practicecity": "AVA", "practicestate": "MO", "practicezip9code": 65608, "telephonenumber": -118132588.0, "specialitieslist": "Medical Supply Company Other|Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 36.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 13.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 7.0}, {"provider_id": 20492297, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY #10-1478", "practiceaddress1": "354 PRIVATE DRIVE 288", "practiceaddress2": "UNIT B1", "practicecity": "SOUTH POINT", "practicestate": "OH", "practicezip9code": 456807900, "telephonenumber": -1180991075.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 38.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490389, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY #10-1650", "practiceaddress1": "825 E GREEN BAY AVE", "practiceaddress2": "UNIT B1", "practicecity": "SAUKVILLE", "practicestate": "WI", "practicezip9code": 530802618, "telephonenumber": -1672117415.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 43.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 8.0}, {"provider_id": 20492123, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-1356", "practiceaddress1": "410 GRAND VALLEY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "MARTINSVILLE", "practicestate": "IN", "practicezip9code": 461516123, "telephonenumber": -936443454.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 16.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20492117, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-1160", "practiceaddress1": "100 SYCAMORE ESTATES DR", "practiceaddress2": "UNIT B1", "practicecity": "AURORA", "practicestate": "IN", "practicezip9code": 470011488, "telephonenumber": -460671558.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -84.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 211.0, "practicestate_stringindexer_transform": 16.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 8.0}, {"provider_id": 20489831, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-2221", "practiceaddress1": "2021 E INDEPENDENCE ST", "practiceaddress2": "UNIT B1", "practicecity": "SPRINGFIELD", "practicestate": "MO", "practicezip9code": 658043748, "telephonenumber": -116104651.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 37.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 4.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490065, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST LP", "practiceaddress1": "180 RIVER RD", "practiceaddress2": "UNIT B1", "practicecity": "LISBON", "practicestate": "CT", "practicezip9code": 63513249, "telephonenumber": 13825540.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 41.0, "longitude": -71.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490461, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-0981", "practiceaddress1": "1733 2ND ST S", "practiceaddress2": "UNIT B1", "practicecity": "MERIDIAN", "practicestate": "MS", "practicezip9code": 393014514, "telephonenumber": 1719884922.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 32.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490329, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-1468", "practiceaddress1": "205 HOUSE CARLSON DR", "practiceaddress2": "UNIT B1", "practicecity": "BATESVILLE", "practicestate": "MS", "practicezip9code": 386067643, "telephonenumber": -1964301451.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 34.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490509, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-1014", "practiceaddress1": "4000 S BOLGER RD", "practiceaddress2": "UNIT B1", "practicecity": "INDEPENDENCE", "practicestate": "MO", "practicezip9code": 640556776, "telephonenumber": -425150617.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490503, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-0483", "practiceaddress1": "1903 COBBS FORD RD", "practiceaddress2": "UNIT B1", "practicecity": "PRATTVILLE", "practicestate": "AL", "practicezip9code": 360667230, "telephonenumber": -951309522.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 32.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 20.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 10.0}, {"provider_id": 20490443, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 100723", "practiceaddress1": "1420 HIGHWAY 231 S", "practiceaddress2": "UNIT B1", "practicecity": "TROY", "practicestate": "AL", "practicezip9code": 360812504, "telephonenumber": -949299287.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 31.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 20.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 10.0}, {"provider_id": 20490539, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST, LP", "practiceaddress1": "805 US HIGHWAY 27 S", "practiceaddress2": "UNIT B1", "practicecity": "CYNTHIANA", "practicestate": "KY", "practicezip9code": 410316888, "telephonenumber": 2408941.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 38.0, "longitude": -84.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 22.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20360087, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6812 N LAMAR BLVD", "practiceaddress2": "UNIT B1", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787523506, "telephonenumber": 829616973.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 9.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391299, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "804 W MARKET ST", "practiceaddress2": "WALGREENS #5549", "practicecity": "WARREN", "practicestate": "OH", "practicezip9code": 444811038, "telephonenumber": -991034263.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 14.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20358965, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5927", "practiceaddress1": "324 ROOSEVELT RD", "practiceaddress2": "UNIT B1", "practicecity": "GLEN ELLYN", "practicestate": "IL", "practicezip9code": 601375647, "telephonenumber": 2013615634.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359061, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10078", "practiceaddress1": "875 E NAPIER AVE", "practiceaddress2": "UNIT B1", "practicecity": "BENTON HARBOR", "practicestate": "MI", "practicezip9code": 490226125, "telephonenumber": -1595705117.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 33.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359067, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5719", "practiceaddress1": "4995 E US ROUTE 36", "practiceaddress2": "UNIT B1", "practicecity": "DECATUR", "practicestate": "IL", "practicezip9code": 625219701, "telephonenumber": -2116317430.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 81.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359073, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5388", "practiceaddress1": "1311 N STATE ROUTE 48", "practiceaddress2": "UNIT B1", "practicecity": "DECATUR", "practicestate": "IL", "practicezip9code": 625263701, "telephonenumber": -2120675308.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 81.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359079, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6332", "practiceaddress1": "1150 E SIBLEY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "DOLTON", "practicestate": "IL", "practicezip9code": 604192828, "telephonenumber": -1501516732.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20358971, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12672", "practiceaddress1": "1835 SAND LAKE RD", "practiceaddress2": "UNIT B1", "practicecity": "ORLANDO", "practicestate": "FL", "practicezip9code": 328097629, "telephonenumber": -216405487.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359025, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1403 WAUKEGAN RD", "practiceaddress2": "UNIT B1", "practicecity": "GLENVIEW", "practicestate": "IL", "practicezip9code": 600252120, "telephonenumber": -109953150.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360093, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN PHARMACY #10576", "practiceaddress1": "6297 PGA BLVD", "practiceaddress2": "UNIT B1", "practicecity": "PALM BEACH GARDENS", "practicestate": "FL", "practicezip9code": 334184000, "telephonenumber": 1321305209.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360081, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04761", "practiceaddress1": "6200 W WILLIAM CANNON DR", "practiceaddress2": "UNIT B1", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787491794, "telephonenumber": 833954637.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 9.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360045, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5018", "practiceaddress1": "1213 PALM BAY RD", "practiceaddress2": "UNIT B1", "practicecity": "MELBOURNE", "practicestate": "FL", "practicezip9code": 329053781, "telephonenumber": -1078202694.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360051, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6704", "practiceaddress1": "175 MALABAR RD NW", "practiceaddress2": "UNIT B1", "practicecity": "PALM BAY", "practicestate": "FL", "practicezip9code": 329072944, "telephonenumber": -1077683241.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359853, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #07454", "practiceaddress1": "901 N ANKENY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "ANKENY", "practicestate": "IA", "practicezip9code": 500234002, "telephonenumber": 864676656.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20358941, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #07106", "practiceaddress1": "5896 CORTEZ RD W", "practiceaddress2": "UNIT B1", "practicecity": "BRADENTON", "practicestate": "FL", "practicezip9code": 342102703, "telephonenumber": 827989225.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360063, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #01933", "practiceaddress1": "2501 S LAMAR BLVD", "practiceaddress2": "UNIT B1", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787044730, "telephonenumber": 829470238.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 9.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20353061, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15995", "practiceaddress1": "6230 W. IRLO BRONSON MEMORIAL HWY", "practiceaddress2": "UNIT B1", "practicecity": "KISSIMMEE", "practicestate": "FL", "practicezip9code": 34747, "telephonenumber": -215323761.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360069, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #03341", "practiceaddress1": "5600 S 1ST ST", "practiceaddress2": "UNIT B1", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787453108, "telephonenumber": 829447451.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 9.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20393921, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4020", "practiceaddress1": "5895 W PEORIA AVE", "practiceaddress2": "UNIT B1", "practicecity": "GLENDALE", "practicestate": "AZ", "practicezip9code": 853021303, "telephonenumber": 1944381856.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -112.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 297.0, "practicestate_stringindexer_transform": 31.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359793, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15110", "practiceaddress1": "900 SHELBY RD", "practiceaddress2": "UNIT B1", "practicecity": "KINGS MOUNTAIN", "practicestate": "NC", "practicezip9code": 280862738, "telephonenumber": -1542542465.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 13.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359799, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #01107", "practiceaddress1": "2310 MCCAUSLAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "SAINT LOUIS", "practicestate": "MO", "practicezip9code": 631432620, "telephonenumber": -1148489476.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359805, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06220", "practiceaddress1": "3300 BROWN RD", "practiceaddress2": "UNIT B1", "practicecity": "SAINT LOUIS", "practicestate": "MO", "practicezip9code": 631144328, "telephonenumber": -1150691075.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391347, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5269", "practiceaddress1": "420 N FRAZIER ST", "practiceaddress2": "UNIT B1", "practicecity": "CONROE", "practicestate": "TX", "practicezip9code": 773012882, "telephonenumber": 775005832.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 115.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20462753, "acceptsassignement": 0, "participationbegindate": 1485475200000, "businessname": "CARR-GOTTSTEIN FOODS CO", "practicename": "CARRS PHARMACY #1817", "practiceaddress1": "7731 E NORTHERN LIGHTS BLVD", "practiceaddress2": "UNIT B1", "practicecity": "ANCHORAGE", "practicestate": "AK", "practicezip9code": 995043554, "telephonenumber": 483457168.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 61.0, "longitude": -149.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 6.0}, {"provider_id": 20462771, "acceptsassignement": 0, "participationbegindate": 1485475200000, "businessname": "CARR-GOTTSTEIN FOODS CO", "practicename": "SAFEWAY PHARMACY #1821", "practiceaddress1": "301 N SANTA CLAUS LN", "practiceaddress2": "UNIT B1", "practicecity": "NORTH POLE", "practicestate": "AK", "practicezip9code": 997056081, "telephonenumber": 484968168.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 64.0, "longitude": -147.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 6.0}, {"provider_id": 20462705, "acceptsassignement": 0, "participationbegindate": 1485475200000, "businessname": "CARR-GOTTSTEIN FOODS CO", "practicename": "SAFEWAY PHARMACY #2728", "practiceaddress1": "MILE 1907 SEWARD HWY", "practiceaddress2": "UNIT B1", "practicecity": "SEWARD", "practicestate": "AK", "practicezip9code": 996649800, "telephonenumber": 482312368.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 60.0, "longitude": -149.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 5.0}, {"provider_id": 20462747, "acceptsassignement": 0, "participationbegindate": 1485475200000, "businessname": "CARR-GOTTSTEIN FOODS CO", "practicename": "CARRS PHARMACY #1812", "practiceaddress1": "4000 W DIMOND BLVD", "practiceaddress2": "UNIT B1", "practicecity": "ANCHORAGE", "practicestate": "AK", "practicezip9code": 995151401, "telephonenumber": 483456668.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 61.0, "longitude": -149.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 6.0}, {"provider_id": 20462777, "acceptsassignement": 1, "participationbegindate": 1485388800000, "businessname": "YAGNAM LLC", "practicename": "LA NUEVA MERCEDES PHARMACY", "practiceaddress1": "500 RIVER ST", "practiceaddress2": "UNIT B1", "practicecity": "PATERSON", "practicestate": "NJ", "practicezip9code": 75241903, "telephonenumber": 1142858208.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.0, "longitude": -74.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 26, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 128.0, "practicestate_stringindexer_transform": 11.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20462795, "acceptsassignement": 1, "participationbegindate": 1485302400000, "businessname": "WILLIAM RICHARD HOLDSWORTH", "practicename": "PAIN RELIEF CHIROPRACTIC", "practiceaddress1": "17 US HIGHWAY 206", "practiceaddress2": "STE 2", "practicecity": "STANHOPE", "practicestate": "NJ", "practicezip9code": 78743274, "telephonenumber": 1145857329.0, "specialitieslist": "Medical Supply Company Other|Orthotic Personnel", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "latitude": 40.0, "longitude": -74.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 25, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 3.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 11.0, "specialitieslist_stringindexer_transform": 10.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 49.0}, {"provider_id": 20462813, "acceptsassignement": 1, "participationbegindate": 1485129600000, "businessname": "BIC IN HOME SERVICES, LLC", "practicename": "BIC IN HOME SERVICES", "practiceaddress1": "11352 DORSETT RD", "practiceaddress2": "UNIT B1", "practicecity": "MARYLAND HEIGHTS", "practicestate": "MO", "practicezip9code": 630433412, "telephonenumber": -1152877266.0, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 23, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 169.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 5.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 52.0}, {"provider_id": 20462807, "acceptsassignement": 1, "participationbegindate": 1485129600000, "businessname": "TERRACE APOTHECARY, INC", "practicename": "HAWORTH APOTHECARY", "practiceaddress1": "169 TERRACE ST", "practiceaddress2": "UNIT B1", "practicecity": "HAWORTH", "practicestate": "NJ", "practicezip9code": 76411835, "telephonenumber": 2013847171.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 23, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 11.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 53.0}, {"provider_id": 20462825, "acceptsassignement": 1, "participationbegindate": 1484870400000, "businessname": "DEDHAM PHARMACY & MEDICAL SUPPLY", "practicename": "DEDHAM PHARMACY & MEDICAL SUPPLY", "practiceaddress1": "596 PROVIDENCE HWY", "practiceaddress2": "UNIT B1", "practicecity": "DEDHAM", "practicestate": "MA", "practicezip9code": 20266804, "telephonenumber": -776667585.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 42.0, "longitude": -71.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 40.0, "practicestate_stringindexer_transform": 0.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 26717932, "acceptsassignement": 0, "participationbegindate": 1484784000000, "businessname": "FRISCIA PHARMACY INC", "practicename": "FRISCIA PHARMACY INC.", "practiceaddress1": "1505 MERMAID AVE", "practiceaddress2": "UNIT B1", "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112242617, "telephonenumber": -1406194992.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 19, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 5.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20462843, "acceptsassignement": 1, "participationbegindate": 1484697600000, "businessname": "FOSSTON PHARMACY & GIFTS INC", "practicename": "FOSSOTON PHARMACY AND GIFTS", "practiceaddress1": "115 JOHNSON AVE N", "practiceaddress2": "UNIT B1", "practicecity": "FOSSTON", "practicestate": "MN", "practicezip9code": 565421327, "telephonenumber": -2110610650.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual Related Accessories)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 47.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 18, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 42.0}, {"provider_id": 20462849, "acceptsassignement": 0, "participationbegindate": 1484611200000, "businessname": "AWARD PHARMACY CORP", "practicename": "AWARD PHARMACY CORP", "practiceaddress1": "2249 86TH ST", "practiceaddress2": "UNIT B1", "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112144107, "telephonenumber": -1406623282.0, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 17, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 5.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 4.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20462855, "acceptsassignement": 1, "participationbegindate": 1484352000000, "businessname": "GARDNER EYE CARE LLC", "practicename": "GARDNER EYE CARE LLC", "practiceaddress1": "846 FORT DALE RD", "practiceaddress2": "UNIT B1", "practicecity": "GREENVILLE", "practicestate": "AL", "practicezip9code": 360373509, "telephonenumber": -951141725.0, "specialitieslist": "Optometrist", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "latitude": 31.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 14, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 20.0, "specialitieslist_stringindexer_transform": 7.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 55.0}, {"provider_id": 20462861, "acceptsassignement": 0, "participationbegindate": 1484265600000, "businessname": "CARTER HEALTHCARE DME OF NORTHEAST OKLAHOMA LLC", "practicename": "CARTER HEALTHCARE DME OF NORTHEAST", "practiceaddress1": "2846 E 101ST ST", "practiceaddress2": "UNIT B1", "practicecity": "TULSA", "practicestate": "OK", "practicezip9code": 741375601, "telephonenumber": 594319408.0, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Canes and/or Crutches|Patient Lifts|Wheelchairs (Standard Manual Related Accessories)|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies", "latitude": 36.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 13, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 6.0, "providertypelist_stringindexer_transform": 1, "supplieslist_stringindexer_transform": 37.0}, {"provider_id": 20462873, "acceptsassignement": 0, "participationbegindate": 1484265600000, "businessname": "HHP LLC", "practicename": "HARTLEY HOMETOWN PHARMACY", "practiceaddress1": "130 3RD ST NE", "practiceaddress2": "STE A", "practicecity": "HARTLEY", "practicestate": "IA", "practicezip9code": 513461132, "telephonenumber": -1460647522.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 43.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 13, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 2.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 12.0}, {"provider_id": 20462867, "acceptsassignement": 0, "participationbegindate": 1484265600000, "businessname": "CARTER HEALTHCARE PHARMACY AND DME OF OKLAHOMA LLC", "practicename": "CARTER HEALTHCARE PHARMACY AND DME", "practiceaddress1": "3105 S MERIDIAN AVE", "practiceaddress2": "UNIT B1", "practicecity": "OKLAHOMA CITY", "practicestate": "OK", "practicezip9code": 731191022, "telephonenumber": -235489596.0, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps", "latitude": 35.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 13, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 140.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 6.0, "providertypelist_stringindexer_transform": 1, "supplieslist_stringindexer_transform": 54.0}, {"provider_id": 20462885, "acceptsassignement": 1, "participationbegindate": 1484092800000, "businessname": "MEDPRIME HEALTH SERVICES LLC", "practicename": "MEDPRIME PHARMACY", "practiceaddress1": "3310 LAMAR AVE", "practiceaddress2": "STE B", "practicecity": "PARIS", "practicestate": "TX", "practicezip9code": 75460, "telephonenumber": 447130473.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "latitude": 33.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 11, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 1.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 16.0}, {"provider_id": 20462879, "acceptsassignement": 1, "participationbegindate": 1484092800000, "businessname": "GOOSE PHARMA LLC", "practicename": "ONE PHARMACY", "practiceaddress1": "18049 MAGNOLIA ST", "practiceaddress2": "UNIT B1", "practicecity": "FOUNTAIN VALLEY", "practicestate": "CA", "practicezip9code": 927085638, "telephonenumber": -1444054806.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.0, "longitude": -117.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 11, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 50.0}, {"provider_id": 20490335, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-1176", "practiceaddress1": "2600 HWY 138", "practiceaddress2": "UNIT B1", "practicecity": "STOUGHTON", "practicestate": "WI", "practicezip9code": 535893311, "telephonenumber": 1793771966.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 42.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 325.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490341, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST LP", "practiceaddress1": "611 STATE HIGHWAY 54", "practiceaddress2": "UNIT B1", "practicecity": "BLACK RIVER FALLS", "practicestate": "WI", "practicezip9code": 546155453, "telephonenumber": -1437085477.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 44.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490347, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY #10-0971", "practiceaddress1": "1133 N MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "VIROQUA", "practicestate": "WI", "practicezip9code": 546651162, "telephonenumber": 1791411218.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 43.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 7.0}, {"provider_id": 24546738, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST, LP", "practiceaddress1": "38020 US HIGHWAY 18", "practiceaddress2": "UNIT B1", "practicecity": "PRAIRIE DU CHIEN", "practicestate": "WI", "practicezip9code": 538218206, "telephonenumber": 1788297807.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 43.0, "longitude": -91.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490353, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST , LP", "practiceaddress1": "3915 GATEWAY DR", "practiceaddress2": "UNIT B1", "practicecity": "EAU CLAIRE", "practicestate": "WI", "practicezip9code": 547018165, "telephonenumber": -1431588626.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 44.0, "longitude": -91.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 255.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 8.0}, {"provider_id": 20490359, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST, LP", "practiceaddress1": "920 US HWY 12", "practiceaddress2": "UNIT B1", "practicecity": "BARABOO", "practicestate": "WI", "practicezip9code": 539139254, "telephonenumber": 1788594483.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 43.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490365, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY #10-1515", "practiceaddress1": "W190 N9855 APPLETON AVE", "practiceaddress2": "UNIT B1", "practicecity": "GERMANTOWN", "practicestate": "WI", "practicezip9code": 530224504, "telephonenumber": -1672411945.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 43.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 146.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490371, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY #10-1703", "practiceaddress1": "800 FOXCROFT AVE", "practiceaddress2": "UNIT B1", "practicecity": "MARTINSBURG", "practicestate": "WV", "practicezip9code": 254011829, "telephonenumber": -1252331266.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489861, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-2244", "practiceaddress1": "3333 US ROUTE 60", "practiceaddress2": "UNIT B1", "practicecity": "HUNTINGTON", "practicestate": "WV", "practicezip9code": 257052838, "telephonenumber": -1249713030.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 38.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489807, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-1505", "practiceaddress1": "254 CASSIDY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "PIKEVILLE", "practicestate": "KY", "practicezip9code": 415011426, "telephonenumber": 1769358884.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 37.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 22.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489855, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-2250", "practiceaddress1": "4000 RED BANK RD", "practiceaddress2": "UNIT B1", "practicecity": "CINCINNATI", "practicestate": "OH", "practicezip9code": 452273416, "telephonenumber": 838552414.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -84.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489849, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-2175", "practiceaddress1": "18401 BUSINESS 13", "practiceaddress2": "UNIT B1", "practicecity": "BRANSON WEST", "practicestate": "MO", "practicezip9code": 657379609, "telephonenumber": -122239246.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 36.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490533, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-2045", "practiceaddress1": "8118 PERRY HILLS CT", "practiceaddress2": "UNIT B1", "practicecity": "NOTTINGHAM", "practicestate": "MD", "practicezip9code": 212363514, "telephonenumber": -186137353.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 12.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 10.0}, {"provider_id": 20489873, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST, LP", "practiceaddress1": "2136 CAMPBELLSVILLE RD", "practiceaddress2": "UNIT B1", "practicecity": "LEBANON", "practicestate": "KY", "practicezip9code": 400338466, "telephonenumber": -1588045501.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 37.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 22.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 7.0}, {"provider_id": 20489813, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-0069", "practiceaddress1": "650 S TRUMAN BLVD", "practiceaddress2": "UNIT B1", "practicecity": "FESTUS", "practicestate": "MO", "practicezip9code": 630282235, "telephonenumber": 2074406231.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20492021, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-1294", "practiceaddress1": "3240 S WESTERN AVE", "practiceaddress2": "UNIT B1", "practicecity": "MARION", "practicestate": "IN", "practicezip9code": 469533967, "telephonenumber": -933313763.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 40.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 16.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20357657, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16080", "practiceaddress1": "414 KINGS HIGHWAY EAST", "practiceaddress2": "UNIT B1", "practicecity": "FAIRFIELD", "practicestate": "CT", "practicezip9code": 68254846, "telephonenumber": 2033363551.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391239, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5121", "practiceaddress1": "5935 W ADDISON ST", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606344214, "telephonenumber": -857112998.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 0.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391245, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "3915 S NOLAND RD", "practiceaddress2": "UNIT B1", "practicecity": "INDEPENDENCE", "practicestate": "MO", "practicezip9code": 640553346, "telephonenumber": -427385844.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391251, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5624", "practiceaddress1": "600 W KARSCH BLVD", "practiceaddress2": "UNIT B1", "practicecity": "FARMINGTON", "practicestate": "MO", "practicezip9code": 636403342, "telephonenumber": 1442504295.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20389955, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #1941", "practiceaddress1": "1200 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "ROSWELL", "practicestate": "NM", "practicezip9code": 882035547, "telephonenumber": 1461274143.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -104.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 14.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20395553, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5565", "practiceaddress1": "10555 W OVERLAND RD", "practiceaddress2": "UNIT B1", "practicecity": "BOISE", "practicestate": "ID", "practicezip9code": 837091436, "telephonenumber": 2083212669.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.0, "longitude": -116.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391341, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5098", "practiceaddress1": "955 N STATE ST", "practiceaddress2": "UNIT B1", "practicecity": "JACKSON", "practicestate": "MS", "practicezip9code": 392022627, "telephonenumber": 1724728092.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359811, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02617", "practiceaddress1": "2329 W CLAY ST", "practiceaddress2": "UNIT B1", "practicecity": "SAINT CHARLES", "practicestate": "MO", "practicezip9code": 633012546, "telephonenumber": 2074529317.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391335, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "13242 WICKER AVE", "practiceaddress2": "WALGREENS #5727", "practicecity": "CEDAR LAKE", "practicestate": "IN", "practicezip9code": 463039348, "telephonenumber": -2101217950.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 9.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 16.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20360075, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10615", "practiceaddress1": "5345 N IH 35", "practiceaddress2": "UNIT B1", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787232428, "telephonenumber": 829562156.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 9.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391329, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4828", "practiceaddress1": "4822 CATON FARM RD", "practiceaddress2": "UNIT B1", "practicecity": "PLAINFIELD", "practicestate": "IL", "practicezip9code": 605868262, "telephonenumber": -435538710.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 136.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391317, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5301", "practiceaddress1": "33975 DATE PALM DR", "practiceaddress2": "UNIT B1", "practicecity": "CATHEDRAL CITY", "practicestate": "CA", "practicezip9code": 922344736, "telephonenumber": -987911059.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -116.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391311, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5206", "practiceaddress1": "11701 DETROIT AVE", "practiceaddress2": "UNIT B1", "practicecity": "LAKEWOOD", "practicestate": "OH", "practicezip9code": 441073041, "telephonenumber": -2132696477.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 20.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20357651, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #21268", "practiceaddress1": "76 HEIGHTS RD", "practiceaddress2": "UNIT B1", "practicecity": "DARIEN", "practicestate": "CT", "practicezip9code": 68204128, "telephonenumber": 2036558904.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359757, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13620", "practiceaddress1": "W62N190 WASHINGTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "CEDARBURG", "practicestate": "WI", "practicezip9code": 530122779, "telephonenumber": -1671214257.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359763, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7797", "practiceaddress1": "15738 W CAPITOL DR", "practiceaddress2": "UNIT B1", "practicecity": "BROOKFIELD", "practicestate": "WI", "practicezip9code": 530052201, "telephonenumber": -1667150370.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359769, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5427", "practiceaddress1": "W156N11261 PILGRIM RD", "practiceaddress2": "UNIT B1", "practicecity": "GERMANTOWN", "practicestate": "WI", "practicezip9code": 530223420, "telephonenumber": -1672427576.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 146.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359775, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "2204 NEVA RD", "practiceaddress2": "WALGREENS #6153", "practicecity": "ANTIGO", "practicestate": "WI", "practicezip9code": 544092462, "telephonenumber": -1433657162.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 13.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359883, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7882", "practiceaddress1": "603 W PINE ST", "practiceaddress2": "UNIT B1", "practicecity": "BARABOO", "practicestate": "WI", "practicezip9code": 539131040, "telephonenumber": 1788593875.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359877, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4887", "practiceaddress1": "9449 S HOWELL AVE", "practiceaddress2": "UNIT B1", "practicecity": "OAK CREEK", "practicestate": "WI", "practicezip9code": 531544431, "telephonenumber": -147318316.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359871, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3882", "practiceaddress1": "2677 S 108TH ST", "practiceaddress2": "UNIT B1", "practicecity": "WEST ALLIS", "practicestate": "WI", "practicezip9code": 532271925, "telephonenumber": -149515856.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359865, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7603", "practiceaddress1": "S79W18885 JANESVILLE RD", "practiceaddress2": "UNIT B1", "practicecity": "MUSKEGO", "practicestate": "WI", "practicezip9code": 531509390, "telephonenumber": -1668171402.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359859, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3650", "practiceaddress1": "2420 E COLONIAL DR", "practiceaddress2": "UNIT B1", "practicecity": "ORLANDO", "practicestate": "FL", "practicezip9code": 328035019, "telephonenumber": -216020515.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20391323, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #05102", "practiceaddress1": "700 W COLLEGE AVE", "practiceaddress2": "UNIT B1", "practicecity": "APPLETON", "practicestate": "WI", "practicezip9code": 549145265, "telephonenumber": 617402007.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359847, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3677", "practiceaddress1": "12101 SHELBYVILLE RD", "practiceaddress2": "UNIT B1", "practicecity": "MIDDLETOWN", "practicestate": "KY", "practicezip9code": 402431044, "telephonenumber": 727479741.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 22.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359841, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4586", "practiceaddress1": "7914 FEGENBUSH LN", "practiceaddress2": "UNIT B1", "practicecity": "LOUISVILLE", "practicestate": "KY", "practicezip9code": 402281712, "telephonenumber": 727344492.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 369.0, "practicestate_stringindexer_transform": 22.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359889, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11105", "practiceaddress1": "8802 WEST COLONIAL DR", "practiceaddress2": "UNIT B1", "practicecity": "OCOEE", "practicestate": "FL", "practicezip9code": 347616903, "telephonenumber": -219185013.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20362211, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #748", "practiceaddress1": "12295 BISCAYNE BLVD", "practiceaddress2": "UNIT B1", "practicecity": "NORTH MIAMI", "practicestate": "FL", "practicezip9code": 331812713, "telephonenumber": -1236030436.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359835, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4526", "practiceaddress1": "8000 LAKE UNDERHILL RD", "practiceaddress2": "UNIT B1", "practicecity": "ORLANDO", "practicestate": "FL", "practicezip9code": 328228231, "telephonenumber": -218386251.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359823, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7916", "practiceaddress1": "20020 CORTEZ BLVD", "practiceaddress2": "UNIT B1", "practicecity": "BROOKSVILLE", "practicestate": "FL", "practicezip9code": 346013834, "telephonenumber": -766967751.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20359817, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "9320 LACKLAND RD", "practiceaddress2": "UNIT B1", "practicecity": "OVERLAND", "practicestate": "MO", "practicezip9code": 631145458, "telephonenumber": -1150672660.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20358587, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4484", "practiceaddress1": "8790 W MCNAB RD", "practiceaddress2": "UNIT B1", "practicecity": "TAMARAC", "practicestate": "FL", "practicezip9code": 333213214, "telephonenumber": 957331416.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20363177, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4483", "practiceaddress1": "6401 W COMMERCIAL BLVD", "practiceaddress2": "UNIT B1", "practicecity": "TAMARAC", "practicestate": "FL", "practicezip9code": 333192110, "telephonenumber": 957274651.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20363027, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #05684", "practiceaddress1": "8800 W 95TH ST", "practiceaddress2": "UNIT B1", "practicecity": "HICKORY HILLS", "practicestate": "IL", "practicezip9code": 604571616, "telephonenumber": -1503951321.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20362919, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #456", "practiceaddress1": "1723 E YOUNG CIR", "practiceaddress2": "UNIT B1", "practicecity": "HOLLYWOOD", "practicestate": "FL", "practicezip9code": 330206824, "telephonenumber": 959286961.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 142.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20363087, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5882", "practiceaddress1": "4200 WINNETKA AVE N", "practiceaddress2": "UNIT B1", "practicecity": "NEW HOPE", "practicestate": "MN", "practicezip9code": 554284925, "telephonenumber": -954478126.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20363093, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13853", "practiceaddress1": "4950 COUNTY RD 101", "practiceaddress2": "UNIT B1", "practicecity": "MINNETONKA", "practicestate": "MN", "practicezip9code": 553452634, "telephonenumber": 939448974.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20363099, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16275", "practiceaddress1": "655 NICOLLET MALL", "practiceaddress2": "UNIT B1", "practicecity": "MINNEAPOLIS", "practicestate": "MN", "practicezip9code": 554021604, "telephonenumber": 1828423067.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20362931, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16057", "practiceaddress1": "5428 LYNDALE AVE S", "practiceaddress2": "UNIT B1", "practicecity": "MINNEAPOLIS", "practicestate": "MN", "practicezip9code": 554191718, "telephonenumber": 1833273825.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 5.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20362763, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN COMPANY #1228", "practiceaddress1": "780 E 9TH ST", "practiceaddress2": "UNIT B1", "practicecity": "HIALEAH", "practicestate": "FL", "practicezip9code": 33010, "telephonenumber": -1236109776.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20362925, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4441", "practiceaddress1": "1600 N NOVA RD", "practiceaddress2": "UNIT B1", "practicecity": "HOLLY HILL", "practicestate": "FL", "practicezip9code": 321172405, "telephonenumber": -432416811.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20362913, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2443", "practiceaddress1": "3705 HOLLYWOOD BLVD", "practiceaddress2": "UNIT B1", "practicecity": "HOLLYWOOD", "practicestate": "FL", "practicezip9code": 330216810, "telephonenumber": 959690195.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 142.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20361401, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3845", "practiceaddress1": "2280 N LAS VEGAS BLVD", "practiceaddress2": "UNIT B1", "practicecity": "NORTH LAS VEGAS", "practicestate": "NV", "practicezip9code": 890305803, "telephonenumber": -1563443177.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -115.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 17.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20393063, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3283", "practiceaddress1": "3325 N MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "ROCKFORD", "practicestate": "IL", "practicezip9code": 611033128, "telephonenumber": -431158508.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20393069, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02986", "practiceaddress1": "815 SUMMIT ST", "practiceaddress2": "UNIT B1", "practicecity": "ELGIN", "practicestate": "IL", "practicezip9code": 601204315, "telephonenumber": -112978745.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 178.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20393075, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3014", "practiceaddress1": "2311 OGDEN AVE", "practiceaddress2": "UNIT B1", "practicecity": "AURORA", "practicestate": "IL", "practicezip9code": 605047221, "telephonenumber": 2014016135.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 211.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20322887, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "VIRGINIA CVS PHARMACY LLC", "practiceaddress1": "23684 STRICKLAND DR", "practiceaddress2": "UNIT B1", "practicecity": "ASHBURN", "practicestate": "VA", "practicezip9code": 201480001, "telephonenumber": 1418708743.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 237.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318243, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17366", "practiceaddress1": "200 MARQUIS PKWY", "practiceaddress2": "UNIT B1", "practicecity": "WILLIAMSBURG", "practicestate": "VA", "practicezip9code": 231855371, "telephonenumber": -1017341571.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322899, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "VIRGINIA CVS PHARMACY LLC", "practiceaddress1": "4060 CAMPBELL AVE", "practiceaddress2": "UNIT B1", "practicecity": "ARLINGTON", "practicestate": "VA", "practicezip9code": 222063424, "telephonenumber": -1557574160.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 336.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20323067, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10768", "practiceaddress1": "2601 RICHMOND HWY", "practiceaddress2": "UNIT B1", "practicecity": "ALEXANDRIA", "practicestate": "VA", "practicezip9code": 22301, "telephonenumber": 1421490013.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20322929, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "VIRGINIA CVS PHARMACY LLC", "practiceaddress1": "3336 WILSON BLVD", "practiceaddress2": "UNIT B1", "practicecity": "ARLINGTON", "practicestate": "VA", "practicezip9code": 222012229, "telephonenumber": 1419069615.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 336.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20310995, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10982", "practiceaddress1": "2035 4TH AVE", "practiceaddress2": "UNIT B1", "practicecity": "SEATTLE", "practicestate": "WA", "practicezip9code": 981212414, "telephonenumber": 2064482002.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.0, "longitude": -122.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 109.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 97.0, "practicestate_stringindexer_transform": 21.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322935, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08621", "practiceaddress1": "115 N 19TH AVE", "practiceaddress2": "UNIT B1", "practicecity": "BOZEMAN", "practicestate": "MT", "practicezip9code": 597184072, "telephonenumber": -229088044.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.0, "longitude": -111.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20323007, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08622", "practiceaddress1": "1902 BROOKS ST", "practiceaddress2": "UNIT B1", "practicecity": "MISSOULA", "practicestate": "MT", "practicezip9code": 598016644, "telephonenumber": -227685916.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 46.0, "longitude": -114.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322989, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08623", "practiceaddress1": "2402 GRAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "BILLINGS", "practicestate": "MT", "practicezip9code": 591022623, "telephonenumber": -232440962.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.0, "longitude": -108.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 277.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20324543, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 08624", "practiceaddress1": "2001 10TH AVE S", "practiceaddress2": "UNIT B1", "practicecity": "GREAT FALLS", "practicestate": "MT", "practicezip9code": 594054413, "telephonenumber": -230435978.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.0, "longitude": -111.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318339, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16408", "practiceaddress1": "10100 BROOK RD", "practiceaddress2": "UNIT B1", "practicecity": "GLEN ALLEN", "practicestate": "VA", "practicezip9code": 230596514, "telephonenumber": -547309989.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20324537, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08627", "practiceaddress1": "1275 HARRISON AVE", "practiceaddress2": "UNIT B1", "practicecity": "BUTTE", "practicestate": "MT", "practicezip9code": 597014807, "telephonenumber": -227727888.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 46.0, "longitude": -112.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322947, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08618", "practiceaddress1": "1300 E PARK AVE", "practiceaddress2": "UNIT B1", "practicecity": "ANACONDA", "practicestate": "MT", "practicezip9code": 597112764, "telephonenumber": -229332030.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 46.0, "longitude": -112.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322953, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05301", "practiceaddress1": "1311 GRAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "BILLINGS", "practicestate": "MT", "practicezip9code": 591023101, "telephonenumber": -232370262.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.0, "longitude": -108.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 277.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322959, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05302", "practiceaddress1": "425 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "BILLINGS", "practicestate": "MT", "practicezip9code": 591053227, "telephonenumber": -232369435.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.0, "longitude": -108.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 277.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322965, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05305", "practiceaddress1": "307 SE 4TH ST", "practiceaddress2": "UNIT B1", "practicecity": "LAUREL", "practicestate": "MT", "practicezip9code": 590443324, "telephonenumber": -228678549.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.0, "longitude": -108.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322971, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 08944", "practiceaddress1": "617 CENTRAL AVE", "practiceaddress2": "UNIT B1", "practicecity": "BILLINGS", "practicestate": "MT", "practicezip9code": 591025814, "telephonenumber": -232402372.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.0, "longitude": -108.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 277.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322983, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04278", "practiceaddress1": "3095 N MONTANA AVE", "practiceaddress2": "UNIT B1", "practicecity": "HELENA", "practicestate": "MT", "practicezip9code": 596010552, "telephonenumber": -230533965.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 46.0, "longitude": -112.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322995, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16037", "practiceaddress1": "2601 CENTRAL AVE", "practiceaddress2": "UNIT B1", "practicecity": "BILLINGS", "practicestate": "MT", "practicezip9code": 591026652, "telephonenumber": -228445033.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.0, "longitude": -108.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 277.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322875, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "VIRGINIA CVS PHARMACY LLC", "practiceaddress1": "1020 SENECA RD", "practiceaddress2": "UNIT B1", "practicecity": "GREAT FALLS", "practicestate": "VA", "practicezip9code": 220661373, "telephonenumber": -1555493022.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322869, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #11179", "practiceaddress1": "6010 PLANK RD", "practiceaddress2": "UNIT B1", "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224076234, "telephonenumber": 1110514848.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 72.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20324531, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MONTANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08617", "practiceaddress1": "603 N MONTANA AVE", "practiceaddress2": "UNIT B1", "practicecity": "HELENA", "practicestate": "MT", "practicezip9code": 596013885, "telephonenumber": -230537496.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 46.0, "longitude": -112.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 36.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20325893, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "KANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 10327", "practiceaddress1": "681 S OHIO ST", "practiceaddress2": "UNIT B1", "practicecity": "SALINA", "practicestate": "KS", "practicezip9code": 674012447, "telephonenumber": -736843974.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 34.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20322473, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #18028", "practiceaddress1": "1060 WOODS MILL PLZ", "practiceaddress2": "UNIT B1", "practicecity": "CHESTERFIELD", "practicestate": "MO", "practicezip9code": 630170606, "telephonenumber": 2067305474.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322917, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 10937", "practiceaddress1": "452 WYTHE CREEK RD", "practiceaddress2": "UNIT B1", "practicecity": "POQUOSON", "practicestate": "VA", "practicezip9code": 236621936, "telephonenumber": -1017622591.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20322911, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10498", "practiceaddress1": "1788 N PIERCE ST", "practiceaddress2": "UNIT B1", "practicecity": "ARLINGTON", "practicestate": "VA", "practicezip9code": 222092521, "telephonenumber": 1421489755.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 336.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322863, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY#10320", "practiceaddress1": "3401 CHARLES STREET", "practiceaddress2": "UNIT B1", "practicecity": "FALLS CHURCH", "practicestate": "VA", "practicezip9code": 220411901, "telephonenumber": -1550601148.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322803, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17110", "practiceaddress1": "4310 FORTUNA CENTER PLZ", "practiceaddress2": "UNIT B1", "practicecity": "DUMFRIES", "practicestate": "VA", "practicezip9code": 220251538, "telephonenumber": -1534068460.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318315, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16433", "practiceaddress1": "1245 N MILITARY HWY", "practiceaddress2": "UNIT B1", "practicecity": "NORFOLK", "practicestate": "VA", "practicezip9code": 235022228, "telephonenumber": -1015315236.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 203.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318369, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17325", "practiceaddress1": "15341 MONTANUS DR", "practiceaddress2": "UNIT B1", "practicecity": "CULPEPER", "practicestate": "VA", "practicezip9code": 227012523, "telephonenumber": 1113329338.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318363, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17443", "practiceaddress1": "191 MARKET ST", "practiceaddress2": "UNIT B1", "practicecity": "WINCHESTER", "practicestate": "VA", "practicezip9code": 226034750, "telephonenumber": 1110487665.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.0, "longitude": -78.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 197.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318357, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16405", "practiceaddress1": "721 SOUTHPARK BLVD", "practiceaddress2": "UNIT B1", "practicecity": "COLONIAL HEIGHTS", "practicestate": "VA", "practicezip9code": 238343606, "telephonenumber": -544732312.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318105, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17467", "practiceaddress1": "155 HOLT GARRISON PKWY", "practiceaddress2": "UNIT B1", "practicecity": "DANVILLE", "practicestate": "VA", "practicezip9code": 245405947, "telephonenumber": 53032655.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.0, "longitude": -79.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 17.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318351, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16406", "practiceaddress1": "2530 WEIR RD", "practiceaddress2": "UNIT B1", "practicecity": "CHESTER", "practicestate": "VA", "practicezip9code": 238315350, "telephonenumber": -542244596.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322977, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16409", "practiceaddress1": "1316 GREENBRIER PKWY", "practiceaddress2": "UNIT B1", "practicecity": "CHESAPEAKE", "practicestate": "VA", "practicezip9code": 233200605, "telephonenumber": -1014458790.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318231, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17255", "practiceaddress1": "25 S GATEWAY DR", "practiceaddress2": "UNIT B1", "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224061228, "telephonenumber": 1108777525.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 72.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20462891, "acceptsassignement": 1, "participationbegindate": 1484006400000, "businessname": "FAMILY VISION CENTER OF LA CROSSE", "practicename": "FAMILY VISION CENTER OF LA CROSSE", "practiceaddress1": "3424 MORMON COULEE RD", "practiceaddress2": "STE A", "practicecity": "LA CROSSE", "practicestate": "WI", "practicezip9code": 546016703, "telephonenumber": 1792917004.0, "specialitieslist": "Optometrist|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 43.0, "longitude": -91.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 10, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 2.0, "practicecity_stringindexer_transform": 362.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 14.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 11.0}, {"provider_id": 21609807, "acceptsassignement": 0, "participationbegindate": 1483920000000, "businessname": "HMB IV PHARMACY MANAGEMENT LLC", "practicename": "HMB IV PHARMACY MANAGEMENT LLC", "practiceaddress1": "1250 WATERS PLACE", "practiceaddress2": "TOWER 2", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 10461, "telephonenumber": -1400176818.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 9, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 6.0, "practicecity_stringindexer_transform": 3.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 38.0}, {"provider_id": 20462897, "acceptsassignement": 1, "participationbegindate": 1483920000000, "businessname": "OWEN PHARMACIST GROUP LLC", "practicename": "OWEN PHARMACIST GROUP LLC", "practiceaddress1": "136 JESSICA LN", "practiceaddress2": "STE E", "practicecity": "OLIVE HILL", "practicestate": "KY", "practicezip9code": 411644108, "telephonenumber": 1767894733.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "latitude": 38.0, "longitude": -83.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 9, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 4.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 22.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 15.0}, {"provider_id": 20462903, "acceptsassignement": 0, "participationbegindate": 1483920000000, "businessname": "S-COMM, INC.", "practicename": "S-COMM, INC.", "practiceaddress1": "6238 HADLEY ST", "practiceaddress2": "UNIT B1", "practicecity": "RAYTOWN", "practicestate": "MO", "practicezip9code": 641334112, "telephonenumber": -426427584.0, "specialitieslist": "Medical Supply Company Other", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Speech Generating Devices", "latitude": 39.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 9, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 3.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 13.0}, {"provider_id": 20462921, "acceptsassignement": 1, "participationbegindate": 1483660800000, "businessname": "GLO AMEDS DME, LLC", "practicename": "GLO AMEDS DME", "practiceaddress1": "5722 GATEWOOD AVE", "practiceaddress2": "UNIT B1", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770532021, "telephonenumber": -831773129.0, "specialitieslist": "Medical Supply Company Other", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 15.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 3.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 27.0}, {"provider_id": 20462915, "acceptsassignement": 0, "participationbegindate": 1483660800000, "businessname": "FOBI COMPREHENSIVE PHARMACY INC", "practicename": "FOBI COMPREHENSIVE PHARMACY #1", "practiceaddress1": "7922 ROSECRANS AVE", "practiceaddress2": "STE P2", "practicecity": "PARAMOUNT", "practicestate": "CA", "practicezip9code": 907236028, "telephonenumber": 1331338404.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Nebulizer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)", "latitude": 33.0, "longitude": -118.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 29.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 43.0}, {"provider_id": 20462927, "acceptsassignement": 0, "participationbegindate": 1483660800000, "businessname": "TJ PHARMACY INC", "practicename": "NU-CASSEL PHARMACY", "practiceaddress1": "821 PROSPECT AVE", "practiceaddress2": "UNIT 8", "practicecity": "WESTBURY", "practicestate": "NY", "practicezip9code": 115903777, "telephonenumber": 867842378.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 27.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20462933, "acceptsassignement": 0, "participationbegindate": 1483660800000, "businessname": "BRONX SPECIALTY PHARMACY INC", "practicename": "BRONX SPECIALTY PHARMACY INC", "practiceaddress1": "940A SOUTHERN BLVD", "practiceaddress2": "UNIT B1", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104593402, "telephonenumber": -1406651792.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 3.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20462939, "acceptsassignement": 0, "participationbegindate": 1483574400000, "businessname": "ST KEROLLOS PHARMACY INC", "practicename": "CARSON DISCOUNT PHARMACY", "practiceaddress1": "111 E CARSON ST", "practiceaddress2": "STE B", "practicecity": "CARSON", "practicestate": "CA", "practicezip9code": 907457722, "telephonenumber": -1186616296.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 33.0, "longitude": -118.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 5, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 1.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 22.0}, {"provider_id": 20462945, "acceptsassignement": 0, "participationbegindate": 1483574400000, "businessname": "ST KEROLLOS PHARMACY INC", "practicename": "ST KEROLLOS PHARMACY INC", "practiceaddress1": "4566 E FLORENCE AVE", "practiceaddress2": "STE 4", "practicecity": "CUDAHY", "practicestate": "CA", "practicezip9code": 902014345, "telephonenumber": -1059345718.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.0, "longitude": -118.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 5, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 5.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 1.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 19.0}, {"provider_id": 20462963, "acceptsassignement": 1, "participationbegindate": 1483488000000, "businessname": "EYE CARE ASSOCIATES OF MARIETTA LLC", "practicename": "EYE CARE ASSOCIATES OF MARIETTA LLC", "practiceaddress1": "111 S 3RD ST", "practiceaddress2": "UNIT B1", "practicecity": "MARIETTA", "practicestate": "OH", "practicezip9code": 457503111, "telephonenumber": -1180310311.0, "specialitieslist": "Optometrist", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 39.0, "longitude": -81.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 7.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 11.0}, {"provider_id": 20462969, "acceptsassignement": 0, "participationbegindate": 1483401600000, "businessname": "ABITACARE LLC", "practicename": "VITAL CARE RX", "practiceaddress1": "1501 23RD AVE", "practiceaddress2": "STE B", "practicecity": "MERIDIAN", "practicestate": "MS", "practicezip9code": 393014027, "telephonenumber": 182357132.0, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies", "latitude": 32.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 3, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 1.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 4.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 26.0}, {"provider_id": 20464235, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "RANDALLS FOOD & DRUGS LP", "practicename": "TOM THUMB PHARMACY #1785", "practiceaddress1": "1075 W FM 3040", "practiceaddress2": "UNIT B1", "practicecity": "LEWISVILLE", "practicestate": "TX", "practicezip9code": 750677904, "telephonenumber": 2144883068.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 33.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 5.0}, {"provider_id": 20464619, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #2640", "practiceaddress1": "13308 MERIDIAN E", "practiceaddress2": "UNIT B1", "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983735612, "telephonenumber": -1760615554.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 47.0, "longitude": -122.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 21.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 5.0}, {"provider_id": 20464637, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "SAFEWAY INC", "practicename": "SAFEWAY PHARMACY #1748", "practiceaddress1": "5137 E BASELINE RD", "practiceaddress2": "UNIT B1", "practicecity": "GILBERT", "practicestate": "AZ", "practicezip9code": 852342967, "telephonenumber": 508288560.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 33.0, "longitude": -111.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 31.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 9.0}, {"provider_id": 20467655, "acceptsassignement": 1, "participationbegindate": 1483228800000, "businessname": "COMANCHE COUNTY HOSPITAL AUTHORITY", "practicename": "GREAT PLAINS PHARMACY", "practiceaddress1": "3201 W GORE BLVD", "practiceaddress2": "STE A", "practicecity": "LAWTON", "practicestate": "OK", "practicezip9code": 735056350, "telephonenumber": 1510888105.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.0, "longitude": -98.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 2.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 18.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20463287, "acceptsassignement": 1, "participationbegindate": 1483228800000, "businessname": "PROSTHETIC CENTER LLC", "practicename": "THE PROSTHETIC CENTER", "practiceaddress1": "8440 E MCDONALD DR", "practiceaddress2": "STE B", "practicecity": "SCOTTSDALE", "practicestate": "AZ", "practicezip9code": 852506300, "telephonenumber": 514543304.0, "specialitieslist": "Prosthetic Personnel", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Limb Prostheses", "latitude": 33.0, "longitude": -111.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 1.0, "practicecity_stringindexer_transform": 102.0, "practicestate_stringindexer_transform": 31.0, "specialitieslist_stringindexer_transform": 8.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 31.0}, {"provider_id": 20463089, "acceptsassignement": 0, "participationbegindate": 1483228800000, "businessname": "RANDALLS FOOD & DRUGS LP", "practicename": "TOM THUMB PHARMACY #3617", "practiceaddress1": "2611 W PARK ROW", "practiceaddress2": "UNIT B1", "practicecity": "ARLINGTON", "practicestate": "TX", "practicezip9code": 760132257, "telephonenumber": -415340468.0, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 32.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 336.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 2.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 5.0}, {"provider_id": 20468363, "acceptsassignement": 1, "participationbegindate": 1483228800000, "businessname": "MAYO CLINIC HEALTH SYSTEM-NORTHWEST WISCONSIN REGION INC", "practicename": "MAYO CLINIC HEALTH SYSTEM PHARMACY", "practiceaddress1": "1222 E WOODLAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "BARRON", "practicestate": "WI", "practicezip9code": 548121765, "telephonenumber": -1434562492.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 45.0, "longitude": -91.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2017, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20322857, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "VIRGINIA CVS PHARMACY LLC", "practiceaddress1": "301 S MAIN ST", "practiceaddress2": "STE B", "practicecity": "STUART", "practicestate": "VA", "practicezip9code": 241715399, "telephonenumber": -1528022710.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 1.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322809, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17281", "practiceaddress1": "233 CARMICHAEL WAY", "practiceaddress2": "UNIT B1", "practicecity": "CHESAPEAKE", "practicestate": "VA", "practicezip9code": 233222182, "telephonenumber": -1015717951.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20318111, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16477", "practiceaddress1": "12130 JEFFERSON AVE", "practiceaddress2": "UNIT B1", "practicecity": "NEWPORT NEWS", "practicestate": "VA", "practicezip9code": 236026908, "telephonenumber": -1011115221.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322815, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10746", "practiceaddress1": "1700 SEMINOLE TRL", "practiceaddress2": "UNIT B1", "practicecity": "CHARLOTTESVILLE", "practicestate": "VA", "practicezip9code": 229015508, "telephonenumber": 47482707.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -78.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 321.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322821, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY#10992", "practiceaddress1": "17307 HULL STREET RD", "practiceaddress2": "UNIT B1", "practicecity": "MOSELEY", "practicestate": "VA", "practicezip9code": 231201421, "telephonenumber": -543537211.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322827, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 10440", "practiceaddress1": "709 E MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "FLOYD", "practicestate": "VA", "practicezip9code": 240912621, "telephonenumber": 1112484881.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322833, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY#10990", "practiceaddress1": "12455 W BROAD ST", "practiceaddress2": "UNIT B1", "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232337667, "telephonenumber": -546293603.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 37.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322839, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #11056", "practiceaddress1": "2775 GODWIN BLVD", "practiceaddress2": "UNIT B1", "practicecity": "SUFFOLK", "practicestate": "VA", "practicezip9code": 234348037, "telephonenumber": -1014544523.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322845, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY#10900", "practiceaddress1": "2441 EISENHOWER AVE", "practiceaddress2": "UNIT B1", "practicecity": "ALEXANDRIA", "practicestate": "VA", "practicezip9code": 223144684, "telephonenumber": 1424735114.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322851, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10251", "practiceaddress1": "2704 OAKLAWN BLVD", "practiceaddress2": "UNIT B1", "practicecity": "HOPEWELL", "practicestate": "VA", "practicezip9code": 238604935, "telephonenumber": -545347388.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20322797, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17084", "practiceaddress1": "7235 BELL CREEK RD", "practiceaddress2": "UNIT B1", "practicecity": "MECHANICSVILLE", "practicestate": "VA", "practicezip9code": 231113541, "telephonenumber": -544335761.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -77.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 9.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20325881, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "KANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10070", "practiceaddress1": "3149 E HARRY ST", "practiceaddress2": "UNIT B1", "practicecity": "WICHITA", "practicestate": "KS", "practicezip9code": 672114016, "telephonenumber": -1128105713.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.0, "longitude": -97.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 34.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20488991, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST , LP", "practiceaddress1": "2440 N LEBANON ST", "practiceaddress2": "UNIT B1", "practicecity": "LEBANON", "practicestate": "IN", "practicezip9code": 460521100, "telephonenumber": -935108443.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 40.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 16.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20492345, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-0326", "practiceaddress1": "1180 W 19TH ST", "practiceaddress2": "UNIT B1", "practicecity": "HIGGINSVILLE", "practicestate": "MO", "practicezip9code": 640371557, "telephonenumber": -1984086805.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 7.0}, {"provider_id": 20488997, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-0234", "practiceaddress1": "8301 N CHURCH RD", "practiceaddress2": "UNIT B1", "practicecity": "KANSAS CITY", "practicestate": "MO", "practicezip9code": 641581106, "telephonenumber": -422010362.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489999, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-0560", "practiceaddress1": "4201 N BELT HWY", "practiceaddress2": "UNIT B1", "practicecity": "SAINT JOSEPH", "practicestate": "MO", "practicezip9code": 645061299, "telephonenumber": -427596822.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489927, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-0267", "practiceaddress1": "1212 S MADISON ST", "practiceaddress2": "UNIT B1", "practicecity": "WEBB CITY", "practicestate": "MO", "practicezip9code": 648702834, "telephonenumber": -118231673.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 37.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489867, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-0088", "practiceaddress1": "2100 N MAIN AVE", "practiceaddress2": "UNIT B1", "practicecity": "MOUNTAIN GROVE", "practicestate": "MO", "practicezip9code": 657112438, "telephonenumber": -115703167.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 37.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489921, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-0048", "practiceaddress1": "885 E HIGHWAY 60", "practiceaddress2": "UNIT B1", "practicecity": "MONETT", "practicestate": "MO", "practicezip9code": 657089367, "telephonenumber": -122611316.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 36.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489819, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-1188", "practiceaddress1": "11900 SAINT CHARLES ROCK RD", "practiceaddress2": "UNIT B1", "practicecity": "BRIDGETON", "practicestate": "MO", "practicezip9code": 630442612, "telephonenumber": -1152049186.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20490527, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL MART PHARMACY 10-1639", "practiceaddress1": "2395 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "ROCHESTER", "practicestate": "IN", "practicezip9code": 469759137, "telephonenumber": 1447272186.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 41.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 21.0, "practicestate_stringindexer_transform": 16.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 7.0}, {"provider_id": 20489825, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-4553", "practiceaddress1": "11601 E US 40 HWY", "practiceaddress2": "UNIT B1", "practicecity": "KANSAS CITY", "practicestate": "MO", "practicezip9code": 641331908, "telephonenumber": -426803919.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 39.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489837, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-1007", "practiceaddress1": "2401 US HWY 14 EAST", "practiceaddress2": "UNIT B1", "practicecity": "RICHLAND CENTER", "practicestate": "WI", "practicezip9code": 535812996, "telephonenumber": 1791511645.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 43.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 19.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20492105, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST , LP", "practiceaddress1": "4024 ELKHART RD", "practiceaddress2": "STE 2", "practicecity": "GOSHEN", "practicestate": "IN", "practicezip9code": 465265801, "telephonenumber": 1453789625.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 41.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 3.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 16.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 8.0}, {"provider_id": 20489843, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART PHARMACY 10-2213", "practiceaddress1": "3270 TELEGRAPH RD", "practiceaddress2": "UNIT B1", "practicecity": "SAINT LOUIS", "practicestate": "MO", "practicezip9code": 631255565, "telephonenumber": -1146508536.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20489903, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-1589", "practiceaddress1": "16205 MILITARY TRL", "practiceaddress2": "UNIT B1", "practicecity": "DELRAY BEACH", "practicestate": "FL", "practicezip9code": 334846503, "telephonenumber": 1319991035.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 26.0, "longitude": -80.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 8.0}, {"provider_id": 20502257, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WAL-MART STORES EAST, LP", "practiceaddress1": "5245 RANGELINE SERVICE RD S", "practiceaddress2": "UNIT B1", "practicecity": "MOBILE", "practicestate": "AL", "practicezip9code": 366199541, "telephonenumber": -1778299319.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 30.0, "longitude": -88.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 341.0, "practicestate_stringindexer_transform": 20.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20502251, "acceptsassignement": 0, "participationbegindate": 1404172800000, "businessname": "WAL-MART STORES EAST, LP", "practicename": "WALMART PHARMACY 10-0309", "practiceaddress1": "3005 CHARITY ST", "practiceaddress2": "UNIT B1", "practicecity": "ABBEVILLE", "practicestate": "LA", "practicezip9code": 705104140, "telephonenumber": -916033219.0, "specialitieslist": "Pharmacy|Optician", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 29.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 7, "participationbegindate_year": 2014, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 26.0, "specialitieslist_stringindexer_transform": 1.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 2.0}, {"provider_id": 20324261, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17189", "practiceaddress1": "7955 HWY N", "practiceaddress2": "UNIT B1", "practicecity": "DARDENNE PRAIRIE", "practicestate": "MO", "practicezip9code": 633687382, "telephonenumber": 2071285525.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20323607, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10261", "practiceaddress1": "12380 SAINT CHARLES ROCK RD", "practiceaddress2": "UNIT B1", "practicecity": "BRIDGETON", "practicestate": "MO", "practicezip9code": 630442504, "telephonenumber": -1147587108.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20323955, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 06282", "practiceaddress1": "1749 WOODSTONE DR", "practiceaddress2": "UNIT B1", "practicecity": "SAINT PETERS", "practicestate": "MO", "practicezip9code": 633767404, "telephonenumber": 2069503933.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20324393, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10773", "practiceaddress1": "2120 W OSAGE ST", "practiceaddress2": "UNIT B1", "practicecity": "PACIFIC", "practicestate": "MO", "practicezip9code": 630691101, "telephonenumber": 2067607364.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1.0}, {"provider_id": 20323643, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10345", "practiceaddress1": "3603 MCMASTERS AVE", "practiceaddress2": "UNIT B1", "practicecity": "HANNIBAL", "practicestate": "MO", "practicezip9code": 634012541, "telephonenumber": 1442225826.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.0, "longitude": -91.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20324381, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10135", "practiceaddress1": "9433 MANCHESTER RD", "practiceaddress2": "UNIT B1", "practicecity": "ST. LOUIS", "practicestate": "MO", "practicezip9code": 631191456, "telephonenumber": -1145354015.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20323649, "acceptsassignement": 1, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10325", "practiceaddress1": "8101 CLAYTON RD", "practiceaddress2": "UNIT B1", "practicecity": "CLAYTON", "practicestate": "MO", "practicezip9code": 631171103, "telephonenumber": -1147705172.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3.0}, {"provider_id": 20392715, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN #15571", "practiceaddress1": "4501 AIRLINE DR", "practiceaddress2": "UNIT B1", "practicecity": "METAIRIE", "practicestate": "LA", "practicezip9code": 700015646, "telephonenumber": 753887571.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 26.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20393093, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3180", "practiceaddress1": "101 FLORIDA AVE SE", "practiceaddress2": "UNIT B1", "practicecity": "DENHAM SPRINGS", "practicestate": "LA", "practicezip9code": 707263735, "telephonenumber": -2038297202.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 26.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20369225, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9467", "practiceaddress1": "880 S NEOSHO BLVD", "practiceaddress2": "UNIT B1", "practicecity": "NEOSHO", "practicestate": "MO", "practicezip9code": 648502052, "telephonenumber": -120455761.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -94.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20369135, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9485", "practiceaddress1": "300 KEYSER AVE", "practiceaddress2": "UNIT B1", "practicecity": "NATCHITOCHES", "practicestate": "LA", "practicezip9code": 714575802, "telephonenumber": -1111396845.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 31.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 26.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20369213, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9608", "practiceaddress1": "6250 PASEO DEL NORTE NE", "practiceaddress2": "UNIT B1", "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871131712, "telephonenumber": 757205096.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -106.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 14.0, "practicestate_stringindexer_transform": 14.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20369207, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9577", "practiceaddress1": "7776 COX LN", "practiceaddress2": "UNIT B1", "practicecity": "WEST CHESTER", "practicestate": "OH", "practicezip9code": 450696548, "telephonenumber": 842631865.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.0, "longitude": -84.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 35.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20354321, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "188 UNION ST", "practiceaddress2": "UNIT B1", "practicecity": "VERNON", "practicestate": "CT", "practicezip9code": 60662429, "telephonenumber": 19026893.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 38.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20354501, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9347", "practiceaddress1": "12659 S RIDGELAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "PALOS HEIGHTS", "practicestate": "IL", "practicezip9code": 604631871, "telephonenumber": -1506084374.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 4.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20354363, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7933", "practiceaddress1": "15514 W WADDELL RD", "practiceaddress2": "UNIT B1", "practicecity": "SURPRISE", "practicestate": "AZ", "practicezip9code": 853795167, "telephonenumber": 1937183248.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -112.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 31.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20366789, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9064", "practiceaddress1": "806 NISSAN DR", "practiceaddress2": "UNIT B1", "practicecity": "SMYRNA", "practicestate": "TN", "practicezip9code": 371674447, "telephonenumber": 1858590250.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 28.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20414009, "acceptsassignement": 1, "participationbegindate": 1589500800000, "businessname": "PAYNE & PITTS, LLC", "practicename": "PAYNE & PITTS, LLC", "practiceaddress1": "602 ALABAMA AVE", "practiceaddress2": "UNIT B1", "practicecity": "BRIDGEPORT", "practicestate": "AL", "practicezip9code": 357407513, "telephonenumber": -1730009236.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Nebulizer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Enteral Nutrients|Nebulizer Equipment and/or Supplies", "latitude": 34.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 20.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 28.0}, {"provider_id": 34356956, "acceptsassignement": 0, "participationbegindate": 1589500800000, "businessname": "EYETECH DIGITAL SYSTEMS INC", "practicename": "EYETECH DIGITAL SYSTEMS INC", "practiceaddress1": "2141 E BROADWAY RD", "practiceaddress2": "STE 202", "practicecity": "TEMPE", "practicestate": "AZ", "practicezip9code": 852821895, "telephonenumber": 295459240.0, "specialitieslist": "Medical Supply Company Other", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Speech Generating Devices", "latitude": 33.0, "longitude": -111.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 10.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 31.0, "specialitieslist_stringindexer_transform": 3.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 13.0}, {"provider_id": 20414027, "acceptsassignement": 0, "participationbegindate": 1589414400000, "businessname": "WONDERFUL RX PHARMACY INC", "practicename": "WONDERFUL RX PHARMACY INC", "practiceaddress1": "52 JERICHO TPKE", "practiceaddress2": "UNIT B1", "practicecity": "MINEOLA", "practicestate": "NY", "practicezip9code": 115012938, "telephonenumber": 869197585.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 14, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20414033, "acceptsassignement": 0, "participationbegindate": 1589414400000, "businessname": "BEYOND MEDICAL SUPPLIES LLC", "practicename": "BEYOND MEDICAL SUPPLIES LLC", "practiceaddress1": "120 BERGEN AVE", "practiceaddress2": "UNIT B1", "practicecity": "BERGENFIELD", "practicestate": "NJ", "practicezip9code": 76212423, "telephonenumber": 588605711.0, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Urological Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 14, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 11.0, "specialitieslist_stringindexer_transform": 9.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 44.0}, {"provider_id": 20414021, "acceptsassignement": 0, "participationbegindate": 1589414400000, "businessname": "TJ PHARMACY LLC", "practicename": "TJ PHARMACY LLC", "practiceaddress1": "3900 S GRAND BLVD", "practiceaddress2": "UNIT B1", "practicecity": "SAINT LOUIS", "practicestate": "MO", "practicezip9code": 631183414, "telephonenumber": -1146217175.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 14, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 30.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20414039, "acceptsassignement": 1, "participationbegindate": 1589328000000, "businessname": "SAVE-RITE PHARMACY INC", "practicename": "SAVE-RITE PHARMACY INC.,", "practiceaddress1": "7402 N 56TH ST", "practiceaddress2": "STE 907", "practicecity": "TAMPA", "practicestate": "FL", "practicezip9code": 336177724, "telephonenumber": -456300556.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 28.0, "longitude": -82.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 13, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 25.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 8.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20414045, "acceptsassignement": 0, "participationbegindate": 1589241600000, "businessname": "SYRACUSE COMMUNITY HEALTH PHARMACY LLC", "practicename": "SYRACUSE COMMUNITY HEALTH PHARMACY", "practiceaddress1": "819 S SALINA ST", "practiceaddress2": "STE B", "practicecity": "SYRACUSE", "practicestate": "NY", "practicezip9code": 132023527, "telephonenumber": -1138255396.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Antiemetic Drugs", "latitude": 43.0, "longitude": -76.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 12, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 1.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 51.0}, {"provider_id": 20414087, "acceptsassignement": 1, "participationbegindate": 1589155200000, "businessname": "86 BOBO PHARMACY INC", "practicename": "86 BOBO PHARMACY INC", "practiceaddress1": "2170 86TH ST", "practiceaddress2": "UNIT B1", "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112143213, "telephonenumber": -819091021.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 11, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 5.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20414081, "acceptsassignement": 1, "participationbegindate": 1589155200000, "businessname": "GENEFIC SPECIALTY RX INC", "practicename": "GENEFIC SPECIALTY RX INC", "practiceaddress1": "2577 MALL RD", "practiceaddress2": "STE B", "practicecity": "FLORENCE", "practicestate": "AL", "practicezip9code": 356301684, "telephonenumber": -1732504863.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 34.0, "longitude": -87.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 11, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 1.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 20.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 36.0}, {"provider_id": 20414075, "acceptsassignement": 1, "participationbegindate": 1589155200000, "businessname": "JANE'S PHARMACY, LLC", "practicename": "JANES PHARMACY", "practiceaddress1": "950 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "MUNFORDVILLE", "practicestate": "KY", "practicezip9code": 427659435, "telephonenumber": -1589726086.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 37.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 11, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 22.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20414069, "acceptsassignement": 1, "participationbegindate": 1589155200000, "businessname": "DIXIE PHARMACY-2, LLC", "practicename": "DIXIE PHARMACY", "practiceaddress1": "1311 RING RD", "practiceaddress2": "STE 107", "practicecity": "ELIZABETHTOWN", "practicestate": "KY", "practicezip9code": 427018941, "telephonenumber": -1586246708.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 37.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 11, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 21.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 22.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4.0}, {"provider_id": 20414063, "acceptsassignement": 0, "participationbegindate": 1589155200000, "businessname": "PHARMKO INC", "practicename": "PHARMKO INC", "practiceaddress1": "298 CENTRAL AVE", "practiceaddress2": "UNIT B1", "practicecity": "LAWRENCE", "practicestate": "NY", "practicezip9code": 115591606, "telephonenumber": 1320080588.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 11, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 47.0}, {"provider_id": 20414099, "acceptsassignement": 0, "participationbegindate": 1588896000000, "businessname": "MAGNOLIA HEALTHCARE PA LLC", "practicename": "THERAPEUTIC HEALTHCARE", "practiceaddress1": "2519 N 7TH ST", "practiceaddress2": "STE 4", "practicecity": "WEST MONROE", "practicestate": "LA", "practicezip9code": 712915170, "telephonenumber": -1108420136.0, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.0, "longitude": -92.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 5.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 26.0, "specialitieslist_stringindexer_transform": 11.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 30.0}, {"provider_id": 20414105, "acceptsassignement": 1, "participationbegindate": 1588896000000, "businessname": "MYRTLE MEDS INC", "practicename": "MYRTLE MEDS INC", "practiceaddress1": "7617 MYRTLE AVE", "practiceaddress2": "UNIT B1", "practicecity": "GLENDALE", "practicestate": "NY", "practicezip9code": 113857446, "telephonenumber": -1403431066.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.0, "longitude": -73.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 297.0, "practicestate_stringindexer_transform": 3.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 41.0}, {"provider_id": 20414117, "acceptsassignement": 1, "participationbegindate": 1588809600000, "businessname": "KINETIC PROSTHETICS & MEDICAL SUPPLY", "practicename": "KINETIC PROSTHETICS & MEDICAL SUPPL", "practiceaddress1": "3595 HIRAM DOUGLASVILLE HWY", "practiceaddress2": "STE 102", "practicecity": "HIRAM", "practicestate": "GA", "practicezip9code": 301414963, "telephonenumber": -1803396222.0, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Traction Equipment|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 33.0, "longitude": -84.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 7, "participationbegindate_month": 5, "participationbegindate_year": 2020, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 16.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 15.0, "specialitieslist_stringindexer_transform": 5.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 35.0}, {"provider_id": 20369801, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #09471", "practiceaddress1": "5501 W OREM DR", "practiceaddress2": "UNIT B1", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770851253, "telephonenumber": -1452645186.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.0, "longitude": -95.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 15.0, "practicestate_stringindexer_transform": 2.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20369807, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9402", "practiceaddress1": "3341 HALLS FERRY RD", "practiceaddress2": "UNIT B1", "practicecity": "VICKSBURG", "practicestate": "MS", "practicezip9code": 391805338, "telephonenumber": 1721652044.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.0, "longitude": -90.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20369813, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9144", "practiceaddress1": "747 HIGHWAY 1 S", "practiceaddress2": "UNIT B1", "practicecity": "GREENVILLE", "practicestate": "MS", "practicezip9code": 387015958, "telephonenumber": -1966583163.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.0, "longitude": -91.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 10.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20367305, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9397", "practiceaddress1": "765 E GLENN AVE", "practiceaddress2": "UNIT B1", "practicecity": "AUBURN", "practicestate": "AL", "practicezip9code": 368305151, "telephonenumber": -946750758.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.0, "longitude": -85.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 275.0, "practicestate_stringindexer_transform": 20.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20367299, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7703", "practiceaddress1": "54 CENTER SQ", "practiceaddress2": "UNIT B1", "practicecity": "EAST LONGMEADOW", "practicestate": "MA", "practicezip9code": 10282446, "telephonenumber": -159697632.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -72.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 215.0, "practicestate_stringindexer_transform": 0.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20367293, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9079", "practiceaddress1": "1615 N SAGINAW RD", "practiceaddress2": "UNIT B1", "practicecity": "MIDLAND", "practicestate": "MI", "practicezip9code": 486407237, "telephonenumber": 1308387899.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.0, "longitude": -84.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 33.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20367335, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7888", "practiceaddress1": "2985 CROOKS RD", "practiceaddress2": "UNIT B1", "practicecity": "ROCHESTER HILLS", "practicestate": "MI", "practicezip9code": 483093663, "telephonenumber": -1812036669.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0, "longitude": -83.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 33.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20366771, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "3100 N MARKET ST", "practiceaddress2": "UNIT B1", "practicecity": "SHREVEPORT", "practicestate": "LA", "practicezip9code": 711074005, "telephonenumber": -1108156213.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.0, "longitude": -93.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 26.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20366777, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7792", "practiceaddress1": "7994 US HIGHWAY 51 N", "practiceaddress2": "UNIT B1", "practicecity": "MILLINGTON", "practicestate": "TN", "practicezip9code": 380531909, "telephonenumber": 428798781.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.0, "longitude": -89.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 28.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}, {"provider_id": 20366783, "acceptsassignement": 1, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7316", "practiceaddress1": "3880 DICKERSON PIKE", "practiceaddress2": "UNIT B1", "practicecity": "NASHVILLE", "practicestate": "TN", "practicezip9code": 372071321, "telephonenumber": 1863718337.0, "specialitieslist": "Pharmacy", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0, "longitude": -86.0, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 3, "participationbegindate_year": 2022, "businessname_stringindexer_transform": 127.0, "practicename_stringindexer_transform": 467.0, "practiceaddress1_stringindexer_transform": 500.0, "practiceaddress2_stringindexer_transform": 0.0, "practicecity_stringindexer_transform": 393.0, "practicestate_stringindexer_transform": 28.0, "specialitieslist_stringindexer_transform": 0.0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 0.0}], "FE": [{"transformationsData": [{"transformation_label": "novalue"}], "feature": "provider_id", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "20494650.01", "stddev": "1133930.19", "min": "20310995", "max": "34356956", "missing": "0"}, "updatedLabel": "provider_id"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "acceptsassignement", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.92", "stddev": "0.27", "min": "0", "max": "1", "missing": "0"}, "updatedLabel": "acceptsassignement"}, {"transformationsData": [{"feature_label": "participationbegindate", "transformation_label": "Extract Date"}], "feature": "participationbegindate", "type": "date", "selected": true, "replaceby": "random", "stats": {"count": "", "mean": "", "stddev": "", "min": "", "max": "", "missing": "0"}, "transformation": [{"transformation": "Extract Date", "selectedAsDefault": 1}], "generated": false, "updatedLabel": "participationbegindate"}, {"transformationsData": [{"feature_label": "businessname", "transformation_label": "String Indexer"}], "feature": "businessname", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC", "missing": "0", "distinct": "127"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "businessname"}, {"transformationsData": [{"feature_label": "practicename", "transformation_label": "String Indexer"}], "feature": "practicename", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC", "missing": "0", "distinct": "467"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicename"}, {"transformationsData": [{"feature_label": "practiceaddress1", "transformation_label": "String Indexer"}], "feature": "practiceaddress1", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "1 S MAIN ST", "max": "ONE DAVIS SQ", "missing": "0", "distinct": "500"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress1"}, {"transformationsData": [{"feature_label": "practiceaddress2", "transformation_label": "String Indexer"}], "feature": "practiceaddress2", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "42", "mean": "", "stddev": "", "min": "# 36", "max": "WALGREENS #6153", "missing": "458", "distinct": "29"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress2"}, {"transformationsData": [{"feature_label": "practicecity", "transformation_label": "String Indexer"}], "feature": "practicecity", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "ABBEVILLE", "max": "WOODBRIDGE", "missing": "0", "distinct": "397"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicecity"}, {"transformationsData": [{"feature_label": "practicestate", "transformation_label": "String Indexer"}], "feature": "practicestate", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "AK", "max": "WV", "missing": "0", "distinct": "43"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicestate"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "practicezip9code", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "424344798.64", "stddev": "358451425.83", "min": "2472", "max": "981993202", "missing": "0"}, "updatedLabel": "practicezip9code"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "telephonenumber", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "6144013752076.46", "stddev": "136516631952037.42", "min": "2014881230", "max": "3052621292106456", "missing": "0"}, "updatedLabel": "telephonenumber"}, {"transformationsData": [{"feature_label": "specialitieslist", "transformation_label": "String Indexer"}], "feature": "specialitieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "Certified Other|Pharmacy", "max": "Prosthetic Personnel", "missing": "0", "distinct": "15"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "specialitieslist"}, {"transformationsData": [{"feature_label": "providertypelist", "transformation_label": "String Indexer"}], "feature": "providertypelist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "23", "mean": "", "stddev": "", "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT", "missing": "477", "distinct": "1"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "providertypelist"}, {"transformationsData": [{"feature_label": "supplieslist", "transformation_label": "String Indexer"}], "feature": "supplieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings", "missing": "0", "distinct": "56"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "supplieslist"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "latitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "38.59", "stddev": "5.16", "min": "18.23407", "max": "48.57833", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "latitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "longitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "-89.16", "stddev": "17.29", "min": "-157.8097", "max": "-66.03487", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "longitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "is_contracted_for_cba", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.0", "min": "0", "max": "0", "missing": "0"}, "updatedLabel": "is_contracted_for_cba"}, {"feature": "participationbegindate_dayofmonth", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "3.4", "stddev": "5.98", "min": "1", "max": "31", "missing": "0"}, "updatedLabel": "participationbegindate_da..."}, {"feature": "participationbegindate_month", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2.71", "stddev": "3.81", "min": "1", "max": "12", "missing": "0"}, "updatedLabel": "participationbegindate_mo..."}, {"feature": "participationbegindate_year", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2020.69", "stddev": "2.99", "min": "2014", "max": "2023", "missing": "0"}, "updatedLabel": "participationbegindate_ye..."}, {"feature": "businessname_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "126.48", "stddev": "7.69", "min": "6.0", "max": "127.0", "missing": "0"}, "updatedLabel": "businessname_stringindexe..."}, {"feature": "practicename_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "467.0", "stddev": "0.0", "min": "467.0", "max": "467.0", "missing": "0"}, "updatedLabel": "practicename_stringindexe..."}, {"feature": "practiceaddress1_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "500.0", "stddev": "0.0", "min": "500.0", "max": "500.0", "missing": "0"}, "updatedLabel": "practiceaddress1_stringin..."}, {"feature": "practiceaddress2_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "3.87", "stddev": "9.88", "min": "0.0", "max": "30.0", "missing": "0"}, "updatedLabel": "practiceaddress2_stringin..."}, {"feature": "practicecity_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "341.73", "stddev": "115.44", "min": "0.0", "max": "393.0", "missing": "0"}, "updatedLabel": "practicecity_stringindexe..."}, {"feature": "practicestate_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "20.53", "stddev": "13.58", "min": "0.0", "max": "38.0", "missing": "0"}, "updatedLabel": "practicestate_stringindex..."}, {"feature": "specialitieslist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "0.49", "stddev": "1.58", "min": "0.0", "max": "14.0", "missing": "0"}, "updatedLabel": "specialitieslist_stringin..."}, {"feature": "providertypelist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.06", "min": "0", "max": "1", "missing": "0"}, "updatedLabel": "providertypelist_stringin..."}, {"feature": "supplieslist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "4.26", "stddev": "10.07", "min": "0.0", "max": "55.0", "missing": "0"}, "updatedLabel": "supplieslist_stringindexe..."}], "samplecount": 500, "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "FEGraph": [{"values": {"label": ["20310995.0 - 21715591.1", "21715591.1 - 23120187.2", "23120187.2 - 24524783.3", "24524783.3 - 25929379.4", "25929379.4 - 27333975.5", "27333975.5 - 28738571.6", "28738571.6 - 30143167.7", "30143167.7 - 31547763.8", "31547763.8 - 32952359.9", "32952359.9 - 34356956"], "data": [495, 0, 0, 1, 1, 0, 0, 0, 0, 3]}, "label": "provider_id", "count": 10, "min": 20310995.0, "max": 34356956}, {"values": {"label": ["1", "0"], "data": [461, 39]}, "label": "acceptsassignement", "count": 2, "min": "0", "max": "1"}, {"values": {"label": ["2024-01-19 00:00:00", "2024-01-17 00:00:00", "2024-01-16 00:00:00", "2024-01-15 00:00:00", "2024-01-14 00:00:00", "2024-01-12 00:00:00", "2024-01-11 00:00:00", "2024-01-10 00:00:00", "2024-01-09 00:00:00", "2024-01-08 00:00:00", "2023-12-07 00:00:00", "2023-12-06 00:00:00", "2023-12-05 00:00:00", "2023-12-04 00:00:00", "2023-12-01 00:00:00", "2023-11-30 00:00:00", "2023-11-29 00:00:00", "2023-11-28 00:00:00", "2023-11-27 00:00:00", "2023-11-22 00:00:00", "2023-11-20 00:00:00", "2023-11-19 00:00:00", "2023-11-18 00:00:00", "2023-11-17 00:00:00", "2023-11-16 00:00:00", "2023-11-15 00:00:00", "2023-11-10 00:00:00", "2024-01-04 00:00:00", "2023-11-09 00:00:00", "2023-11-08 00:00:00", "2023-11-07 00:00:00", "2023-11-21 00:00:00", "2023-11-14 00:00:00", "2023-11-13 00:00:00", "2023-11-11 00:00:00", "2024-01-05 00:00:00", "2024-01-02 00:00:00", "2024-01-01 00:00:00", "2023-11-06 00:00:00", "2023-11-03 00:00:00", "2023-11-02 00:00:00", "2023-11-01 00:00:00", "2023-10-31 00:00:00", "2023-01-01 00:00:00"], "data": [1, 2, 2, 1, 1, 1, 1, 5, 2, 1, 1, 4, 1, 6, 3, 2, 3, 4, 4, 2, 2, 1, 1, 3, 3, 5, 2, 3, 1, 12, 3, 2, 3, 3, 1, 1, 6, 73, 2, 4, 2, 3, 1, 316]}, "label": "participationbegindate", "count": 44, "min": "", "max": ""}, {"values": {"label": ["CONNECTICUT CVS PHARMACY LLC", "VIRGINIA CVS PHARMACY LLC", "NORTH CAROLINA CVS PHARMACY LLC", "WALGREEN CO", "BEE'S MEDICAL EQUIPMENT & SUPPLIES LLC", "GOODRICH PHARMACY INC", "CREST RX LLC", "SOUTHEASTERN PHARMACY LLC", "ADVANCED HEALTHCARE SOLUTIONS LLC", "CPAP EXPERTS LLC", "OSO ORTHOTICS & PROSTHETICS LLC", "MED-SAVE LLC", "A PLUS DURABLE MEDICAL EQUIPMENTS LLC", "GUY PARK PHARMACY LLC", "CURANT HEALTH FLORIDA LLC", "PREMIER PHARMACY & WELLNESS INC", "IDABEL EXPRESS PHARMACY LLC", "SAFEWAY INC", "PENNSYLVANIA CVS PHARMACY LLC", "RANDALLS FOOD & DRUGS LP", "WAL-MART STORES EAST, LP", "GARFIELD BEACH CVS LLC", "CARR-GOTTSTEIN FOODS CO", "YAGNAM LLC", "WILLIAM RICHARD HOLDSWORTH", "BIC IN HOME SERVICES, LLC", "TERRACE APOTHECARY, INC", "DEDHAM PHARMACY & MEDICAL SUPPLY", "FRISCIA PHARMACY INC", "FOSSTON PHARMACY & GIFTS INC", "AWARD PHARMACY CORP", "GARDNER EYE CARE LLC", "CARTER HEALTHCARE DME OF NORTHEAST OKLAHOMA LLC", "HHP LLC", "CARTER HEALTHCARE PHARMACY AND DME OF OKLAHOMA LLC", "MEDPRIME HEALTH SERVICES LLC", "GOOSE PHARMA LLC", "WASHINGTON CVS PHARMACY LLC", "MONTANA CVS PHARMACY LLC", "KANSAS CVS PHARMACY LLC", "MISSOURI CVS PHARMACY LLC", "FAMILY VISION CENTER OF LA CROSSE", "HMB IV PHARMACY MANAGEMENT LLC", "OWEN PHARMACIST GROUP LLC", "S-COMM, INC.", "GLO AMEDS DME, LLC", "FOBI COMPREHENSIVE PHARMACY INC", "TJ PHARMACY INC", "BRONX SPECIALTY PHARMACY INC", "ST KEROLLOS PHARMACY INC", "EYE CARE ASSOCIATES OF MARIETTA LLC", "ABITACARE LLC", "COMANCHE COUNTY HOSPITAL AUTHORITY", "PROSTHETIC CENTER LLC", "MAYO CLINIC HEALTH SYSTEM-NORTHWEST WISCONSIN REGION INC", "PAYNE & PITTS, LLC", "EYETECH DIGITAL SYSTEMS INC", "WONDERFUL RX PHARMACY INC", "BEYOND MEDICAL SUPPLIES LLC", "TJ PHARMACY LLC", "SAVE-RITE PHARMACY INC", "SYRACUSE COMMUNITY HEALTH PHARMACY LLC", "86 BOBO PHARMACY INC", "GENEFIC SPECIALTY RX INC", "JANE'S PHARMACY, LLC", "DIXIE PHARMACY-2, LLC", "PHARMKO INC", "MAGNOLIA HEALTHCARE PA LLC", "MYRTLE MEDS INC", "KINETIC PROSTHETICS & MEDICAL SUPPLY"], "data": [90, 35, 1, 199, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 2, 3, 58, 9, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 2, 8, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "businessname", "count": 70, "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC"}, {"values": {"label": ["RELIANT MEDICAL EQUIPMENT DIST", "39 PHARMACY", "NV HEALTH, LLC", "MYRTLE RX PLUS INC", "LONE STAR PROSTHETICS, WICHITA FALL", "S8 MEDICAL EQUIPMENT LLC", "BREWSTER PHARMACY", "EVERCARE MEDICAL SOLUTIONS INC", "SDPM UNITED PHARMACY INC", "PROMEDICA MEDICAL SUPPLY INC", "ORTHO ELITE PERFORMANCE & RECOVERY", "WILLOW PHARMACY CORP", "HISPANOS PHARMACY INC", "HACKENSACK PHARMACY", "BRONX HEALTHPLUS RX INC", "FRESH POND PHARMACY INC", "SHIFA SPECIALTY INC.", "NEB DOCTORS OF WESTERN PENNSYLVANIA", "GOOD MERCY PHARMACY CORP", "PROSTHETIC AND ORTHOTIC ASSOC OF SC", "MOBIUS MOBILITY LLC", "COMFORT RX PHARMACY CORP", "MEDICAL CENTER PHARMACY", "OPTUM PHARMACY 705, LLC", "NEW ROCHELLE PHARMACY", "THRIVE SPECIALTY PHARMACY LLC", "FIT TO GO LLC", "JERICHO CHEMISTS INC.", "PARKVIEW NOCO RX, LLC", "MAC RX OF MISSOURI, LLC", "FIRSTCARE MEDICAL SUPPLY LLC", "ROCK HILL PHARMACY", "SNEDS PEDORTHIC LLC", "PROSUM DME", "S S HEALTHCARE INC", "ALLIANCE MEDICAL SUPPLY LLC", "HQ", "SINGH PHARMACY INC.", "ROCHESTER HOME INFUSION", "RXMTS", "SOUTHWEST FLORIDA EYE CARE", "SOUTHWEST FLORIDA EYE CARE LLC", "VITAL CARE OF HENDERSON", "HEALARIAN PHARMACY", "DIVINE MEDICAL SUPPLY AND EQUIPMENT", "PHOENIX MEDICAL EQUIPMENT INC", "HEAL MEDICAL SUPPLY LLC", "ST. RAPHAEL CHEMISTS", "CHUBBUCK'S PHARMACY INC", "SEVENTEEN MEDICAL SUPPLY LLC", "WOOSTER PHARMACY LLC", "SHIV HARI RX INC", "MEDIX SUPPLIES INC", "MR PHARMACIST LLC", "BRISTOL CARE PHARMACY LLC", "VINITA FAMILY EYECARE, PLLC", "MS EYE CARE PA", "MISSISSIPPI EYE CARE CARTHAGE", "PICC LINES PLUS LLC", "LOUISVILLE EYE CARE", "BOSTON DME COMPANY LLC", "U SAVE IT PHARMACY PEACH VALLEY", "ROCKAWAY DRUGS RX INC", "C AND M HEALTH INC", "ILS HHA OF REGION 11 LLC", "POLARIS PHARMACY SERVICES OF VIRGIN", "STARLIGHT RX INC", "SHALOM PHARMACY", "ARKANSAS COMPRESSION SHOP LLC", "BARGAIN MEDICAL SUPPLY, INC", "MAA PHARMACY", "DEVINE'S PHARMACY", "VIVITAL, INC.", "BILLINGS FAMILY EYECARE SHILOH", "STARLING PHARMACY II, INC.", "ASTORIA RX HOLDINGS INC", "DUFFY RX LLC", "FALCON MED EQPT LLC", "WB DRUG COMPANY INC", "THRIFTY WHITE DRUG #756", "THRIFTY WHITE PHARMACY #768", "THRIFTY WHITE PHARMACY #742", "THRIFTY WHITE DRUG #762", "THRIFTY WHITE DRUG #760", "THRIFTY WHITE PHARMACY 767", "THRIFTY WHITE DRUG #758", "THRIFTY WHITE DRUG #736", "THRIFTY WHITE PHARMACY # 769", "THRIFTY WHITE PHARMACY #754", "THRIFTY WHITE PHARMACY #752", "THRIFTY WHITE DRUG #750", "THRIFTY WHITE DRUG #748", "THRIFTY WHITE PHARMACY #728", "THRIFTY WHITE DRUG #755", "THRIFTY WHITE PHARMACY #772", "THRIFTY WHITE PHARMACY #770", "THRIFTY WHITE PHARMACY #774", "THRIFTY WHITE PHARMACY #779", "DOVE MEDICAL SUPPLY RETAIL LLC", "THRIFTY WHITE PHARMACY #741", "DR. WENDY SOWELL GIBSON", "PREMIER KIDS CARE, INC.", "SAAD MEDICAL EQUIPMENT - SPANISH FO", "SAAD MEDICAL EQUIPMENT - UNIVERSITY", "BOTICA PHARMACY CORP.", "SAAD MEDICAL EQUIPMENT -D'IBERVILLE", "THRIFTY WHITE DRUG 729", "THRIFTY WHITE PHARMACY #727", "DYNAMEDICS MEDICAL SOLUTIONS INC", "ROBERTS HOME MEDICAL LLC", "YONKERS EXPRESS PHARMACY INC", "BLOOMING LIGHT RX INC", "THRIFTY WHITE PHARMACY #735", "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "HEALTHDIRECT INSTITUTIONAL PHARMACY", "THRIFTY WHITE DRUG #746", "THRIFTY WHITE PHARMACY #738", "BALL GROUND PHARMACY LLC", "HOSPITAL PHARMACY WEST", "HOSPITAL PHARMACY INC", "PREMIER KIDS CARE", "WEST CONCORD PHARMACY", "PHARMCAREOK OF TULSA INC", "THRIFTY WHITE PHARMACY #740", "THRIFTY WHITE PHARMACY #776", "THRIFTY WHITE PHARMACY #778", "THRIFTY WHITE PHARMACY #734", "ROTECH", "THRIFTY WHITE DRUG #759", "J&G MEDICAL SUPPLIES", "ACCESS PT PENNSYLVANIA", "PHARMACY ON U LLC", "ADVANCED MEDICAL SUPPLY INC", "DIABETIC SOLUTIONS INC", "THC OF NEVADA", "ADVANCED EYECARE", "THE MED-SHOP PHARMACY", "LIBERTY RX INC", "THRIFTY WHITE PHARMACY #775", "THRIFTY WHITE PHARMACY #781", "MEDI CITY PHARMACY INC", "U HEALTH PHARMACY LLC", "VALLEY VIEW", "CORONA PHARMACY RX INC.", "THE MEDICINE SHOPPE #2193", "MEDICAL PHARMACY PA", "VITAL CARE OF LAFAYETTE", "PINK PROMISES & DME LLC", "CHARITY COMFORT CARE MEDICAL SUPPLY", "CPR DME, LLC", "REMEDY PHARMACY", "ROYAL MEDICAL SUPPLY", "SAINT MARY AND JESSIE LLC", "BUCKNER NEIGHBORHOOD PHARMACY INC.", "PHARMSCRIPT OF FLORIDA LLC", "CVS PHARMACY #01254", "CVS PHARMACY #10449", "CVS PHARMACY #10174", "CVS PHARMACY #10487", "CVS PHARMACY #10414", "CVS PHARMACY #10521", "CVS PHARMACY #10486", "CVS PHARMACY #10428", "CVS PHARMACY #10446", "CVS PHARMACY #10265", "CVS PHARMACY #10544", "CVS PHARMACY #10350", "CVS PHARMACY #10215", "CVS PHARMACY #00496", "CVS PHARMACY #10540", "CVS PHARMACY # 05465", "CVS PHARMACY #04879", "CVS PHARMACY #01020", "CVS PHARMACY #04599", "CVS PHARMACY # 02282", "CVS PHARMACY # 00861", "CVS PHARMACY # 01225", "CVS PHARMACY #00860", "CVS PHARMACY # 00844", "CVS PHARMACY # 00810", "CVS PHARMACY # 00769", "CVS PHARMACY INC", "CVS PHARMACY # 01871", "CVS PHARMACY # 01002", "CVS PHARMACY # 01870", "CVS PHARMACY # 01247", "CVS PHARMACY # 01143", "CVS PHARMACY # 01085", "CVS PHARMACY # 01121", "CVS PHARMACY # 08319", "CVS PHARMACY # 04471", "CVS PHARMACY # 00148", "CVS PHARMACY # 00130", "CVS PHARMACY # 00119", "CVS PHARMACY # 01869", "CVS PHARMACY #01021", "CVS PHARMACY # 01041", "CVS PHARMACY #16419", "CVS PHARMACY # 16205", "CVS PHARMACY # 01111", "CVS PHARMACY #01264", "CVS PHARMACY #00915", "CVS PHARMACY #01874", "CVS PHARMACY #02325", "CVS PHARMACY #00995", "CVS PHARMACY #01853", "CVS PHARMACY #10782", "CVS PHARMACY #01049", "CVS PHARMACY #01885", "CVS PHARMACY #01862", "CVS PHARMACY # 05872", "CVS PHARMACY #00983", "CVS PHARMACY #01368", "CVS PHARMACY# 05407", "CVS PHARMACY #07607", "CVS PHARMACY #00307", "CVS PHARMACY #00117", "CVS PHARMACY #01886", "CVS PHARMACY #02283", "CVS PHAMRACY #05402", "CVS PHARMACY #01068", "CVS PHARMACY #00946", "CVS PHARMACY #01010", "CVS PHARMACY #01234", "CVS PHARMACY #00704", "CVS PHARMACY #00636", "CVS PHARMACY # 00318", "CVS PHARMACY #01238", "CVS PHARMACY #01130", "CVS PHARMACY #01872", "CVS PHARMACY #05874", "CVS PHARMACY #02254", "CVS PHARMACY #01850", "CVS PHARMACY #01094", "CVS PHARMACY # 05913", "CVS PHARMACY # 07170", "CVS PHARMACY #10324", "CVS PHARMACY #01859", "CVS PHARMACY # 01873", "CVS PHARMACY # 01875", "CVS PHARMACY #05002", "CVS PHARMACY #10665", "CVS PHARMACY 17604", "CVS PHARMACY #10601", "CVS PHARMACY #10637", "CVS PHARMACY #17335", "CVS PHARMACY #16009", "CVS PHARMACY #10906", "CVS PHARMACY #16013", "CVS PHARMACY #16895", "CVS PHARMACY #16024", "CVS PHARMACY #10758", "CVS PHARMACY #10603", "CVS PHARMACY #17276", "CVS PHARMACY #17603", "CVS PHARMACY #16074", "CVS PHARMACY #17046", "CVS PHARMACY #16081", "CVS PHARMACY #16831", "CVS PHARMACY #16033", "CVS PHARMACY #10139", "CVS PHARMACY #10598", "CVS PHARMACY #16855", "CVS PHARMACY #10752", "CVS PHARMACY #10635", "CVS PHARMACY #10775", "CVS PHARMACY #10595", "CVS PHARMACY #10580", "CVS PHARMACY #10638", "CVS PHARMACY #10671", "CVS PHARMACY #10576", "CVS PHARMACY # 05987", "CVS PHARMACY # 05822", "CVS PHARMACY # 05829", "CVS PHARMACY # 05836", "CVS PHARMACY # 02903", "CVS PHARMACY # 02935", "CVS PHAMRACY # 02936", "CVS PHARMACY # 02942", "CVS PHARMACY # 02981", "CVS PHARMACY #02844", "CVS PHARMASCY # 05797", "CVS PHARMACY # 02692", "CVS PHARMACY # 09086", "CVS PHARMACY #05619", "CVS PHARMACY 05482", "CVS PHARMACY # 02827", "CVS PHARMACY # 06935", "CVS PHARMACY #08910", "CVS PHARMACY #04396", "CVS PHARMACY 01768", "CVS PHARMACY #00513", "CVS PHARMACY #01900", "CVS PHARMACY #00488", "CVS PHARMACY #00365", "CVS PHARMACY #00220", "CVS PHARMACY #01034", "CVS PHARMACY # 01095", "CVS PHARMACY # 02878", "CVS PHARMACY #16935", "CVS PHARMACY #02600", "CVS PHARMACY #01248", "HIGHLAND PARK CVS LLC", "CVS PHARMACY #07020", "CVS PHARMACY # 07166", "CVS PHARMACY #04581", "CVS PHARMACY #10664", "CVS PHARMACY #10673", "CVS PHARMACY #10691", "CVS PHARMACY #10818", "CVS PHARMACY #10602", "CVS PHARMACY #10667", "CVS PHARMACY #10880", "CVS PHARMACY #01996", "CVS PHARMACY #10579", "CVS PHARMACY #10634", "CVS PHARMACY #10944", "CVS PHARMACY #10670", "CVS PHARMACY #07970", "CVS PHARMACY #06748", "CVS PHARMACY # 06937", "CVS PHARMACY 07017", "CVS PHARMACY # 07142", "CVS PHARMACY #01184", "CVS PHARMACY #00929", "CVS PHARMACY #01024", "CVS PHARMACY #00272", "CVS PHARMACY #01867", "CVS PHARMACY #01868", "CVS PHARMACY #01955", "CVS PHARMACY #02054", "CVS PHARMACY #02161", "CVS PHARMACY #02200", "CVS PHARMACY #00062", "CVS PHARMACY #00137", "CVS PHARMACY #00260", "CVS PHARMACY #00335", "CVS PHARMACY #01861", "CVS PHARMACY #00373", "CVS PHARMACY #00394", "CVS PHARMACY #00517", "CVS PHARMACY #02206", "CVS PHARMACY # 07232", "CVS PHARMACY #06505", "CVS PHARMACY #02959", "CVS PHARMACY #01022", "CVS PHARMACY # 01876", "CVS PHARMACY #01865", "CVS PHARMACY #07222", "CVS PHARMACY #01179", "CVS PHARMACY #09320", "CVS PHARMACY #07962", "CVS PHARMACY # 06933", "CVS PHARMACY #09099", "CVS PHARMACY #09130", "CVS PHARMACY #09142", "CVS PHARMACY # 09147", "CVS PHARMACY #09896", "CVS PHARMACY #09135", "CVS PHARMACY #09929", "LONGS DRUG STORES CALIFORNIA LLC", "CVS PHARMACY #09922", "CVS PHARMACY #09921", "CVS PHARMACY #09920", "CVS PHARMACY #09909", "CVS PHARMACY #09917", "CVS PHARMACY #09919", "CVS PHARMACY #09801", "CVS PHARMACY #09146", "CVS PHARMACY #09800", "CVS PHARMACY #09128", "LONGS DRUG STORE #09815", "CVS PHARMACY #09818", "CVS PHARMACY #09819", "CVS PHARMACY #09208", "CVS PHARMACY #09296", "CVS PHARMACY #05421", "CVS PHARMACY #08734", "CVS PHARMACY #07553", "CVS PHARMACY #09167", "CVS PHARMACY #09149", "CVS PHARMACY # 09162", "CVS PHARMACY 09150", "CVS PHARMACY 09152", "CVS PHARMACY 09153", "CVS PHARMACY 09155", "CVS PHARMACY #09154", "CVS PHARMACY # 09156", "CVS PHARMACY #09845", "CVS PHARMACY #09158", "CVS PHARMACY 09161", "CVS PHARMACY #09821", "CVS PHARMACY 09282", "CVS PHARMACY #09796", "CVS PHARMACY #09783", "CVS PHARMACY #09752", "CVS PHARMACY #09834", "CVS PHARMACY #09872", "CVS PHARMACY #09219", "CVS PHARMACY #09159", "CVS PHARMACY #09822", "CVS PHARMACY #10886", "CVS PHARMACY #10750", "CVS PHARMACY #10681", "CVS PHARMACY #10177", "CVS PHARMACY #05493", "CVS PHARMACY #00046", "CVS PHARMACY #01023", "CVS PHARMACY #01265", "CVS PHARMACY #01199", "CVS PHARMACY #00055", "CVS PHARMACY #00107", "CVS PHARMACY #00714", "CVS PHARMACY #00736", "CVS PHARMACY# 08441", "CVS PHARMACY #02201", "CVS PHARMACY # 01009", "CVS PHARMACY#01803", "CVS PHARMACY #01012", "CVS #05494", "CVS PHARMACY #04820", "CVS PHARMACY #04880", "CVS PHARMACY # 07319", "CVS PHARMACY# 01878", "CVS PHARMACY #01001", "CVS PHARMACY #10581", "CVS PHARMACY #10535", "CVS PHARMACY #05382", "CVS PHARMACY", "CVS PHARMACY #00131", "CVS PHARMACY #01531", "CVS PHARMACY #01845", "CVS PHARMACY #00604", "CVS PHARMACY #00632", "CVS PHARMACY #00654", "CVS PHARMACY #00674", "CVS PHARMACY #07242", "CVS PHARMACY # 09844", "CVS PHARMACY #09198", "HOOK-SUPERX LLC", "HOOK- SUPERX, L.L.C..", "LONGS DRUGS #09835", "CVS PHARMACY #09833", "CVS PHARMACY #09735", "CVS PHARMACY #09802", "CVS PHARMACY #09163", "CVS PHARMACY #09851", "CVS PHARMACY #09632", "CVS PHARMACY #09809", "CVS PHARMACY #09623", "CVS PHARMACY #01921", "CVS PHARMACY #02755", "CVS PHARMACY #02756", "CVS PHARMACY #02782", "CVS PHARMACY #02783", "CVS PHARMACY # 10794", "CVS PHARMACY #02784", "CVS PHARMACY #01657", "CVS PHARMACY #04773", "CVS PHARMACY # 05088", "CVS PHARMACY #00835", "CVS PHARMACY #16537", "CVS PHARMACY # 07969", "CVS PHARMACY # 03047", "CVS PHARMACY # 10606", "CVS PHARMACY #07227", "CVS PHARMACY #08266"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practicename", "count": 467, "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC"}, {"values": {"label": ["511 MONROE TPKE", "1239 E PUTNAM AVE", "3514 MAIN ST", "3141 WILSON BLVD", "1240 FARMINGTON AVE", "219 BROAD ST", "358 W MAIN ST", "777 MAIN ST", "20 BANK ST", "94 PARK ST", "229 HOPE ST", "734 BRIDGEPORT AVE", "1341 LONG STREET", "6400 LANSDOWNE CENTER", "714 HOPMEADOW ST", "1200 MAIN ST", "632 MIDDLE TPKE", "311 MAIN ST", "26 DAVIS ST", "22 WINDSOR AVE", "1055 FARMINGTON AVE", "526 MERIDEN RD", "1968 BLACK ROCK TPKE", "6 QUEEN ST", "47 HAZARD AVE", "844 JONES HILL RD", "2045 DIXWELL AVE", "26 WATERBURY RD", "1425 BARNUM AVE", "2000 N MAIN ST", "581 HIGHLAND AVE", "323 CROMWELL AVE", "35 PADANARAM RD", "1 HAWLEY LN", "225 SOUND BEACH AVE", "690 WETHERSFIELD AVE", "153 BROAD ST", "3440 WILKINSON BLVD", "2981 S. MILITARY HWY", "99 GREENWICH AVE", "110 MAIN STREET", "163 MOUNTAIN RD", "25 BROADWAY AVE", "279 BOSTON POST RD", "479 BLUE HILLS AVE", "964 POST RD", "106 BOSTON POST RD", "191 W MAIN ST", "900 N 6TH STREET", "300 E 8TH ST", "3222 S MAIN ST", "2703 ROUTE 130", "2025 FIRST AVENUE SE", "5046 S SHERIDAN RD", "4016 S STATE HIGHWAY 97", "591 S MILL ST", "27 S COAST HWY", "5518 MAGAZINE ST", "124 W WASHINGTON AVE", "701 W GROVE ST", "915 HILL ST", "220 N ALEXANDER AVE", "5905 DOLLARWAY RD", "2611 E OAKLAND AVE", "602 HIGHWAY 16 E", "12352 FM 1957", "101 N BUSINESS 60", "214 S MAIN ST", "304 E MAIN ST", "6 E SPRINGFIELD RD", "1219 E BUSTAMANTE ST", "2321 7TH AVE", "10601 S MAY AVE", "5711 ALTAMA AVE", "23122 SAINT FRANCIS BLVD", "15245 BLUEBIRD ST NW", "530 3RD ST NW", "100 ASMA BLVD", "2621 GREENHAVEN RD", "820 BAY AVE", "11983 TAMIAMI TRL N", "102 PRINCE ROYAL DR", "433 W ALLEN AVE", "151 GUY PARK AVE", "11001 ROOSEVELT BLVD N", "516 BECKLEY CROSSING SHPG CTR", "810 SE WASHINGTON ST", "81 NORTH ST", "60 MIDDLE ST", "3710 MAIN ST", "40 EAST ST", "1875 BOSTON AVE", "20 BURNSIDE AVE", "45 S MAIN ST", "241 MIDDLE TPKE W", "15 CHESTERFIELD RD", "57 PROVIDENCE PIKE", "11 FOREST ST", "66 HIGH RIDGE RD", "903 BENHAM ST", "2251 COMMERCE BLVD", "1142 N DESLOGE DR", "2401 N CENTRAL AVE", "PR #14 KM 51.5", "17703 VIRGINIA AVE", "24 SCHOOL ST.", "605 N MAIN ST", "6068 S 1ST ST", "3303 W 26TH ST STE 101", "11500 W BROAD ST", "5580 GEORGETOWN RD", "13723 N LITCHFIELD RD", "871 W OAKLAND PARK BLVD", "11 ASHFORD AVE", "6505 E 71ST ST", "950 E TAFT AVE", "1357 VETERANS MEMORIAL BLVD", "901 SW STATE ROUTE 150", "4500 OLD PASS RD", "11085 CATHELL RD", "411 KING ST", "3375 RINCONADA BLVD", "58 PENNSYLVANIA AVE", "905 S MAIN ST", "661 MAIN ST", "540 W MAIN ST", "369 MAIN ST", "330 GRASMERE AVE", "37 W MAIN ST", "1657 ROUTE 12", "111 ALBANY TPKE", "150 WASHINGTON STREET", "965 WHITE PLAINS RD", "281 CONNECTICUT AVE", "710 FAYETTEVILLE ST", "14095 RICHMOND HWY", "3140 HWY 280", "206 US HIGHWAY 117 S", "3555 COLORADO BLVD", "1812 HOLLOWAY STREET", "407 W MAIN STREET", "1124 PATTON AVE", "454 S MAIN ST", "140 NC 102 W", "28895 W IL RTE 120", "101 E ATKINS ST", "244 E 161ST ST", "4021 CROSS TIMBERS ROAD", "1645 CRANIUM DR", "1606 HIGHLAND COLONY PKWY", "1921 S 77 SUNSHINE STRIP", "17970 N TAMIAMI TRL", "40 FLOWING SPRINGS WAY", "2590 N TEXAS ST", "1086 JEFF RD NW", "81 US HIGHWAY 9", "3800 W MADISON ST STE 101", "7403 ALOMA AVE", "2719 GRAND AVE", "4720 S KIRKMAN RD", "4720 N MARINE DR", "4710 S WESTERN AVE", "1800 W INDIANTOWN RD", "12405 NE 85TH ST", "3601 W WILLIAM CANNON DR", "3200 E BAY DR", "19710 HOLZWARTH RD", "19302 KUYKENDAHL RD", "128 E BRANDON BLVD", "4320 26TH ST W", "6003 14TH ST W", "11000 VENTURA BLVD", "9307 N LAMAR BLVD", "305 N BREED ST", "1634 S FEDERAL HWY", "9865 GLADES RD", "3200 S FEDERAL HWY", "1851 CLINT MOORE RD", "4218 LINDELL BLVD", "1515 N ALEXANDER DR", "355 CAMPBELL AVE", "720 BRANCHVILLE RD", "891N COLONY RD", "8 ROYCE CIR", "162 WASHINGTON AVE", "644 W PUTNAM AVE", "24 PERSHING DR", "14 CANDLEWOOD LAKE RD", "1181 MAIN ST", "6 WILLARD RD", "146 SOUTH ST", "7 DURANT AVE", "7950 FAYETTEVILLE RD", "283 W IL ROUTE 173", "301 UNIVERSITY AVE", "3801 BISCAYNE BLVD", "101 N TENNESSEE STREET", "3 PLAISTOW RD", "8815 STAGECOACH RD", "1601 MAIN ST", "4003 W VERNON AVE", "4030 ANNAS RETREAT", "125 MORRIS AVE", "3501 N HALSTED ST", "302 ROUTE 25A", "5555W 79TH ST", "5496 UNIVERSITY PKWY", "3501 UNIQUE CIRCLE", "12020 CULEBRA RD", "4353 LAKE OTIS PKWY", "1801 W 11TH ST", "900 MERIDIAN E", "1455 NE DIVISION ST", "1302 E 38TH ST", "22 DEPOT HILL RD", "969 HIGH RIDGE RD", "10 LATHROP RD", "17 W MAIN ST", "1 MIFFLIN ST", "200 BUTLER CMNS", "467 MAIN ST", "341 COTTAGE GROVE RD", "372 W MAIN ST", "1044 BOULEVARD", "525 BUCKLAND RD", "656 NEW HAVEN AVE", "5550 FM 423", "401 S ROOSEVELT DR", "599 W 4TH ST", "1449 N ARIZONA BLVD", "6519 MAIN ST", "1125 2ND ST", "831 KUHIO HWY", "1810 S IRISH RD", "1515 W PARADISE DR", "10562 BELLEVILLE RD", "1445 E CENTRAL CT", "822 CITY AVE S", "505 S. PINE RIDGE AVE", "804 PIKE ST", "100 SARA WAY", "1501 WAGNER AVE", "4141 PEARL RD", "593 NEWFIELD AVE", "326 MAIN ST", "3151 UNIVERSITY AVE", "9256 SLAUSON AVE", "1830 N BROADWAY", "74955 US HIGHWAY 111", "25829 NARBONNE AVE", "1200 N SEPULVEDA BLVD", "9100 ROSEDALE HWY", "43525 10TH ST W", "1790 AIRLINE HWY", "3033 VINTAGE BLVD", "2417 TONGASS AVE", "3500 BRUMBACK BLVD", "340 WESTWIND DR", "131 EUREKA TWNCTR DR", "1309 NW 12TH AVE", "354 PRIVATE DRIVE 288", "825 E GREEN BAY AVE", "410 GRAND VALLEY BLVD", "100 SYCAMORE ESTATES DR", "2021 E INDEPENDENCE ST", "180 RIVER RD", "1733 2ND ST S", "205 HOUSE CARLSON DR", "4000 S BOLGER RD", "1903 COBBS FORD RD", "1420 HIGHWAY 231 S", "805 US HIGHWAY 27 S", "6812 N LAMAR BLVD", "804 W MARKET ST", "324 ROOSEVELT RD", "875 E NAPIER AVE", "4995 E US ROUTE 36", "1311 N STATE ROUTE 48", "1150 E SIBLEY BLVD", "1835 SAND LAKE RD", "1403 WAUKEGAN RD", "6297 PGA BLVD", "6200 W WILLIAM CANNON DR", "1213 PALM BAY RD", "175 MALABAR RD NW", "901 N ANKENY BLVD", "5896 CORTEZ RD W", "2501 S LAMAR BLVD", "6230 W. IRLO BRONSON MEMORIAL HWY", "5600 S 1ST ST", "5895 W PEORIA AVE", "900 SHELBY RD", "2310 MCCAUSLAND AVE", "3300 BROWN RD", "420 N FRAZIER ST", "7731 E NORTHERN LIGHTS BLVD", "301 N SANTA CLAUS LN", "MILE 1907 SEWARD HWY", "4000 W DIMOND BLVD", "500 RIVER ST", "17 US HIGHWAY 206", "11352 DORSETT RD", "169 TERRACE ST", "596 PROVIDENCE HWY", "1505 MERMAID AVE", "115 JOHNSON AVE N", "2249 86TH ST", "846 FORT DALE RD", "2846 E 101ST ST", "130 3RD ST NE", "3105 S MERIDIAN AVE", "3310 LAMAR AVE", "18049 MAGNOLIA ST", "2600 HWY 138", "611 STATE HIGHWAY 54", "1133 N MAIN ST", "38020 US HIGHWAY 18", "3915 GATEWAY DR", "920 US HWY 12", "W190 N9855 APPLETON AVE", "800 FOXCROFT AVE", "3333 US ROUTE 60", "254 CASSIDY BLVD", "4000 RED BANK RD", "18401 BUSINESS 13", "8118 PERRY HILLS CT", "2136 CAMPBELLSVILLE RD", "650 S TRUMAN BLVD", "3240 S WESTERN AVE", "414 KINGS HIGHWAY EAST", "5935 W ADDISON ST", "3915 S NOLAND RD", "600 W KARSCH BLVD", "1200 S MAIN ST", "10555 W OVERLAND RD", "955 N STATE ST", "2329 W CLAY ST", "13242 WICKER AVE", "5345 N IH 35", "4822 CATON FARM RD", "33975 DATE PALM DR", "11701 DETROIT AVE", "76 HEIGHTS RD", "W62N190 WASHINGTON AVE", "15738 W CAPITOL DR", "W156N11261 PILGRIM RD", "2204 NEVA RD", "603 W PINE ST", "9449 S HOWELL AVE", "2677 S 108TH ST", "S79W18885 JANESVILLE RD", "2420 E COLONIAL DR", "700 W COLLEGE AVE", "12101 SHELBYVILLE RD", "7914 FEGENBUSH LN", "8802 WEST COLONIAL DR", "12295 BISCAYNE BLVD", "8000 LAKE UNDERHILL RD", "20020 CORTEZ BLVD", "9320 LACKLAND RD", "8790 W MCNAB RD", "6401 W COMMERCIAL BLVD", "8800 W 95TH ST", "1723 E YOUNG CIR", "4200 WINNETKA AVE N", "4950 COUNTY RD 101", "655 NICOLLET MALL", "5428 LYNDALE AVE S", "780 E 9TH ST", "1600 N NOVA RD", "3705 HOLLYWOOD BLVD", "2280 N LAS VEGAS BLVD", "3325 N MAIN ST", "815 SUMMIT ST", "2311 OGDEN AVE", "23684 STRICKLAND DR", "200 MARQUIS PKWY", "4060 CAMPBELL AVE", "2601 RICHMOND HWY", "3336 WILSON BLVD", "2035 4TH AVE", "115 N 19TH AVE", "1902 BROOKS ST", "2402 GRAND AVE", "2001 10TH AVE S", "10100 BROOK RD", "1275 HARRISON AVE", "1300 E PARK AVE", "1311 GRAND AVE", "425 MAIN ST", "307 SE 4TH ST", "617 CENTRAL AVE", "3095 N MONTANA AVE", "2601 CENTRAL AVE", "1020 SENECA RD", "6010 PLANK RD", "603 N MONTANA AVE", "681 S OHIO ST", "1060 WOODS MILL PLZ", "452 WYTHE CREEK RD", "1788 N PIERCE ST", "3401 CHARLES STREET", "4310 FORTUNA CENTER PLZ", "1245 N MILITARY HWY", "15341 MONTANUS DR", "191 MARKET ST", "721 SOUTHPARK BLVD", "155 HOLT GARRISON PKWY", "2530 WEIR RD", "1316 GREENBRIER PKWY", "25 S GATEWAY DR", "3424 MORMON COULEE RD", "1250 WATERS PLACE", "136 JESSICA LN", "6238 HADLEY ST", "5722 GATEWOOD AVE", "7922 ROSECRANS AVE", "821 PROSPECT AVE", "940A SOUTHERN BLVD", "111 E CARSON ST", "4566 E FLORENCE AVE", "111 S 3RD ST", "1501 23RD AVE", "1075 W FM 3040", "13308 MERIDIAN E", "5137 E BASELINE RD", "3201 W GORE BLVD", "8440 E MCDONALD DR", "2611 W PARK ROW", "1222 E WOODLAND AVE", "301 S MAIN ST", "233 CARMICHAEL WAY", "12130 JEFFERSON AVE", "1700 SEMINOLE TRL", "17307 HULL STREET RD", "709 E MAIN ST", "12455 W BROAD ST", "2775 GODWIN BLVD", "2441 EISENHOWER AVE", "2704 OAKLAWN BLVD", "7235 BELL CREEK RD", "3149 E HARRY ST", "2440 N LEBANON ST", "1180 W 19TH ST", "8301 N CHURCH RD", "4201 N BELT HWY", "1212 S MADISON ST", "2100 N MAIN AVE", "885 E HIGHWAY 60", "11900 SAINT CHARLES ROCK RD", "2395 MAIN ST", "11601 E US 40 HWY", "2401 US HWY 14 EAST", "4024 ELKHART RD", "3270 TELEGRAPH RD", "16205 MILITARY TRL", "5245 RANGELINE SERVICE RD S", "3005 CHARITY ST", "7955 HWY N", "12380 SAINT CHARLES ROCK RD", "1749 WOODSTONE DR", "2120 W OSAGE ST", "3603 MCMASTERS AVE", "9433 MANCHESTER RD", "8101 CLAYTON RD", "4501 AIRLINE DR", "101 FLORIDA AVE SE", "880 S NEOSHO BLVD", "300 KEYSER AVE", "6250 PASEO DEL NORTE NE", "7776 COX LN", "188 UNION ST", "12659 S RIDGELAND AVE", "15514 W WADDELL RD", "806 NISSAN DR", "602 ALABAMA AVE", "2141 E BROADWAY RD", "52 JERICHO TPKE", "120 BERGEN AVE", "3900 S GRAND BLVD", "7402 N 56TH ST", "819 S SALINA ST", "2170 86TH ST", "2577 MALL RD", "950 MAIN ST", "1311 RING RD", "298 CENTRAL AVE", "2519 N 7TH ST", "7617 MYRTLE AVE", "3595 HIRAM DOUGLASVILLE HWY", "5501 W OREM DR", "3341 HALLS FERRY RD", "747 HIGHWAY 1 S", "765 E GLENN AVE", "54 CENTER SQ", "1615 N SAGINAW RD", "2985 CROOKS RD", "3100 N MARKET ST", "7994 US HIGHWAY 51 N", "3880 DICKERSON PIKE"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practiceaddress1", "count": 500, "min": "1 S MAIN ST", "max": "ONE DAVIS SQ"}, {"values": {"label": ["UNIT B1", "CVS PHARMACY #01241", "CVS PHARMACY #06807", "STE E", "STE 11", "STE G", "STE B", "STE 203-E", "STE 203A", "STE 100C", "STE 2", "STE 116", "STE 1400", "BO PUEBLO SEC PUEBLO NORTE", "STE 100", "WALGREENS #5495", "# 36", "STE 260", "WALGREENS #5549", "STE A", "WALGREENS #5727", "WALGREENS #6153", "TOWER 2", "STE P2", "UNIT 8", "STE 4", "STE 202", "STE 907", "STE 107", "STE 102"], "data": [458, 1, 1, 2, 1, 1, 8, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]}, "label": "practiceaddress2", "count": 30, "min": "# 36", "max": "WALGREENS #6153"}, {"values": {"label": ["MONROE", "RIVERSIDE", "COVENTRY", "ARLINGTON", "WEST HARTFORD", "WINDSOR", "AVON", "HARTFORD", "GRANBY", "NEW CANAAN", "STAMFORD", "MILFORD", "CHARLOTTESVILLE", "ALEXANDRIA", "SIMSBURY", "WILLIMANTIC", "STORRS", "TERRYVILLE", "OAKVILLE", "VERNON ROCKVILLE", "KENSINGTON", "WATERBURY", "FAIRFIELD", "NEWTOWN", "ENFIELD", "WEST HAVEN", "HAMDEN", "PROSPECT", "STRATFORD", "CHESHIRE", "ROCKY HILL", "DANBURY", "OLD GREENWICH", "MERIDEN", "CHARLOTTE", "CHESAPEAKE", "GREENWICH", "HEBRON", "SUFFIELD", "MYSTIC", "ORANGE", "DARIEN", "WATERFORD", "ASHDOWN", "BLYTHEVILLE", "DANVILLE", "JOPLIN", "NORTH BRUNSWICK", "MOULTRIE", "TULSA", "SAND SPRINGS", "PRYOR", "NEWPORT", "NEW ORLEANS", "AVA", "EL DORADO", "ELLISVILLE", "PORT ALLEN", "PINE BLUFF", "BLOOMINGTON", "CARTHAGE", "SAN ANTONIO", "MANSFIELD", "SEYMOUR", "LINN", "SULLIVAN", "LAREDO", "ANOKA", "OKLAHOMA CITY", "BRUNSWICK", "SAINT FRANCIS", "ANDOVER", "ELK RIVER", "LAFAYETTE", "CAPITOLA", "NAPLES", "BEREA", "SAN DIMAS", "AMSTERDAM", "ST PETERSBURG", "BECKLEY", "IDABEL", "BRISTOL", "BRIDGEPORT", "NEW MILFORD", "EAST HARTFORD", "UNIONVILLE", "MANCHESTER", "EAST LYME", "PUTNAM", "BONNE TERRE", "MOUND", "DESLOGE", "HUMBOLDT", "AIBONITO", "HAGERSTOWN", "BOSTON", "IRONTON", "MILAN", "CHICAGO", "RICHMOND", "INDIANAPOLIS", "SURPRISE", "WILTON MANORS", "DOBBS FERRY", "SAPULPA", "EUPORA", "LEES SUMMIT", "GULFPORT", "BERLIN", "CHAPPAQUA", "LAS CRUCES", "NIANTIC", "TORRINGTON", "EAST HAVEN", "STAFFORD SPRINGS", "GALES FERRY", "CANTON", "TRUMBULL", "NORWALK", "DURHAM", "WOODBRIDGE", "ALEXANDER CITY", "BURGAW", "DENVER", "JAMESTOWN", "ASHEVILLE", "SPARTA", "AYDEN", "LAKEMOOR", "DOBSON", "BRONX", "FLOWER MOUND", "ROCK HILL", "MADISON", "HARLINGEN", "NORTH FORT MYERS", "CHARLES TOWN", "HUNTSVILLE", "ENGLISHTOWN", "WINTER PARK", "AMES", "ORLANDO", "JUPITER", "KIRKLAND", "AUSTIN", "HOLMES BEACH", "SPRING", "BRANDON", "BRADENTON", "STUDIO CITY", "LOS ANGELES", "BOYNTON BEACH", "BOCA RATON", "DELRAY BEACH", "SAINT LOUIS", "BAYTOWN", "RIDGEFIELD", "WALLINGFORD", "NORTH HAVEN", "ANSONIA", "BROOKFIELD", "NEWINGTON", "BETHEL", "RALEIGH", "ANTIOCH", "SAN DIEGO", "MIAMI", "CARTERSVILLE", "PLAISTOW", "LITTLE ROCK", "KINSTON", "ST THOMAS", "SPRINGFIELD", "MILLER PLACE", "BURBANK", "WINSTON SALEM", "FORT MYERS", "ANCHORAGE", "TRACY", "MILTON", "GRESHAM", "TACOMA", "SOUTHBURY", "PLAINFIELD", "CLINTON", "PHILADELPHIA", "BUTLER", "BLOOMFIELD", "NORWICH", "SOUTH WINDSOR", "DERBY", "FRISCO", "SEASIDE", "BENSON", "COOLIDGE", "BONNERS FERRY", "BRENTWOOD", "KAPAA", "CHILTON", "WEST BEND", "BELLEVILLE", "UNION", "RIPLEY", "MERRILL", "MARIETTA", "BELLE VERNON", "GREENVILLE", "MEDINA", "SOUTHINGTON", "PICO RIVERA", "SANTA MARIA", "INDIAN WELLS", "LOMITA", "MANHATTAN BEACH", "BAKERSFIELD", "LANCASTER", "HOLLISTER", "JUNEAU", "KETCHIKAN", "KENOSHA", "EUREKA", "SOUTH POINT", "SAUKVILLE", "MARTINSVILLE", "AURORA", "LISBON", "MERIDIAN", "BATESVILLE", "INDEPENDENCE", "PRATTVILLE", "TROY", "CYNTHIANA", "WARREN", "GLEN ELLYN", "BENTON HARBOR", "DECATUR", "DOLTON", "GLENVIEW", "PALM BEACH GARDENS", "MELBOURNE", "PALM BAY", "ANKENY", "KISSIMMEE", "GLENDALE", "KINGS MOUNTAIN", "CONROE", "NORTH POLE", "SEWARD", "PATERSON", "STANHOPE", "MARYLAND HEIGHTS", "HAWORTH", "DEDHAM", "BROOKLYN", "FOSSTON", "HARTLEY", "PARIS", "FOUNTAIN VALLEY", "STOUGHTON", "BLACK RIVER FALLS", "VIROQUA", "PRAIRIE DU CHIEN", "EAU CLAIRE", "BARABOO", "GERMANTOWN", "MARTINSBURG", "HUNTINGTON", "PIKEVILLE", "CINCINNATI", "BRANSON WEST", "NOTTINGHAM", "LEBANON", "FESTUS", "MARION", "FARMINGTON", "ROSWELL", "BOISE", "JACKSON", "SAINT CHARLES", "CEDAR LAKE", "CATHEDRAL CITY", "LAKEWOOD", "CEDARBURG", "ANTIGO", "OAK CREEK", "WEST ALLIS", "MUSKEGO", "APPLETON", "MIDDLETOWN", "LOUISVILLE", "OCOEE", "NORTH MIAMI", "BROOKSVILLE", "OVERLAND", "TAMARAC", "HICKORY HILLS", "HOLLYWOOD", "NEW HOPE", "MINNETONKA", "MINNEAPOLIS", "HIALEAH", "HOLLY HILL", "NORTH LAS VEGAS", "ROCKFORD", "ELGIN", "ASHBURN", "WILLIAMSBURG", "SEATTLE", "BOZEMAN", "MISSOULA", "BILLINGS", "GREAT FALLS", "GLEN ALLEN", "BUTTE", "ANACONDA", "LAUREL", "HELENA", "FREDERICKSBURG", "SALINA", "CHESTERFIELD", "POQUOSON", "FALLS CHURCH", "DUMFRIES", "NORFOLK", "CULPEPER", "WINCHESTER", "COLONIAL HEIGHTS", "CHESTER", "LA CROSSE", "OLIVE HILL", "RAYTOWN", "HOUSTON", "PARAMOUNT", "WESTBURY", "CARSON", "CUDAHY", "LEWISVILLE", "PUYALLUP", "GILBERT", "LAWTON", "SCOTTSDALE", "BARRON", "STUART", "NEWPORT NEWS", "MOSELEY", "FLOYD", "SUFFOLK", "HOPEWELL", "MECHANICSVILLE", "WICHITA", "HIGGINSVILLE", "KANSAS CITY", "SAINT JOSEPH", "WEBB CITY", "MOUNTAIN GROVE", "MONETT", "BRIDGETON", "ROCHESTER", "RICHLAND CENTER", "GOSHEN", "MOBILE", "ABBEVILLE", "DARDENNE PRAIRIE", "SAINT PETERS", "PACIFIC", "HANNIBAL", "ST. LOUIS", "CLAYTON", "METAIRIE", "DENHAM SPRINGS", "NEOSHO", "NATCHITOCHES", "ALBUQUERQUE", "WEST CHESTER", "VERNON", "PALOS HEIGHTS", "SMYRNA", "TEMPE", "MINEOLA", "BERGENFIELD", "TAMPA", "SYRACUSE", "FLORENCE", "MUNFORDVILLE", "ELIZABETHTOWN", "LAWRENCE", "WEST MONROE", "HIRAM", "VICKSBURG", "AUBURN", "EAST LONGMEADOW", "MIDLAND", "ROCHESTER HILLS", "SHREVEPORT", "MILLINGTON", "NASHVILLE"], "data": [1, 1, 1, 5, 2, 1, 1, 4, 1, 1, 5, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 2, 4, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 7, 1, 2, 1, 3, 1, 1, 1, 2, 2, 5, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practicecity", "count": 397, "min": "ABBEVILLE", "max": "WOODBRIDGE"}, {"values": {"label": ["NC", "CA", "MD", "NY", "TX", "WA", "KY", "AZ", "NJ", "PA", "SC", "NH", "AR", "TN", "AL", "MS", "FL", "MO", "MA", "CO", "MN", "OK", "NV", "MI", "OH", "VA", "MT", "IL", "GA", "WY", "WI", "VT", "KS", "LA", "NM", "IN", "HI", "PR"], "data": [5, 71, 5, 38, 68, 2, 2, 1, 5, 20, 2, 2, 2, 1, 3, 6, 12, 1, 126, 19, 33, 3, 3, 1, 1, 9, 1, 36, 4, 2, 3, 1, 1, 2, 4, 3, 1, 1]}, "label": "practicestate", "count": 38, "min": "AK", "max": "WV"}, {"values": {"label": ["705.0 - 99902224.5", "99902224.5 - 199803744.0", "199803744.0 - 299705263.5", "299705263.5 - 399606783.0", "399606783.0 - 499508302.5", "499508302.5 - 599409822.0", "599409822.0 - 699311341.5", "699311341.5 - 799212861.0", "799212861.0 - 899114380.5", "899114380.5 - 999015900"], "data": [154, 53, 21, 26, 7, 35, 37, 64, 30, 73]}, "label": "practicezip9code", "count": 10, "min": 705.0, "max": 999015900}, {"values": {"label": ["-2141564683.0 - -1712887730.7", "-1712887730.7 - -1284210778.4", "-1284210778.4 - -855533826.1", "-855533826.1 - -426856873.8", "-426856873.8 - 1820078.5", "1820078.5 - 430497030.8", "430497030.8 - 859173983.1", "859173983.1 - 1287850935.4", "1287850935.4 - 1716527887.7", "1716527887.7 - 2145204840.0"], "data": [46, 61, 54, 48, 52, 12, 93, 56, 9, 69]}, "label": "telephonenumber", "count": 10, "min": -2141564683.0, "max": 2145204840.0}, {"values": {"label": ["Pharmacy", "Medical Supply Company Other", "Certified Other|Pharmacy", "MSC With Respiratory Therapist", "MSC With Orthotic-Prosthetic", "Pharmacy|Grocery Store", "Pharmacy|Optician", "Medical Supply Company Other|Pharmacy|Optician", "Medical Supply Company Other|Orthotic Personnel", "Optometrist", "Medical Supply Company Other|MSC With Respiratory Therapist", "Optometrist|Optician", "Prosthetic Personnel", "Medical Supply Company Other|MSC With Orthotic Personnel", "MSC With Orthotic Personnel"], "data": [405, 6, 4, 1, 3, 21, 50, 1, 1, 2, 2, 1, 1, 1, 1]}, "label": "specialitieslist", "count": 15, "min": "Certified Other|Pharmacy", "max": "Prosthetic Personnel"}, {"values": {"label": ["PHYSICIAN ASSISTANT", "OXYGEN & EQUIPMENT"], "data": [498, 2]}, "label": "providertypelist", "count": 2, "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT"}, {"values": {"label": ["Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Nebulizer Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings|Lymphedema Compression Treatment Items", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Wheelchairs (Standard Manual)|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Continuous Positive Airway Pressure (CPAP) Devices|Respiratory Assist Devices", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual Related Accessories)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Canes and/or Crutches|Patient Lifts|Wheelchairs (Standard Manual Related Accessories)|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "Speech Generating Devices", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Nebulizer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies", "Limb Prostheses", "Nebulizer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Enteral Nutrients|Nebulizer Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Urological Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Antiemetic Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Traction Equipment|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom"], "data": [132, 28, 200, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 4, 8, 8, 1, 1, 41, 8, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "supplieslist", "count": 56, "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings"}, {"values": {"label": ["18.0 - 21.0", "21.0 - 24.0", "24.0 - 27.0", "27.0 - 30.0", "30.0 - 33.0", "33.0 - 36.0", "36.0 - 39.0", "39.0 - 42.0", "42.0 - 45.0", "45.0 - 48.0"], "data": [2, 1, 19, 27, 38, 63, 102, 166, 44, 31]}, "label": "latitude", "count": 10, "min": 18.0, "max": 48.0}, {"values": {"label": ["-159.0 - -149.5", "-149.5 - -140.0", "-140.0 - -130.5", "-130.5 - -121.0", "-121.0 - -111.5", "-111.5 - -102.0", "-102.0 - -92.5", "-92.5 - -83.0", "-83.0 - -73.5", "-73.5 - -64.0"], "data": [1, 0, 0, 15, 61, 28, 100, 66, 68, 161]}, "label": "longitude", "count": 10, "min": -159.0, "max": -64.0}, {"values": {"label": ["0"], "data": [500]}, "label": "is_contracted_for_cba", "count": 1, "min": "0", "max": "0"}, {"values": {"label": ["1.0 - 3.6", "3.6 - 6.2", "6.2 - 8.8", "8.8 - 11.4", "11.4 - 14.0", "14.0 - 16.6", "16.6 - 19.2", "19.2 - 21.8", "21.8 - 24.4", "24.4 - 27"], "data": [407, 17, 17, 12, 4, 15, 8, 4, 2, 4]}, "label": "participationbegindate_dayofmonth", "count": 10, "min": 1.0, "max": 27}, {"values": {"label": ["1", "12", "11", "10"], "data": [416, 15, 68, 1]}, "label": "participationbegindate_month", "count": 4, "min": "1", "max": "12"}, {"values": {"label": ["2023", "2022", "2020", "2017", "2014", "2019"], "data": [152, 199, 32, 50, 58, 9]}, "label": "participationbegindate_year", "count": 6, "min": "2014", "max": "2023"}, {"values": {"label": ["127.0", "6.0", "109.0"], "data": [497, 2, 1]}, "label": "businessname_stringindexer_transform", "count": 3, "min": "6.0", "max": "127.0"}, {"values": {"label": ["467.0"], "data": [500]}, "label": "practicename_stringindexer_transform", "count": 1, "min": "467.0", "max": "467.0"}, {"values": {"label": ["500.0 - 500.0"], "data": [500]}, "label": "practiceaddress1_stringindexer_transform", "count": 1, "min": 500.0, "max": 500.0}, {"values": {"label": ["0.0 - 3.0", "3.0 - 6.0", "6.0 - 9.0", "9.0 - 12.0", "12.0 - 15.0", "15.0 - 18.0", "18.0 - 21.0", "21.0 - 24.0", "24.0 - 27.0", "27.0 - 30.0"], "data": [469, 7, 3, 3, 3, 3, 3, 3, 3, 3]}, "label": "practiceaddress2_stringindexer_transform", "count": 10, "min": 0.0, "max": 30.0}, {"values": {"label": ["0.0 - 39.3", "39.3 - 78.6", "78.6 - 117.9", "117.9 - 157.2", "157.2 - 196.5", "196.5 - 235.8", "235.8 - 275.1", "275.1 - 314.4", "314.4 - 353.7", "353.7 - 393.0"], "data": [117, 69, 39, 40, 39, 39, 40, 39, 39, 39]}, "label": "practicecity_stringindexer_transform", "count": 10, "min": 0.0, "max": 393.0}, {"values": {"label": ["0.0 - 3.8", "3.8 - 7.6", "7.6 - 11.4", "11.4 - 15.2", "15.2 - 19.0", "19.0 - 22.8", "22.8 - 26.6", "26.6 - 30.4", "30.4 - 34.2", "34.2 - 38.0"], "data": [303, 108, 32, 18, 9, 10, 8, 5, 4, 3]}, "label": "practicestate_stringindexer_transform", "count": 10, "min": 0.0, "max": 38.0}, {"values": {"label": ["0.0 - 1.4", "1.4 - 2.8", "2.8 - 4.2", "4.2 - 5.6", "5.6 - 7.0", "7.0 - 8.4", "8.4 - 9.8", "9.8 - 11.2", "11.2 - 12.6", "12.6 - 14.0"], "data": [425, 0, 31, 2, 9, 17, 1, 6, 3, 1]}, "label": "specialitieslist_stringindexer_transform", "count": 10, "min": 0.0, "max": 14.0}, {"values": {"label": ["0", "1"], "data": [498, 2]}, "label": "providertypelist_stringindexer_transform", "count": 2, "min": "0", "max": "1"}, {"values": {"label": ["1.0 - 6.5", "6.5 - 12.0", "12.0 - 17.5", "17.5 - 23.0", "23.0 - 28.5", "28.5 - 34.0", "34.0 - 39.5", "39.5 - 45.0", "45.0 - 50.5", "50.5 - 56.0"], "data": [352, 7, 2, 1, 0, 1, 0, 0, 2, 135]}, "label": "supplieslist_stringindexer_transform", "count": 10, "min": 1.0, "max": 56.0}], "stageId": "678abdf1bdb869a10b24512c", "FESamplePath": "/FileStore/platform/sampleData/678abdf1bdb869a10b24512c_AutoFE/part-00000-270dd1e6-25f2-4b5e-ac6a-f61164853101-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/678abdf1bdb869a10b24512c_AutoFE/part-00000-270dd1e6-25f2-4b5e-ac6a-f61164853101-c000.csv", "originalcount": 59566, "graphdata": {"provider_id": {"label": ["20310995.0 - 21715591.1", "21715591.1 - 23120187.2", "23120187.2 - 24524783.3", "24524783.3 - 25929379.4", "25929379.4 - 27333975.5", "27333975.5 - 28738571.6", "28738571.6 - 30143167.7", "30143167.7 - 31547763.8", "31547763.8 - 32952359.9", "32952359.9 - 34356956"], "data": [495, 0, 0, 1, 1, 0, 0, 0, 0, 3]}, "acceptsassignement": {"label": ["1", "0"], "data": [461, 39]}, "participationbegindate": {"label": ["2024-01-19 00:00:00", "2024-01-17 00:00:00", "2024-01-16 00:00:00", "2024-01-15 00:00:00", "2024-01-14 00:00:00", "2024-01-12 00:00:00", "2024-01-11 00:00:00", "2024-01-10 00:00:00", "2024-01-09 00:00:00", "2024-01-08 00:00:00", "2023-12-07 00:00:00", "2023-12-06 00:00:00", "2023-12-05 00:00:00", "2023-12-04 00:00:00", "2023-12-01 00:00:00", "2023-11-30 00:00:00", "2023-11-29 00:00:00", "2023-11-28 00:00:00", "2023-11-27 00:00:00", "2023-11-22 00:00:00", "2023-11-20 00:00:00", "2023-11-19 00:00:00", "2023-11-18 00:00:00", "2023-11-17 00:00:00", "2023-11-16 00:00:00", "2023-11-15 00:00:00", "2023-11-10 00:00:00", "2024-01-04 00:00:00", "2023-11-09 00:00:00", "2023-11-08 00:00:00", "2023-11-07 00:00:00", "2023-11-21 00:00:00", "2023-11-14 00:00:00", "2023-11-13 00:00:00", "2023-11-11 00:00:00", "2024-01-05 00:00:00", "2024-01-02 00:00:00", "2024-01-01 00:00:00", "2023-11-06 00:00:00", "2023-11-03 00:00:00", "2023-11-02 00:00:00", "2023-11-01 00:00:00", "2023-10-31 00:00:00", "2023-01-01 00:00:00"], "data": [1, 2, 2, 1, 1, 1, 1, 5, 2, 1, 1, 4, 1, 6, 3, 2, 3, 4, 4, 2, 2, 1, 1, 3, 3, 5, 2, 3, 1, 12, 3, 2, 3, 3, 1, 1, 6, 73, 2, 4, 2, 3, 1, 316]}, "businessname": {"label": ["CONNECTICUT CVS PHARMACY LLC", "VIRGINIA CVS PHARMACY LLC", "NORTH CAROLINA CVS PHARMACY LLC", "WALGREEN CO", "BEE'S MEDICAL EQUIPMENT & SUPPLIES LLC", "GOODRICH PHARMACY INC", "CREST RX LLC", "SOUTHEASTERN PHARMACY LLC", "ADVANCED HEALTHCARE SOLUTIONS LLC", "CPAP EXPERTS LLC", "OSO ORTHOTICS & PROSTHETICS LLC", "MED-SAVE LLC", "A PLUS DURABLE MEDICAL EQUIPMENTS LLC", "GUY PARK PHARMACY LLC", "CURANT HEALTH FLORIDA LLC", "PREMIER PHARMACY & WELLNESS INC", "IDABEL EXPRESS PHARMACY LLC", "SAFEWAY INC", "PENNSYLVANIA CVS PHARMACY LLC", "RANDALLS FOOD & DRUGS LP", "WAL-MART STORES EAST, LP", "GARFIELD BEACH CVS LLC", "CARR-GOTTSTEIN FOODS CO", "YAGNAM LLC", "WILLIAM RICHARD HOLDSWORTH", "BIC IN HOME SERVICES, LLC", "TERRACE APOTHECARY, INC", "DEDHAM PHARMACY & MEDICAL SUPPLY", "FRISCIA PHARMACY INC", "FOSSTON PHARMACY & GIFTS INC", "AWARD PHARMACY CORP", "GARDNER EYE CARE LLC", "CARTER HEALTHCARE DME OF NORTHEAST OKLAHOMA LLC", "HHP LLC", "CARTER HEALTHCARE PHARMACY AND DME OF OKLAHOMA LLC", "MEDPRIME HEALTH SERVICES LLC", "GOOSE PHARMA LLC", "WASHINGTON CVS PHARMACY LLC", "MONTANA CVS PHARMACY LLC", "KANSAS CVS PHARMACY LLC", "MISSOURI CVS PHARMACY LLC", "FAMILY VISION CENTER OF LA CROSSE", "HMB IV PHARMACY MANAGEMENT LLC", "OWEN PHARMACIST GROUP LLC", "S-COMM, INC.", "GLO AMEDS DME, LLC", "FOBI COMPREHENSIVE PHARMACY INC", "TJ PHARMACY INC", "BRONX SPECIALTY PHARMACY INC", "ST KEROLLOS PHARMACY INC", "EYE CARE ASSOCIATES OF MARIETTA LLC", "ABITACARE LLC", "COMANCHE COUNTY HOSPITAL AUTHORITY", "PROSTHETIC CENTER LLC", "MAYO CLINIC HEALTH SYSTEM-NORTHWEST WISCONSIN REGION INC", "PAYNE & PITTS, LLC", "EYETECH DIGITAL SYSTEMS INC", "WONDERFUL RX PHARMACY INC", "BEYOND MEDICAL SUPPLIES LLC", "TJ PHARMACY LLC", "SAVE-RITE PHARMACY INC", "SYRACUSE COMMUNITY HEALTH PHARMACY LLC", "86 BOBO PHARMACY INC", "GENEFIC SPECIALTY RX INC", "JANE'S PHARMACY, LLC", "DIXIE PHARMACY-2, LLC", "PHARMKO INC", "MAGNOLIA HEALTHCARE PA LLC", "MYRTLE MEDS INC", "KINETIC PROSTHETICS & MEDICAL SUPPLY"], "data": [90, 35, 1, 199, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 2, 3, 58, 9, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 2, 8, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "practicename": {"label": ["RELIANT MEDICAL EQUIPMENT DIST", "39 PHARMACY", "NV HEALTH, LLC", "MYRTLE RX PLUS INC", "LONE STAR PROSTHETICS, WICHITA FALL", "S8 MEDICAL EQUIPMENT LLC", "BREWSTER PHARMACY", "EVERCARE MEDICAL SOLUTIONS INC", "SDPM UNITED PHARMACY INC", "PROMEDICA MEDICAL SUPPLY INC", "ORTHO ELITE PERFORMANCE & RECOVERY", "WILLOW PHARMACY CORP", "HISPANOS PHARMACY INC", "HACKENSACK PHARMACY", "BRONX HEALTHPLUS RX INC", "FRESH POND PHARMACY INC", "SHIFA SPECIALTY INC.", "NEB DOCTORS OF WESTERN PENNSYLVANIA", "GOOD MERCY PHARMACY CORP", "PROSTHETIC AND ORTHOTIC ASSOC OF SC", "MOBIUS MOBILITY LLC", "COMFORT RX PHARMACY CORP", "MEDICAL CENTER PHARMACY", "OPTUM PHARMACY 705, LLC", "NEW ROCHELLE PHARMACY", "THRIVE SPECIALTY PHARMACY LLC", "FIT TO GO LLC", "JERICHO CHEMISTS INC.", "PARKVIEW NOCO RX, LLC", "MAC RX OF MISSOURI, LLC", "FIRSTCARE MEDICAL SUPPLY LLC", "ROCK HILL PHARMACY", "SNEDS PEDORTHIC LLC", "PROSUM DME", "S S HEALTHCARE INC", "ALLIANCE MEDICAL SUPPLY LLC", "HQ", "SINGH PHARMACY INC.", "ROCHESTER HOME INFUSION", "RXMTS", "SOUTHWEST FLORIDA EYE CARE", "SOUTHWEST FLORIDA EYE CARE LLC", "VITAL CARE OF HENDERSON", "HEALARIAN PHARMACY", "DIVINE MEDICAL SUPPLY AND EQUIPMENT", "PHOENIX MEDICAL EQUIPMENT INC", "HEAL MEDICAL SUPPLY LLC", "ST. RAPHAEL CHEMISTS", "CHUBBUCK'S PHARMACY INC", "SEVENTEEN MEDICAL SUPPLY LLC", "WOOSTER PHARMACY LLC", "SHIV HARI RX INC", "MEDIX SUPPLIES INC", "MR PHARMACIST LLC", "BRISTOL CARE PHARMACY LLC", "VINITA FAMILY EYECARE, PLLC", "MS EYE CARE PA", "MISSISSIPPI EYE CARE CARTHAGE", "PICC LINES PLUS LLC", "LOUISVILLE EYE CARE", "BOSTON DME COMPANY LLC", "U SAVE IT PHARMACY PEACH VALLEY", "ROCKAWAY DRUGS RX INC", "C AND M HEALTH INC", "ILS HHA OF REGION 11 LLC", "POLARIS PHARMACY SERVICES OF VIRGIN", "STARLIGHT RX INC", "SHALOM PHARMACY", "ARKANSAS COMPRESSION SHOP LLC", "BARGAIN MEDICAL SUPPLY, INC", "MAA PHARMACY", "DEVINE'S PHARMACY", "VIVITAL, INC.", "BILLINGS FAMILY EYECARE SHILOH", "STARLING PHARMACY II, INC.", "ASTORIA RX HOLDINGS INC", "DUFFY RX LLC", "FALCON MED EQPT LLC", "WB DRUG COMPANY INC", "THRIFTY WHITE DRUG #756", "THRIFTY WHITE PHARMACY #768", "THRIFTY WHITE PHARMACY #742", "THRIFTY WHITE DRUG #762", "THRIFTY WHITE DRUG #760", "THRIFTY WHITE PHARMACY 767", "THRIFTY WHITE DRUG #758", "THRIFTY WHITE DRUG #736", "THRIFTY WHITE PHARMACY # 769", "THRIFTY WHITE PHARMACY #754", "THRIFTY WHITE PHARMACY #752", "THRIFTY WHITE DRUG #750", "THRIFTY WHITE DRUG #748", "THRIFTY WHITE PHARMACY #728", "THRIFTY WHITE DRUG #755", "THRIFTY WHITE PHARMACY #772", "THRIFTY WHITE PHARMACY #770", "THRIFTY WHITE PHARMACY #774", "THRIFTY WHITE PHARMACY #779", "DOVE MEDICAL SUPPLY RETAIL LLC", "THRIFTY WHITE PHARMACY #741", "DR. WENDY SOWELL GIBSON", "PREMIER KIDS CARE, INC.", "SAAD MEDICAL EQUIPMENT - SPANISH FO", "SAAD MEDICAL EQUIPMENT - UNIVERSITY", "BOTICA PHARMACY CORP.", "SAAD MEDICAL EQUIPMENT -D'IBERVILLE", "THRIFTY WHITE DRUG 729", "THRIFTY WHITE PHARMACY #727", "DYNAMEDICS MEDICAL SOLUTIONS INC", "ROBERTS HOME MEDICAL LLC", "YONKERS EXPRESS PHARMACY INC", "BLOOMING LIGHT RX INC", "THRIFTY WHITE PHARMACY #735", "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "HEALTHDIRECT INSTITUTIONAL PHARMACY", "THRIFTY WHITE DRUG #746", "THRIFTY WHITE PHARMACY #738", "BALL GROUND PHARMACY LLC", "HOSPITAL PHARMACY WEST", "HOSPITAL PHARMACY INC", "PREMIER KIDS CARE", "WEST CONCORD PHARMACY", "PHARMCAREOK OF TULSA INC", "THRIFTY WHITE PHARMACY #740", "THRIFTY WHITE PHARMACY #776", "THRIFTY WHITE PHARMACY #778", "THRIFTY WHITE PHARMACY #734", "ROTECH", "THRIFTY WHITE DRUG #759", "J&G MEDICAL SUPPLIES", "ACCESS PT PENNSYLVANIA", "PHARMACY ON U LLC", "ADVANCED MEDICAL SUPPLY INC", "DIABETIC SOLUTIONS INC", "THC OF NEVADA", "ADVANCED EYECARE", "THE MED-SHOP PHARMACY", "LIBERTY RX INC", "THRIFTY WHITE PHARMACY #775", "THRIFTY WHITE PHARMACY #781", "MEDI CITY PHARMACY INC", "U HEALTH PHARMACY LLC", "VALLEY VIEW", "CORONA PHARMACY RX INC.", "THE MEDICINE SHOPPE #2193", "MEDICAL PHARMACY PA", "VITAL CARE OF LAFAYETTE", "PINK PROMISES & DME LLC", "CHARITY COMFORT CARE MEDICAL SUPPLY", "CPR DME, LLC", "REMEDY PHARMACY", "ROYAL MEDICAL SUPPLY", "SAINT MARY AND JESSIE LLC", "BUCKNER NEIGHBORHOOD PHARMACY INC.", "PHARMSCRIPT OF FLORIDA LLC", "CVS PHARMACY #01254", "CVS PHARMACY #10449", "CVS PHARMACY #10174", "CVS PHARMACY #10487", "CVS PHARMACY #10414", "CVS PHARMACY #10521", "CVS PHARMACY #10486", "CVS PHARMACY #10428", "CVS PHARMACY #10446", "CVS PHARMACY #10265", "CVS PHARMACY #10544", "CVS PHARMACY #10350", "CVS PHARMACY #10215", "CVS PHARMACY #00496", "CVS PHARMACY #10540", "CVS PHARMACY # 05465", "CVS PHARMACY #04879", "CVS PHARMACY #01020", "CVS PHARMACY #04599", "CVS PHARMACY # 02282", "CVS PHARMACY # 00861", "CVS PHARMACY # 01225", "CVS PHARMACY #00860", "CVS PHARMACY # 00844", "CVS PHARMACY # 00810", "CVS PHARMACY # 00769", "CVS PHARMACY INC", "CVS PHARMACY # 01871", "CVS PHARMACY # 01002", "CVS PHARMACY # 01870", "CVS PHARMACY # 01247", "CVS PHARMACY # 01143", "CVS PHARMACY # 01085", "CVS PHARMACY # 01121", "CVS PHARMACY # 08319", "CVS PHARMACY # 04471", "CVS PHARMACY # 00148", "CVS PHARMACY # 00130", "CVS PHARMACY # 00119", "CVS PHARMACY # 01869", "CVS PHARMACY #01021", "CVS PHARMACY # 01041", "CVS PHARMACY #16419", "CVS PHARMACY # 16205", "CVS PHARMACY # 01111", "CVS PHARMACY #01264", "CVS PHARMACY #00915", "CVS PHARMACY #01874", "CVS PHARMACY #02325", "CVS PHARMACY #00995", "CVS PHARMACY #01853", "CVS PHARMACY #10782", "CVS PHARMACY #01049", "CVS PHARMACY #01885", "CVS PHARMACY #01862", "CVS PHARMACY # 05872", "CVS PHARMACY #00983", "CVS PHARMACY #01368", "CVS PHARMACY# 05407", "CVS PHARMACY #07607", "CVS PHARMACY #00307", "CVS PHARMACY #00117", "CVS PHARMACY #01886", "CVS PHARMACY #02283", "CVS PHAMRACY #05402", "CVS PHARMACY #01068", "CVS PHARMACY #00946", "CVS PHARMACY #01010", "CVS PHARMACY #01234", "CVS PHARMACY #00704", "CVS PHARMACY #00636", "CVS PHARMACY # 00318", "CVS PHARMACY #01238", "CVS PHARMACY #01130", "CVS PHARMACY #01872", "CVS PHARMACY #05874", "CVS PHARMACY #02254", "CVS PHARMACY #01850", "CVS PHARMACY #01094", "CVS PHARMACY # 05913", "CVS PHARMACY # 07170", "CVS PHARMACY #10324", "CVS PHARMACY #01859", "CVS PHARMACY # 01873", "CVS PHARMACY # 01875", "CVS PHARMACY #05002", "CVS PHARMACY #10665", "CVS PHARMACY 17604", "CVS PHARMACY #10601", "CVS PHARMACY #10637", "CVS PHARMACY #17335", "CVS PHARMACY #16009", "CVS PHARMACY #10906", "CVS PHARMACY #16013", "CVS PHARMACY #16895", "CVS PHARMACY #16024", "CVS PHARMACY #10758", "CVS PHARMACY #10603", "CVS PHARMACY #17276", "CVS PHARMACY #17603", "CVS PHARMACY #16074", "CVS PHARMACY #17046", "CVS PHARMACY #16081", "CVS PHARMACY #16831", "CVS PHARMACY #16033", "CVS PHARMACY #10139", "CVS PHARMACY #10598", "CVS PHARMACY #16855", "CVS PHARMACY #10752", "CVS PHARMACY #10635", "CVS PHARMACY #10775", "CVS PHARMACY #10595", "CVS PHARMACY #10580", "CVS PHARMACY #10638", "CVS PHARMACY #10671", "CVS PHARMACY #10576", "CVS PHARMACY # 05987", "CVS PHARMACY # 05822", "CVS PHARMACY # 05829", "CVS PHARMACY # 05836", "CVS PHARMACY # 02903", "CVS PHARMACY # 02935", "CVS PHAMRACY # 02936", "CVS PHARMACY # 02942", "CVS PHARMACY # 02981", "CVS PHARMACY #02844", "CVS PHARMASCY # 05797", "CVS PHARMACY # 02692", "CVS PHARMACY # 09086", "CVS PHARMACY #05619", "CVS PHARMACY 05482", "CVS PHARMACY # 02827", "CVS PHARMACY # 06935", "CVS PHARMACY #08910", "CVS PHARMACY #04396", "CVS PHARMACY 01768", "CVS PHARMACY #00513", "CVS PHARMACY #01900", "CVS PHARMACY #00488", "CVS PHARMACY #00365", "CVS PHARMACY #00220", "CVS PHARMACY #01034", "CVS PHARMACY # 01095", "CVS PHARMACY # 02878", "CVS PHARMACY #16935", "CVS PHARMACY #02600", "CVS PHARMACY #01248", "HIGHLAND PARK CVS LLC", "CVS PHARMACY #07020", "CVS PHARMACY # 07166", "CVS PHARMACY #04581", "CVS PHARMACY #10664", "CVS PHARMACY #10673", "CVS PHARMACY #10691", "CVS PHARMACY #10818", "CVS PHARMACY #10602", "CVS PHARMACY #10667", "CVS PHARMACY #10880", "CVS PHARMACY #01996", "CVS PHARMACY #10579", "CVS PHARMACY #10634", "CVS PHARMACY #10944", "CVS PHARMACY #10670", "CVS PHARMACY #07970", "CVS PHARMACY #06748", "CVS PHARMACY # 06937", "CVS PHARMACY 07017", "CVS PHARMACY # 07142", "CVS PHARMACY #01184", "CVS PHARMACY #00929", "CVS PHARMACY #01024", "CVS PHARMACY #00272", "CVS PHARMACY #01867", "CVS PHARMACY #01868", "CVS PHARMACY #01955", "CVS PHARMACY #02054", "CVS PHARMACY #02161", "CVS PHARMACY #02200", "CVS PHARMACY #00062", "CVS PHARMACY #00137", "CVS PHARMACY #00260", "CVS PHARMACY #00335", "CVS PHARMACY #01861", "CVS PHARMACY #00373", "CVS PHARMACY #00394", "CVS PHARMACY #00517", "CVS PHARMACY #02206", "CVS PHARMACY # 07232", "CVS PHARMACY #06505", "CVS PHARMACY #02959", "CVS PHARMACY #01022", "CVS PHARMACY # 01876", "CVS PHARMACY #01865", "CVS PHARMACY #07222", "CVS PHARMACY #01179", "CVS PHARMACY #09320", "CVS PHARMACY #07962", "CVS PHARMACY # 06933", "CVS PHARMACY #09099", "CVS PHARMACY #09130", "CVS PHARMACY #09142", "CVS PHARMACY # 09147", "CVS PHARMACY #09896", "CVS PHARMACY #09135", "CVS PHARMACY #09929", "LONGS DRUG STORES CALIFORNIA LLC", "CVS PHARMACY #09922", "CVS PHARMACY #09921", "CVS PHARMACY #09920", "CVS PHARMACY #09909", "CVS PHARMACY #09917", "CVS PHARMACY #09919", "CVS PHARMACY #09801", "CVS PHARMACY #09146", "CVS PHARMACY #09800", "CVS PHARMACY #09128", "LONGS DRUG STORE #09815", "CVS PHARMACY #09818", "CVS PHARMACY #09819", "CVS PHARMACY #09208", "CVS PHARMACY #09296", "CVS PHARMACY #05421", "CVS PHARMACY #08734", "CVS PHARMACY #07553", "CVS PHARMACY #09167", "CVS PHARMACY #09149", "CVS PHARMACY # 09162", "CVS PHARMACY 09150", "CVS PHARMACY 09152", "CVS PHARMACY 09153", "CVS PHARMACY 09155", "CVS PHARMACY #09154", "CVS PHARMACY # 09156", "CVS PHARMACY #09845", "CVS PHARMACY #09158", "CVS PHARMACY 09161", "CVS PHARMACY #09821", "CVS PHARMACY 09282", "CVS PHARMACY #09796", "CVS PHARMACY #09783", "CVS PHARMACY #09752", "CVS PHARMACY #09834", "CVS PHARMACY #09872", "CVS PHARMACY #09219", "CVS PHARMACY #09159", "CVS PHARMACY #09822", "CVS PHARMACY #10886", "CVS PHARMACY #10750", "CVS PHARMACY #10681", "CVS PHARMACY #10177", "CVS PHARMACY #05493", "CVS PHARMACY #00046", "CVS PHARMACY #01023", "CVS PHARMACY #01265", "CVS PHARMACY #01199", "CVS PHARMACY #00055", "CVS PHARMACY #00107", "CVS PHARMACY #00714", "CVS PHARMACY #00736", "CVS PHARMACY# 08441", "CVS PHARMACY #02201", "CVS PHARMACY # 01009", "CVS PHARMACY#01803", "CVS PHARMACY #01012", "CVS #05494", "CVS PHARMACY #04820", "CVS PHARMACY #04880", "CVS PHARMACY # 07319", "CVS PHARMACY# 01878", "CVS PHARMACY #01001", "CVS PHARMACY #10581", "CVS PHARMACY #10535", "CVS PHARMACY #05382", "CVS PHARMACY", "CVS PHARMACY #00131", "CVS PHARMACY #01531", "CVS PHARMACY #01845", "CVS PHARMACY #00604", "CVS PHARMACY #00632", "CVS PHARMACY #00654", "CVS PHARMACY #00674", "CVS PHARMACY #07242", "CVS PHARMACY # 09844", "CVS PHARMACY #09198", "HOOK-SUPERX LLC", "HOOK- SUPERX, L.L.C..", "LONGS DRUGS #09835", "CVS PHARMACY #09833", "CVS PHARMACY #09735", "CVS PHARMACY #09802", "CVS PHARMACY #09163", "CVS PHARMACY #09851", "CVS PHARMACY #09632", "CVS PHARMACY #09809", "CVS PHARMACY #09623", "CVS PHARMACY #01921", "CVS PHARMACY #02755", "CVS PHARMACY #02756", "CVS PHARMACY #02782", "CVS PHARMACY #02783", "CVS PHARMACY # 10794", "CVS PHARMACY #02784", "CVS PHARMACY #01657", "CVS PHARMACY #04773", "CVS PHARMACY # 05088", "CVS PHARMACY #00835", "CVS PHARMACY #16537", "CVS PHARMACY # 07969", "CVS PHARMACY # 03047", "CVS PHARMACY # 10606", "CVS PHARMACY #07227", "CVS PHARMACY #08266"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "practiceaddress1": {"label": ["511 MONROE TPKE", "1239 E PUTNAM AVE", "3514 MAIN ST", "3141 WILSON BLVD", "1240 FARMINGTON AVE", "219 BROAD ST", "358 W MAIN ST", "777 MAIN ST", "20 BANK ST", "94 PARK ST", "229 HOPE ST", "734 BRIDGEPORT AVE", "1341 LONG STREET", "6400 LANSDOWNE CENTER", "714 HOPMEADOW ST", "1200 MAIN ST", "632 MIDDLE TPKE", "311 MAIN ST", "26 DAVIS ST", "22 WINDSOR AVE", "1055 FARMINGTON AVE", "526 MERIDEN RD", "1968 BLACK ROCK TPKE", "6 QUEEN ST", "47 HAZARD AVE", "844 JONES HILL RD", "2045 DIXWELL AVE", "26 WATERBURY RD", "1425 BARNUM AVE", "2000 N MAIN ST", "581 HIGHLAND AVE", "323 CROMWELL AVE", "35 PADANARAM RD", "1 HAWLEY LN", "225 SOUND BEACH AVE", "690 WETHERSFIELD AVE", "153 BROAD ST", "3440 WILKINSON BLVD", "2981 S. MILITARY HWY", "99 GREENWICH AVE", "110 MAIN STREET", "163 MOUNTAIN RD", "25 BROADWAY AVE", "279 BOSTON POST RD", "479 BLUE HILLS AVE", "964 POST RD", "106 BOSTON POST RD", "191 W MAIN ST", "900 N 6TH STREET", "300 E 8TH ST", "3222 S MAIN ST", "2703 ROUTE 130", "2025 FIRST AVENUE SE", "5046 S SHERIDAN RD", "4016 S STATE HIGHWAY 97", "591 S MILL ST", "27 S COAST HWY", "5518 MAGAZINE ST", "124 W WASHINGTON AVE", "701 W GROVE ST", "915 HILL ST", "220 N ALEXANDER AVE", "5905 DOLLARWAY RD", "2611 E OAKLAND AVE", "602 HIGHWAY 16 E", "12352 FM 1957", "101 N BUSINESS 60", "214 S MAIN ST", "304 E MAIN ST", "6 E SPRINGFIELD RD", "1219 E BUSTAMANTE ST", "2321 7TH AVE", "10601 S MAY AVE", "5711 ALTAMA AVE", "23122 SAINT FRANCIS BLVD", "15245 BLUEBIRD ST NW", "530 3RD ST NW", "100 ASMA BLVD", "2621 GREENHAVEN RD", "820 BAY AVE", "11983 TAMIAMI TRL N", "102 PRINCE ROYAL DR", "433 W ALLEN AVE", "151 GUY PARK AVE", "11001 ROOSEVELT BLVD N", "516 BECKLEY CROSSING SHPG CTR", "810 SE WASHINGTON ST", "81 NORTH ST", "60 MIDDLE ST", "3710 MAIN ST", "40 EAST ST", "1875 BOSTON AVE", "20 BURNSIDE AVE", "45 S MAIN ST", "241 MIDDLE TPKE W", "15 CHESTERFIELD RD", "57 PROVIDENCE PIKE", "11 FOREST ST", "66 HIGH RIDGE RD", "903 BENHAM ST", "2251 COMMERCE BLVD", "1142 N DESLOGE DR", "2401 N CENTRAL AVE", "PR #14 KM 51.5", "17703 VIRGINIA AVE", "24 SCHOOL ST.", "605 N MAIN ST", "6068 S 1ST ST", "3303 W 26TH ST STE 101", "11500 W BROAD ST", "5580 GEORGETOWN RD", "13723 N LITCHFIELD RD", "871 W OAKLAND PARK BLVD", "11 ASHFORD AVE", "6505 E 71ST ST", "950 E TAFT AVE", "1357 VETERANS MEMORIAL BLVD", "901 SW STATE ROUTE 150", "4500 OLD PASS RD", "11085 CATHELL RD", "411 KING ST", "3375 RINCONADA BLVD", "58 PENNSYLVANIA AVE", "905 S MAIN ST", "661 MAIN ST", "540 W MAIN ST", "369 MAIN ST", "330 GRASMERE AVE", "37 W MAIN ST", "1657 ROUTE 12", "111 ALBANY TPKE", "150 WASHINGTON STREET", "965 WHITE PLAINS RD", "281 CONNECTICUT AVE", "710 FAYETTEVILLE ST", "14095 RICHMOND HWY", "3140 HWY 280", "206 US HIGHWAY 117 S", "3555 COLORADO BLVD", "1812 HOLLOWAY STREET", "407 W MAIN STREET", "1124 PATTON AVE", "454 S MAIN ST", "140 NC 102 W", "28895 W IL RTE 120", "101 E ATKINS ST", "244 E 161ST ST", "4021 CROSS TIMBERS ROAD", "1645 CRANIUM DR", "1606 HIGHLAND COLONY PKWY", "1921 S 77 SUNSHINE STRIP", "17970 N TAMIAMI TRL", "40 FLOWING SPRINGS WAY", "2590 N TEXAS ST", "1086 JEFF RD NW", "81 US HIGHWAY 9", "3800 W MADISON ST STE 101", "7403 ALOMA AVE", "2719 GRAND AVE", "4720 S KIRKMAN RD", "4720 N MARINE DR", "4710 S WESTERN AVE", "1800 W INDIANTOWN RD", "12405 NE 85TH ST", "3601 W WILLIAM CANNON DR", "3200 E BAY DR", "19710 HOLZWARTH RD", "19302 KUYKENDAHL RD", "128 E BRANDON BLVD", "4320 26TH ST W", "6003 14TH ST W", "11000 VENTURA BLVD", "9307 N LAMAR BLVD", "305 N BREED ST", "1634 S FEDERAL HWY", "9865 GLADES RD", "3200 S FEDERAL HWY", "1851 CLINT MOORE RD", "4218 LINDELL BLVD", "1515 N ALEXANDER DR", "355 CAMPBELL AVE", "720 BRANCHVILLE RD", "891N COLONY RD", "8 ROYCE CIR", "162 WASHINGTON AVE", "644 W PUTNAM AVE", "24 PERSHING DR", "14 CANDLEWOOD LAKE RD", "1181 MAIN ST", "6 WILLARD RD", "146 SOUTH ST", "7 DURANT AVE", "7950 FAYETTEVILLE RD", "283 W IL ROUTE 173", "301 UNIVERSITY AVE", "3801 BISCAYNE BLVD", "101 N TENNESSEE STREET", "3 PLAISTOW RD", "8815 STAGECOACH RD", "1601 MAIN ST", "4003 W VERNON AVE", "4030 ANNAS RETREAT", "125 MORRIS AVE", "3501 N HALSTED ST", "302 ROUTE 25A", "5555W 79TH ST", "5496 UNIVERSITY PKWY", "3501 UNIQUE CIRCLE", "12020 CULEBRA RD", "4353 LAKE OTIS PKWY", "1801 W 11TH ST", "900 MERIDIAN E", "1455 NE DIVISION ST", "1302 E 38TH ST", "22 DEPOT HILL RD", "969 HIGH RIDGE RD", "10 LATHROP RD", "17 W MAIN ST", "1 MIFFLIN ST", "200 BUTLER CMNS", "467 MAIN ST", "341 COTTAGE GROVE RD", "372 W MAIN ST", "1044 BOULEVARD", "525 BUCKLAND RD", "656 NEW HAVEN AVE", "5550 FM 423", "401 S ROOSEVELT DR", "599 W 4TH ST", "1449 N ARIZONA BLVD", "6519 MAIN ST", "1125 2ND ST", "831 KUHIO HWY", "1810 S IRISH RD", "1515 W PARADISE DR", "10562 BELLEVILLE RD", "1445 E CENTRAL CT", "822 CITY AVE S", "505 S. PINE RIDGE AVE", "804 PIKE ST", "100 SARA WAY", "1501 WAGNER AVE", "4141 PEARL RD", "593 NEWFIELD AVE", "326 MAIN ST", "3151 UNIVERSITY AVE", "9256 SLAUSON AVE", "1830 N BROADWAY", "74955 US HIGHWAY 111", "25829 NARBONNE AVE", "1200 N SEPULVEDA BLVD", "9100 ROSEDALE HWY", "43525 10TH ST W", "1790 AIRLINE HWY", "3033 VINTAGE BLVD", "2417 TONGASS AVE", "3500 BRUMBACK BLVD", "340 WESTWIND DR", "131 EUREKA TWNCTR DR", "1309 NW 12TH AVE", "354 PRIVATE DRIVE 288", "825 E GREEN BAY AVE", "410 GRAND VALLEY BLVD", "100 SYCAMORE ESTATES DR", "2021 E INDEPENDENCE ST", "180 RIVER RD", "1733 2ND ST S", "205 HOUSE CARLSON DR", "4000 S BOLGER RD", "1903 COBBS FORD RD", "1420 HIGHWAY 231 S", "805 US HIGHWAY 27 S", "6812 N LAMAR BLVD", "804 W MARKET ST", "324 ROOSEVELT RD", "875 E NAPIER AVE", "4995 E US ROUTE 36", "1311 N STATE ROUTE 48", "1150 E SIBLEY BLVD", "1835 SAND LAKE RD", "1403 WAUKEGAN RD", "6297 PGA BLVD", "6200 W WILLIAM CANNON DR", "1213 PALM BAY RD", "175 MALABAR RD NW", "901 N ANKENY BLVD", "5896 CORTEZ RD W", "2501 S LAMAR BLVD", "6230 W. IRLO BRONSON MEMORIAL HWY", "5600 S 1ST ST", "5895 W PEORIA AVE", "900 SHELBY RD", "2310 MCCAUSLAND AVE", "3300 BROWN RD", "420 N FRAZIER ST", "7731 E NORTHERN LIGHTS BLVD", "301 N SANTA CLAUS LN", "MILE 1907 SEWARD HWY", "4000 W DIMOND BLVD", "500 RIVER ST", "17 US HIGHWAY 206", "11352 DORSETT RD", "169 TERRACE ST", "596 PROVIDENCE HWY", "1505 MERMAID AVE", "115 JOHNSON AVE N", "2249 86TH ST", "846 FORT DALE RD", "2846 E 101ST ST", "130 3RD ST NE", "3105 S MERIDIAN AVE", "3310 LAMAR AVE", "18049 MAGNOLIA ST", "2600 HWY 138", "611 STATE HIGHWAY 54", "1133 N MAIN ST", "38020 US HIGHWAY 18", "3915 GATEWAY DR", "920 US HWY 12", "W190 N9855 APPLETON AVE", "800 FOXCROFT AVE", "3333 US ROUTE 60", "254 CASSIDY BLVD", "4000 RED BANK RD", "18401 BUSINESS 13", "8118 PERRY HILLS CT", "2136 CAMPBELLSVILLE RD", "650 S TRUMAN BLVD", "3240 S WESTERN AVE", "414 KINGS HIGHWAY EAST", "5935 W ADDISON ST", "3915 S NOLAND RD", "600 W KARSCH BLVD", "1200 S MAIN ST", "10555 W OVERLAND RD", "955 N STATE ST", "2329 W CLAY ST", "13242 WICKER AVE", "5345 N IH 35", "4822 CATON FARM RD", "33975 DATE PALM DR", "11701 DETROIT AVE", "76 HEIGHTS RD", "W62N190 WASHINGTON AVE", "15738 W CAPITOL DR", "W156N11261 PILGRIM RD", "2204 NEVA RD", "603 W PINE ST", "9449 S HOWELL AVE", "2677 S 108TH ST", "S79W18885 JANESVILLE RD", "2420 E COLONIAL DR", "700 W COLLEGE AVE", "12101 SHELBYVILLE RD", "7914 FEGENBUSH LN", "8802 WEST COLONIAL DR", "12295 BISCAYNE BLVD", "8000 LAKE UNDERHILL RD", "20020 CORTEZ BLVD", "9320 LACKLAND RD", "8790 W MCNAB RD", "6401 W COMMERCIAL BLVD", "8800 W 95TH ST", "1723 E YOUNG CIR", "4200 WINNETKA AVE N", "4950 COUNTY RD 101", "655 NICOLLET MALL", "5428 LYNDALE AVE S", "780 E 9TH ST", "1600 N NOVA RD", "3705 HOLLYWOOD BLVD", "2280 N LAS VEGAS BLVD", "3325 N MAIN ST", "815 SUMMIT ST", "2311 OGDEN AVE", "23684 STRICKLAND DR", "200 MARQUIS PKWY", "4060 CAMPBELL AVE", "2601 RICHMOND HWY", "3336 WILSON BLVD", "2035 4TH AVE", "115 N 19TH AVE", "1902 BROOKS ST", "2402 GRAND AVE", "2001 10TH AVE S", "10100 BROOK RD", "1275 HARRISON AVE", "1300 E PARK AVE", "1311 GRAND AVE", "425 MAIN ST", "307 SE 4TH ST", "617 CENTRAL AVE", "3095 N MONTANA AVE", "2601 CENTRAL AVE", "1020 SENECA RD", "6010 PLANK RD", "603 N MONTANA AVE", "681 S OHIO ST", "1060 WOODS MILL PLZ", "452 WYTHE CREEK RD", "1788 N PIERCE ST", "3401 CHARLES STREET", "4310 FORTUNA CENTER PLZ", "1245 N MILITARY HWY", "15341 MONTANUS DR", "191 MARKET ST", "721 SOUTHPARK BLVD", "155 HOLT GARRISON PKWY", "2530 WEIR RD", "1316 GREENBRIER PKWY", "25 S GATEWAY DR", "3424 MORMON COULEE RD", "1250 WATERS PLACE", "136 JESSICA LN", "6238 HADLEY ST", "5722 GATEWOOD AVE", "7922 ROSECRANS AVE", "821 PROSPECT AVE", "940A SOUTHERN BLVD", "111 E CARSON ST", "4566 E FLORENCE AVE", "111 S 3RD ST", "1501 23RD AVE", "1075 W FM 3040", "13308 MERIDIAN E", "5137 E BASELINE RD", "3201 W GORE BLVD", "8440 E MCDONALD DR", "2611 W PARK ROW", "1222 E WOODLAND AVE", "301 S MAIN ST", "233 CARMICHAEL WAY", "12130 JEFFERSON AVE", "1700 SEMINOLE TRL", "17307 HULL STREET RD", "709 E MAIN ST", "12455 W BROAD ST", "2775 GODWIN BLVD", "2441 EISENHOWER AVE", "2704 OAKLAWN BLVD", "7235 BELL CREEK RD", "3149 E HARRY ST", "2440 N LEBANON ST", "1180 W 19TH ST", "8301 N CHURCH RD", "4201 N BELT HWY", "1212 S MADISON ST", "2100 N MAIN AVE", "885 E HIGHWAY 60", "11900 SAINT CHARLES ROCK RD", "2395 MAIN ST", "11601 E US 40 HWY", "2401 US HWY 14 EAST", "4024 ELKHART RD", "3270 TELEGRAPH RD", "16205 MILITARY TRL", "5245 RANGELINE SERVICE RD S", "3005 CHARITY ST", "7955 HWY N", "12380 SAINT CHARLES ROCK RD", "1749 WOODSTONE DR", "2120 W OSAGE ST", "3603 MCMASTERS AVE", "9433 MANCHESTER RD", "8101 CLAYTON RD", "4501 AIRLINE DR", "101 FLORIDA AVE SE", "880 S NEOSHO BLVD", "300 KEYSER AVE", "6250 PASEO DEL NORTE NE", "7776 COX LN", "188 UNION ST", "12659 S RIDGELAND AVE", "15514 W WADDELL RD", "806 NISSAN DR", "602 ALABAMA AVE", "2141 E BROADWAY RD", "52 JERICHO TPKE", "120 BERGEN AVE", "3900 S GRAND BLVD", "7402 N 56TH ST", "819 S SALINA ST", "2170 86TH ST", "2577 MALL RD", "950 MAIN ST", "1311 RING RD", "298 CENTRAL AVE", "2519 N 7TH ST", "7617 MYRTLE AVE", "3595 HIRAM DOUGLASVILLE HWY", "5501 W OREM DR", "3341 HALLS FERRY RD", "747 HIGHWAY 1 S", "765 E GLENN AVE", "54 CENTER SQ", "1615 N SAGINAW RD", "2985 CROOKS RD", "3100 N MARKET ST", "7994 US HIGHWAY 51 N", "3880 DICKERSON PIKE"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "practiceaddress2": {"label": ["UNIT B1", "CVS PHARMACY #01241", "CVS PHARMACY #06807", "STE E", "STE 11", "STE G", "STE B", "STE 203-E", "STE 203A", "STE 100C", "STE 2", "STE 116", "STE 1400", "BO PUEBLO SEC PUEBLO NORTE", "STE 100", "WALGREENS #5495", "# 36", "STE 260", "WALGREENS #5549", "STE A", "WALGREENS #5727", "WALGREENS #6153", "TOWER 2", "STE P2", "UNIT 8", "STE 4", "STE 202", "STE 907", "STE 107", "STE 102"], "data": [458, 1, 1, 2, 1, 1, 8, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]}, "practicecity": {"label": ["MONROE", "RIVERSIDE", "COVENTRY", "ARLINGTON", "WEST HARTFORD", "WINDSOR", "AVON", "HARTFORD", "GRANBY", "NEW CANAAN", "STAMFORD", "MILFORD", "CHARLOTTESVILLE", "ALEXANDRIA", "SIMSBURY", "WILLIMANTIC", "STORRS", "TERRYVILLE", "OAKVILLE", "VERNON ROCKVILLE", "KENSINGTON", "WATERBURY", "FAIRFIELD", "NEWTOWN", "ENFIELD", "WEST HAVEN", "HAMDEN", "PROSPECT", "STRATFORD", "CHESHIRE", "ROCKY HILL", "DANBURY", "OLD GREENWICH", "MERIDEN", "CHARLOTTE", "CHESAPEAKE", "GREENWICH", "HEBRON", "SUFFIELD", "MYSTIC", "ORANGE", "DARIEN", "WATERFORD", "ASHDOWN", "BLYTHEVILLE", "DANVILLE", "JOPLIN", "NORTH BRUNSWICK", "MOULTRIE", "TULSA", "SAND SPRINGS", "PRYOR", "NEWPORT", "NEW ORLEANS", "AVA", "EL DORADO", "ELLISVILLE", "PORT ALLEN", "PINE BLUFF", "BLOOMINGTON", "CARTHAGE", "SAN ANTONIO", "MANSFIELD", "SEYMOUR", "LINN", "SULLIVAN", "LAREDO", "ANOKA", "OKLAHOMA CITY", "BRUNSWICK", "SAINT FRANCIS", "ANDOVER", "ELK RIVER", "LAFAYETTE", "CAPITOLA", "NAPLES", "BEREA", "SAN DIMAS", "AMSTERDAM", "ST PETERSBURG", "BECKLEY", "IDABEL", "BRISTOL", "BRIDGEPORT", "NEW MILFORD", "EAST HARTFORD", "UNIONVILLE", "MANCHESTER", "EAST LYME", "PUTNAM", "BONNE TERRE", "MOUND", "DESLOGE", "HUMBOLDT", "AIBONITO", "HAGERSTOWN", "BOSTON", "IRONTON", "MILAN", "CHICAGO", "RICHMOND", "INDIANAPOLIS", "SURPRISE", "WILTON MANORS", "DOBBS FERRY", "SAPULPA", "EUPORA", "LEES SUMMIT", "GULFPORT", "BERLIN", "CHAPPAQUA", "LAS CRUCES", "NIANTIC", "TORRINGTON", "EAST HAVEN", "STAFFORD SPRINGS", "GALES FERRY", "CANTON", "TRUMBULL", "NORWALK", "DURHAM", "WOODBRIDGE", "ALEXANDER CITY", "BURGAW", "DENVER", "JAMESTOWN", "ASHEVILLE", "SPARTA", "AYDEN", "LAKEMOOR", "DOBSON", "BRONX", "FLOWER MOUND", "ROCK HILL", "MADISON", "HARLINGEN", "NORTH FORT MYERS", "CHARLES TOWN", "HUNTSVILLE", "ENGLISHTOWN", "WINTER PARK", "AMES", "ORLANDO", "JUPITER", "KIRKLAND", "AUSTIN", "HOLMES BEACH", "SPRING", "BRANDON", "BRADENTON", "STUDIO CITY", "LOS ANGELES", "BOYNTON BEACH", "BOCA RATON", "DELRAY BEACH", "SAINT LOUIS", "BAYTOWN", "RIDGEFIELD", "WALLINGFORD", "NORTH HAVEN", "ANSONIA", "BROOKFIELD", "NEWINGTON", "BETHEL", "RALEIGH", "ANTIOCH", "SAN DIEGO", "MIAMI", "CARTERSVILLE", "PLAISTOW", "LITTLE ROCK", "KINSTON", "ST THOMAS", "SPRINGFIELD", "MILLER PLACE", "BURBANK", "WINSTON SALEM", "FORT MYERS", "ANCHORAGE", "TRACY", "MILTON", "GRESHAM", "TACOMA", "SOUTHBURY", "PLAINFIELD", "CLINTON", "PHILADELPHIA", "BUTLER", "BLOOMFIELD", "NORWICH", "SOUTH WINDSOR", "DERBY", "FRISCO", "SEASIDE", "BENSON", "COOLIDGE", "BONNERS FERRY", "BRENTWOOD", "KAPAA", "CHILTON", "WEST BEND", "BELLEVILLE", "UNION", "RIPLEY", "MERRILL", "MARIETTA", "BELLE VERNON", "GREENVILLE", "MEDINA", "SOUTHINGTON", "PICO RIVERA", "SANTA MARIA", "INDIAN WELLS", "LOMITA", "MANHATTAN BEACH", "BAKERSFIELD", "LANCASTER", "HOLLISTER", "JUNEAU", "KETCHIKAN", "KENOSHA", "EUREKA", "SOUTH POINT", "SAUKVILLE", "MARTINSVILLE", "AURORA", "LISBON", "MERIDIAN", "BATESVILLE", "INDEPENDENCE", "PRATTVILLE", "TROY", "CYNTHIANA", "WARREN", "GLEN ELLYN", "BENTON HARBOR", "DECATUR", "DOLTON", "GLENVIEW", "PALM BEACH GARDENS", "MELBOURNE", "PALM BAY", "ANKENY", "KISSIMMEE", "GLENDALE", "KINGS MOUNTAIN", "CONROE", "NORTH POLE", "SEWARD", "PATERSON", "STANHOPE", "MARYLAND HEIGHTS", "HAWORTH", "DEDHAM", "BROOKLYN", "FOSSTON", "HARTLEY", "PARIS", "FOUNTAIN VALLEY", "STOUGHTON", "BLACK RIVER FALLS", "VIROQUA", "PRAIRIE DU CHIEN", "EAU CLAIRE", "BARABOO", "GERMANTOWN", "MARTINSBURG", "HUNTINGTON", "PIKEVILLE", "CINCINNATI", "BRANSON WEST", "NOTTINGHAM", "LEBANON", "FESTUS", "MARION", "FARMINGTON", "ROSWELL", "BOISE", "JACKSON", "SAINT CHARLES", "CEDAR LAKE", "CATHEDRAL CITY", "LAKEWOOD", "CEDARBURG", "ANTIGO", "OAK CREEK", "WEST ALLIS", "MUSKEGO", "APPLETON", "MIDDLETOWN", "LOUISVILLE", "OCOEE", "NORTH MIAMI", "BROOKSVILLE", "OVERLAND", "TAMARAC", "HICKORY HILLS", "HOLLYWOOD", "NEW HOPE", "MINNETONKA", "MINNEAPOLIS", "HIALEAH", "HOLLY HILL", "NORTH LAS VEGAS", "ROCKFORD", "ELGIN", "ASHBURN", "WILLIAMSBURG", "SEATTLE", "BOZEMAN", "MISSOULA", "BILLINGS", "GREAT FALLS", "GLEN ALLEN", "BUTTE", "ANACONDA", "LAUREL", "HELENA", "FREDERICKSBURG", "SALINA", "CHESTERFIELD", "POQUOSON", "FALLS CHURCH", "DUMFRIES", "NORFOLK", "CULPEPER", "WINCHESTER", "COLONIAL HEIGHTS", "CHESTER", "LA CROSSE", "OLIVE HILL", "RAYTOWN", "HOUSTON", "PARAMOUNT", "WESTBURY", "CARSON", "CUDAHY", "LEWISVILLE", "PUYALLUP", "GILBERT", "LAWTON", "SCOTTSDALE", "BARRON", "STUART", "NEWPORT NEWS", "MOSELEY", "FLOYD", "SUFFOLK", "HOPEWELL", "MECHANICSVILLE", "WICHITA", "HIGGINSVILLE", "KANSAS CITY", "SAINT JOSEPH", "WEBB CITY", "MOUNTAIN GROVE", "MONETT", "BRIDGETON", "ROCHESTER", "RICHLAND CENTER", "GOSHEN", "MOBILE", "ABBEVILLE", "DARDENNE PRAIRIE", "SAINT PETERS", "PACIFIC", "HANNIBAL", "ST. LOUIS", "CLAYTON", "METAIRIE", "DENHAM SPRINGS", "NEOSHO", "NATCHITOCHES", "ALBUQUERQUE", "WEST CHESTER", "VERNON", "PALOS HEIGHTS", "SMYRNA", "TEMPE", "MINEOLA", "BERGENFIELD", "TAMPA", "SYRACUSE", "FLORENCE", "MUNFORDVILLE", "ELIZABETHTOWN", "LAWRENCE", "WEST MONROE", "HIRAM", "VICKSBURG", "AUBURN", "EAST LONGMEADOW", "MIDLAND", "ROCHESTER HILLS", "SHREVEPORT", "MILLINGTON", "NASHVILLE"], "data": [1, 1, 1, 5, 2, 1, 1, 4, 1, 1, 5, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 2, 4, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 7, 1, 2, 1, 3, 1, 1, 1, 2, 2, 5, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "practicestate": {"label": ["NC", "CA", "MD", "NY", "TX", "WA", "KY", "AZ", "NJ", "PA", "SC", "NH", "AR", "TN", "AL", "MS", "FL", "MO", "MA", "CO", "MN", "OK", "NV", "MI", "OH", "VA", "MT", "IL", "GA", "WY", "WI", "VT", "KS", "LA", "NM", "IN", "HI", "PR"], "data": [5, 71, 5, 38, 68, 2, 2, 1, 5, 20, 2, 2, 2, 1, 3, 6, 12, 1, 126, 19, 33, 3, 3, 1, 1, 9, 1, 36, 4, 2, 3, 1, 1, 2, 4, 3, 1, 1]}, "practicezip9code": {"label": ["705.0 - 99902224.5", "99902224.5 - 199803744.0", "199803744.0 - 299705263.5", "299705263.5 - 399606783.0", "399606783.0 - 499508302.5", "499508302.5 - 599409822.0", "599409822.0 - 699311341.5", "699311341.5 - 799212861.0", "799212861.0 - 899114380.5", "899114380.5 - 999015900"], "data": [154, 53, 21, 26, 7, 35, 37, 64, 30, 73]}, "telephonenumber": {"label": ["-2141564683.0 - -1712887730.7", "-1712887730.7 - -1284210778.4", "-1284210778.4 - -855533826.1", "-855533826.1 - -426856873.8", "-426856873.8 - 1820078.5", "1820078.5 - 430497030.8", "430497030.8 - 859173983.1", "859173983.1 - 1287850935.4", "1287850935.4 - 1716527887.7", "1716527887.7 - 2145204840.0"], "data": [46, 61, 54, 48, 52, 12, 93, 56, 9, 69]}, "specialitieslist": {"label": ["Pharmacy", "Medical Supply Company Other", "Certified Other|Pharmacy", "MSC With Respiratory Therapist", "MSC With Orthotic-Prosthetic", "Pharmacy|Grocery Store", "Pharmacy|Optician", "Medical Supply Company Other|Pharmacy|Optician", "Medical Supply Company Other|Orthotic Personnel", "Optometrist", "Medical Supply Company Other|MSC With Respiratory Therapist", "Optometrist|Optician", "Prosthetic Personnel", "Medical Supply Company Other|MSC With Orthotic Personnel", "MSC With Orthotic Personnel"], "data": [405, 6, 4, 1, 3, 21, 50, 1, 1, 2, 2, 1, 1, 1, 1]}, "providertypelist": {"label": ["PHYSICIAN ASSISTANT", "OXYGEN & EQUIPMENT"], "data": [498, 2]}, "supplieslist": {"label": ["Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Nebulizer Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings|Lymphedema Compression Treatment Items", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Wheelchairs (Standard Manual)|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Continuous Positive Airway Pressure (CPAP) Devices|Respiratory Assist Devices", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual Related Accessories)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Canes and/or Crutches|Patient Lifts|Wheelchairs (Standard Manual Related Accessories)|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "Speech Generating Devices", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Nebulizer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies", "Limb Prostheses", "Nebulizer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Enteral Nutrients|Nebulizer Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Urological Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Antiemetic Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Traction Equipment|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom"], "data": [132, 28, 200, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 4, 8, 8, 1, 1, 41, 8, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "latitude": {"label": ["18.0 - 21.0", "21.0 - 24.0", "24.0 - 27.0", "27.0 - 30.0", "30.0 - 33.0", "33.0 - 36.0", "36.0 - 39.0", "39.0 - 42.0", "42.0 - 45.0", "45.0 - 48.0"], "data": [2, 1, 19, 27, 38, 63, 102, 166, 44, 31]}, "longitude": {"label": ["-159.0 - -149.5", "-149.5 - -140.0", "-140.0 - -130.5", "-130.5 - -121.0", "-121.0 - -111.5", "-111.5 - -102.0", "-102.0 - -92.5", "-92.5 - -83.0", "-83.0 - -73.5", "-73.5 - -64.0"], "data": [1, 0, 0, 15, 61, 28, 100, 66, 68, 161]}, "is_contracted_for_cba": {"label": ["0"], "data": [500]}, "participationbegindate_dayofmonth": {"label": ["1.0 - 3.6", "3.6 - 6.2", "6.2 - 8.8", "8.8 - 11.4", "11.4 - 14.0", "14.0 - 16.6", "16.6 - 19.2", "19.2 - 21.8", "21.8 - 24.4", "24.4 - 27"], "data": [407, 17, 17, 12, 4, 15, 8, 4, 2, 4]}, "participationbegindate_month": {"label": ["1", "12", "11", "10"], "data": [416, 15, 68, 1]}, "participationbegindate_year": {"label": ["2023", "2022", "2020", "2017", "2014", "2019"], "data": [152, 199, 32, 50, 58, 9]}, "businessname_stringindexer_transform": {"label": ["127.0", "6.0", "109.0"], "data": [497, 2, 1]}, "practicename_stringindexer_transform": {"label": ["467.0"], "data": [500]}, "practiceaddress1_stringindexer_transform": {"label": ["500.0 - 500.0"], "data": [500]}, "practiceaddress2_stringindexer_transform": {"label": ["0.0 - 3.0", "3.0 - 6.0", "6.0 - 9.0", "9.0 - 12.0", "12.0 - 15.0", "15.0 - 18.0", "18.0 - 21.0", "21.0 - 24.0", "24.0 - 27.0", "27.0 - 30.0"], "data": [469, 7, 3, 3, 3, 3, 3, 3, 3, 3]}, "practicecity_stringindexer_transform": {"label": ["0.0 - 39.3", "39.3 - 78.6", "78.6 - 117.9", "117.9 - 157.2", "157.2 - 196.5", "196.5 - 235.8", "235.8 - 275.1", "275.1 - 314.4", "314.4 - 353.7", "353.7 - 393.0"], "data": [117, 69, 39, 40, 39, 39, 40, 39, 39, 39]}, "practicestate_stringindexer_transform": {"label": ["0.0 - 3.8", "3.8 - 7.6", "7.6 - 11.4", "11.4 - 15.2", "15.2 - 19.0", "19.0 - 22.8", "22.8 - 26.6", "26.6 - 30.4", "30.4 - 34.2", "34.2 - 38.0"], "data": [303, 108, 32, 18, 9, 10, 8, 5, 4, 3]}, "specialitieslist_stringindexer_transform": {"label": ["0.0 - 1.4", "1.4 - 2.8", "2.8 - 4.2", "4.2 - 5.6", "5.6 - 7.0", "7.0 - 8.4", "8.4 - 9.8", "9.8 - 11.2", "11.2 - 12.6", "12.6 - 14.0"], "data": [425, 0, 31, 2, 9, 17, 1, 6, 3, 1]}, "providertypelist_stringindexer_transform": {"label": ["0", "1"], "data": [498, 2]}, "supplieslist_stringindexer_transform": {"label": ["1.0 - 6.5", "6.5 - 12.0", "12.0 - 17.5", "17.5 - 23.0", "23.0 - 28.5", "28.5 - 34.0", "34.0 - 39.5", "39.5 - 45.0", "45.0 - 50.5", "50.5 - 56.0"], "data": [352, 7, 2, 1, 0, 1, 0, 0, 2, 135]}}}, "ManualFE": {"FE": [{"transformationsData": [{"transformation_label": "novalue"}], "feature": "provider_id", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "20494650.01", "stddev": "1133930.19", "min": "20310995", "max": "34356956", "missing": "0"}, "updatedLabel": "provider_id"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "acceptsassignement", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.92", "stddev": "0.27", "min": "0", "max": "1", "missing": "0"}, "updatedLabel": "acceptsassignement"}, {"transformationsData": [{"feature_label": "participationbegindate", "transformation_label": "Extract Date"}], "feature": "participationbegindate", "type": "date", "selected": true, "replaceby": "random", "stats": {"count": "", "mean": "", "stddev": "", "min": "", "max": "", "missing": "0"}, "transformation": [{"transformation": "Extract Date", "selectedAsDefault": 1}], "generated": false, "updatedLabel": "participationbegindate"}, {"transformationsData": [{"feature_label": "businessname", "transformation_label": "String Indexer"}], "feature": "businessname", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC", "missing": "0", "distinct": "127"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "businessname"}, {"transformationsData": [{"feature_label": "practicename", "transformation_label": "String Indexer"}], "feature": "practicename", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC", "missing": "0", "distinct": "467"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicename"}, {"transformationsData": [{"feature_label": "practiceaddress1", "transformation_label": "String Indexer"}], "feature": "practiceaddress1", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "1 S MAIN ST", "max": "ONE DAVIS SQ", "missing": "0", "distinct": "500"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress1"}, {"transformationsData": [{"feature_label": "practiceaddress2", "transformation_label": "String Indexer"}], "feature": "practiceaddress2", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "42", "mean": "", "stddev": "", "min": "# 36", "max": "WALGREENS #6153", "missing": "458", "distinct": "29"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress2"}, {"transformationsData": [{"feature_label": "practicecity", "transformation_label": "String Indexer"}], "feature": "practicecity", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "ABBEVILLE", "max": "WOODBRIDGE", "missing": "0", "distinct": "397"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicecity"}, {"transformationsData": [{"feature_label": "practicestate", "transformation_label": "String Indexer"}], "feature": "practicestate", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "AK", "max": "WV", "missing": "0", "distinct": "43"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicestate"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "practicezip9code", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "424344798.64", "stddev": "358451425.83", "min": "2472", "max": "981993202", "missing": "0"}, "updatedLabel": "practicezip9code"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "telephonenumber", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "6144013752076.46", "stddev": "136516631952037.42", "min": "2014881230", "max": "3052621292106456", "missing": "0"}, "updatedLabel": "telephonenumber"}, {"transformationsData": [{"feature_label": "specialitieslist", "transformation_label": "String Indexer"}], "feature": "specialitieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "Certified Other|Pharmacy", "max": "Prosthetic Personnel", "missing": "0", "distinct": "15"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "specialitieslist"}, {"transformationsData": [{"feature_label": "providertypelist", "transformation_label": "String Indexer"}], "feature": "providertypelist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "23", "mean": "", "stddev": "", "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT", "missing": "477", "distinct": "1"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "providertypelist"}, {"transformationsData": [{"feature_label": "supplieslist", "transformation_label": "String Indexer"}], "feature": "supplieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings", "missing": "0", "distinct": "56"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "supplieslist"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "latitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "38.59", "stddev": "5.16", "min": "18.23407", "max": "48.57833", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "latitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "longitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "-89.16", "stddev": "17.29", "min": "-157.8097", "max": "-66.03487", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "longitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "is_contracted_for_cba", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.0", "min": "0", "max": "0", "missing": "0"}, "updatedLabel": "is_contracted_for_cba"}, {"feature": "participationbegindate_dayofmonth", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "3.4", "stddev": "5.98", "min": "1", "max": "31", "missing": "0"}, "updatedLabel": "participationbegindate_da..."}, {"feature": "participationbegindate_month", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2.71", "stddev": "3.81", "min": "1", "max": "12", "missing": "0"}, "updatedLabel": "participationbegindate_mo..."}, {"feature": "participationbegindate_year", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2020.69", "stddev": "2.99", "min": "2014", "max": "2023", "missing": "0"}, "updatedLabel": "participationbegindate_ye..."}, {"feature": "businessname_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "126.48", "stddev": "7.69", "min": "6.0", "max": "127.0", "missing": "0"}, "updatedLabel": "businessname_stringindexe..."}, {"feature": "practicename_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "467.0", "stddev": "0.0", "min": "467.0", "max": "467.0", "missing": "0"}, "updatedLabel": "practicename_stringindexe..."}, {"feature": "practiceaddress1_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "500.0", "stddev": "0.0", "min": "500.0", "max": "500.0", "missing": "0"}, "updatedLabel": "practiceaddress1_stringin..."}, {"feature": "practiceaddress2_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "3.87", "stddev": "9.88", "min": "0.0", "max": "30.0", "missing": "0"}, "updatedLabel": "practiceaddress2_stringin..."}, {"feature": "practicecity_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "341.73", "stddev": "115.44", "min": "0.0", "max": "393.0", "missing": "0"}, "updatedLabel": "practicecity_stringindexe..."}, {"feature": "practicestate_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "20.53", "stddev": "13.58", "min": "0.0", "max": "38.0", "missing": "0"}, "updatedLabel": "practicestate_stringindex..."}, {"feature": "specialitieslist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "0.49", "stddev": "1.58", "min": "0.0", "max": "14.0", "missing": "0"}, "updatedLabel": "specialitieslist_stringin..."}, {"feature": "providertypelist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.06", "min": "0", "max": "1", "missing": "0"}, "updatedLabel": "providertypelist_stringin..."}, {"feature": "supplieslist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "4.26", "stddev": "10.07", "min": "0.0", "max": "55.0", "missing": "0"}, "updatedLabel": "supplieslist_stringindexe..."}], "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "autoFE_flag": true, "stageId": "678abdf1bdb869a10b24512c", "FESamplePath": "/FileStore/platform/sampleData/678abdf1bdb869a10b24512c_AutoFE/part-00000-270dd1e6-25f2-4b5e-ac6a-f61164853101-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/678abdf1bdb869a10b24512c_AutoFE/part-00000-270dd1e6-25f2-4b5e-ac6a-f61164853101-c000.csv", "samplecount": 500, "originalcount": 59566, "dataPercentage": "10", "FEGraph": [{"values": {"label": ["20310995.0 - 21715591.1", "21715591.1 - 23120187.2", "23120187.2 - 24524783.3", "24524783.3 - 25929379.4", "25929379.4 - 27333975.5", "27333975.5 - 28738571.6", "28738571.6 - 30143167.7", "30143167.7 - 31547763.8", "31547763.8 - 32952359.9", "32952359.9 - 34356956"], "data": [495, 0, 0, 1, 1, 0, 0, 0, 0, 3]}, "label": "provider_id", "count": 10, "min": 20310995.0, "max": 34356956}, {"values": {"label": ["1", "0"], "data": [461, 39]}, "label": "acceptsassignement", "count": 2, "min": "0", "max": "1"}, {"values": {"label": ["2024-01-19 00:00:00", "2024-01-17 00:00:00", "2024-01-16 00:00:00", "2024-01-15 00:00:00", "2024-01-14 00:00:00", "2024-01-12 00:00:00", "2024-01-11 00:00:00", "2024-01-10 00:00:00", "2024-01-09 00:00:00", "2024-01-08 00:00:00", "2023-12-07 00:00:00", "2023-12-06 00:00:00", "2023-12-05 00:00:00", "2023-12-04 00:00:00", "2023-12-01 00:00:00", "2023-11-30 00:00:00", "2023-11-29 00:00:00", "2023-11-28 00:00:00", "2023-11-27 00:00:00", "2023-11-22 00:00:00", "2023-11-20 00:00:00", "2023-11-19 00:00:00", "2023-11-18 00:00:00", "2023-11-17 00:00:00", "2023-11-16 00:00:00", "2023-11-15 00:00:00", "2023-11-10 00:00:00", "2024-01-04 00:00:00", "2023-11-09 00:00:00", "2023-11-08 00:00:00", "2023-11-07 00:00:00", "2023-11-21 00:00:00", "2023-11-14 00:00:00", "2023-11-13 00:00:00", "2023-11-11 00:00:00", "2024-01-05 00:00:00", "2024-01-02 00:00:00", "2024-01-01 00:00:00", "2023-11-06 00:00:00", "2023-11-03 00:00:00", "2023-11-02 00:00:00", "2023-11-01 00:00:00", "2023-10-31 00:00:00", "2023-01-01 00:00:00"], "data": [1, 2, 2, 1, 1, 1, 1, 5, 2, 1, 1, 4, 1, 6, 3, 2, 3, 4, 4, 2, 2, 1, 1, 3, 3, 5, 2, 3, 1, 12, 3, 2, 3, 3, 1, 1, 6, 73, 2, 4, 2, 3, 1, 316]}, "label": "participationbegindate", "count": 44, "min": "", "max": ""}, {"values": {"label": ["CONNECTICUT CVS PHARMACY LLC", "VIRGINIA CVS PHARMACY LLC", "NORTH CAROLINA CVS PHARMACY LLC", "WALGREEN CO", "BEE'S MEDICAL EQUIPMENT & SUPPLIES LLC", "GOODRICH PHARMACY INC", "CREST RX LLC", "SOUTHEASTERN PHARMACY LLC", "ADVANCED HEALTHCARE SOLUTIONS LLC", "CPAP EXPERTS LLC", "OSO ORTHOTICS & PROSTHETICS LLC", "MED-SAVE LLC", "A PLUS DURABLE MEDICAL EQUIPMENTS LLC", "GUY PARK PHARMACY LLC", "CURANT HEALTH FLORIDA LLC", "PREMIER PHARMACY & WELLNESS INC", "IDABEL EXPRESS PHARMACY LLC", "SAFEWAY INC", "PENNSYLVANIA CVS PHARMACY LLC", "RANDALLS FOOD & DRUGS LP", "WAL-MART STORES EAST, LP", "GARFIELD BEACH CVS LLC", "CARR-GOTTSTEIN FOODS CO", "YAGNAM LLC", "WILLIAM RICHARD HOLDSWORTH", "BIC IN HOME SERVICES, LLC", "TERRACE APOTHECARY, INC", "DEDHAM PHARMACY & MEDICAL SUPPLY", "FRISCIA PHARMACY INC", "FOSSTON PHARMACY & GIFTS INC", "AWARD PHARMACY CORP", "GARDNER EYE CARE LLC", "CARTER HEALTHCARE DME OF NORTHEAST OKLAHOMA LLC", "HHP LLC", "CARTER HEALTHCARE PHARMACY AND DME OF OKLAHOMA LLC", "MEDPRIME HEALTH SERVICES LLC", "GOOSE PHARMA LLC", "WASHINGTON CVS PHARMACY LLC", "MONTANA CVS PHARMACY LLC", "KANSAS CVS PHARMACY LLC", "MISSOURI CVS PHARMACY LLC", "FAMILY VISION CENTER OF LA CROSSE", "HMB IV PHARMACY MANAGEMENT LLC", "OWEN PHARMACIST GROUP LLC", "S-COMM, INC.", "GLO AMEDS DME, LLC", "FOBI COMPREHENSIVE PHARMACY INC", "TJ PHARMACY INC", "BRONX SPECIALTY PHARMACY INC", "ST KEROLLOS PHARMACY INC", "EYE CARE ASSOCIATES OF MARIETTA LLC", "ABITACARE LLC", "COMANCHE COUNTY HOSPITAL AUTHORITY", "PROSTHETIC CENTER LLC", "MAYO CLINIC HEALTH SYSTEM-NORTHWEST WISCONSIN REGION INC", "PAYNE & PITTS, LLC", "EYETECH DIGITAL SYSTEMS INC", "WONDERFUL RX PHARMACY INC", "BEYOND MEDICAL SUPPLIES LLC", "TJ PHARMACY LLC", "SAVE-RITE PHARMACY INC", "SYRACUSE COMMUNITY HEALTH PHARMACY LLC", "86 BOBO PHARMACY INC", "GENEFIC SPECIALTY RX INC", "JANE'S PHARMACY, LLC", "DIXIE PHARMACY-2, LLC", "PHARMKO INC", "MAGNOLIA HEALTHCARE PA LLC", "MYRTLE MEDS INC", "KINETIC PROSTHETICS & MEDICAL SUPPLY"], "data": [90, 35, 1, 199, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 2, 3, 58, 9, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 2, 8, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "businessname", "count": 70, "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC"}, {"values": {"label": ["RELIANT MEDICAL EQUIPMENT DIST", "39 PHARMACY", "NV HEALTH, LLC", "MYRTLE RX PLUS INC", "LONE STAR PROSTHETICS, WICHITA FALL", "S8 MEDICAL EQUIPMENT LLC", "BREWSTER PHARMACY", "EVERCARE MEDICAL SOLUTIONS INC", "SDPM UNITED PHARMACY INC", "PROMEDICA MEDICAL SUPPLY INC", "ORTHO ELITE PERFORMANCE & RECOVERY", "WILLOW PHARMACY CORP", "HISPANOS PHARMACY INC", "HACKENSACK PHARMACY", "BRONX HEALTHPLUS RX INC", "FRESH POND PHARMACY INC", "SHIFA SPECIALTY INC.", "NEB DOCTORS OF WESTERN PENNSYLVANIA", "GOOD MERCY PHARMACY CORP", "PROSTHETIC AND ORTHOTIC ASSOC OF SC", "MOBIUS MOBILITY LLC", "COMFORT RX PHARMACY CORP", "MEDICAL CENTER PHARMACY", "OPTUM PHARMACY 705, LLC", "NEW ROCHELLE PHARMACY", "THRIVE SPECIALTY PHARMACY LLC", "FIT TO GO LLC", "JERICHO CHEMISTS INC.", "PARKVIEW NOCO RX, LLC", "MAC RX OF MISSOURI, LLC", "FIRSTCARE MEDICAL SUPPLY LLC", "ROCK HILL PHARMACY", "SNEDS PEDORTHIC LLC", "PROSUM DME", "S S HEALTHCARE INC", "ALLIANCE MEDICAL SUPPLY LLC", "HQ", "SINGH PHARMACY INC.", "ROCHESTER HOME INFUSION", "RXMTS", "SOUTHWEST FLORIDA EYE CARE", "SOUTHWEST FLORIDA EYE CARE LLC", "VITAL CARE OF HENDERSON", "HEALARIAN PHARMACY", "DIVINE MEDICAL SUPPLY AND EQUIPMENT", "PHOENIX MEDICAL EQUIPMENT INC", "HEAL MEDICAL SUPPLY LLC", "ST. RAPHAEL CHEMISTS", "CHUBBUCK'S PHARMACY INC", "SEVENTEEN MEDICAL SUPPLY LLC", "WOOSTER PHARMACY LLC", "SHIV HARI RX INC", "MEDIX SUPPLIES INC", "MR PHARMACIST LLC", "BRISTOL CARE PHARMACY LLC", "VINITA FAMILY EYECARE, PLLC", "MS EYE CARE PA", "MISSISSIPPI EYE CARE CARTHAGE", "PICC LINES PLUS LLC", "LOUISVILLE EYE CARE", "BOSTON DME COMPANY LLC", "U SAVE IT PHARMACY PEACH VALLEY", "ROCKAWAY DRUGS RX INC", "C AND M HEALTH INC", "ILS HHA OF REGION 11 LLC", "POLARIS PHARMACY SERVICES OF VIRGIN", "STARLIGHT RX INC", "SHALOM PHARMACY", "ARKANSAS COMPRESSION SHOP LLC", "BARGAIN MEDICAL SUPPLY, INC", "MAA PHARMACY", "DEVINE'S PHARMACY", "VIVITAL, INC.", "BILLINGS FAMILY EYECARE SHILOH", "STARLING PHARMACY II, INC.", "ASTORIA RX HOLDINGS INC", "DUFFY RX LLC", "FALCON MED EQPT LLC", "WB DRUG COMPANY INC", "THRIFTY WHITE DRUG #756", "THRIFTY WHITE PHARMACY #768", "THRIFTY WHITE PHARMACY #742", "THRIFTY WHITE DRUG #762", "THRIFTY WHITE DRUG #760", "THRIFTY WHITE PHARMACY 767", "THRIFTY WHITE DRUG #758", "THRIFTY WHITE DRUG #736", "THRIFTY WHITE PHARMACY # 769", "THRIFTY WHITE PHARMACY #754", "THRIFTY WHITE PHARMACY #752", "THRIFTY WHITE DRUG #750", "THRIFTY WHITE DRUG #748", "THRIFTY WHITE PHARMACY #728", "THRIFTY WHITE DRUG #755", "THRIFTY WHITE PHARMACY #772", "THRIFTY WHITE PHARMACY #770", "THRIFTY WHITE PHARMACY #774", "THRIFTY WHITE PHARMACY #779", "DOVE MEDICAL SUPPLY RETAIL LLC", "THRIFTY WHITE PHARMACY #741", "DR. WENDY SOWELL GIBSON", "PREMIER KIDS CARE, INC.", "SAAD MEDICAL EQUIPMENT - SPANISH FO", "SAAD MEDICAL EQUIPMENT - UNIVERSITY", "BOTICA PHARMACY CORP.", "SAAD MEDICAL EQUIPMENT -D'IBERVILLE", "THRIFTY WHITE DRUG 729", "THRIFTY WHITE PHARMACY #727", "DYNAMEDICS MEDICAL SOLUTIONS INC", "ROBERTS HOME MEDICAL LLC", "YONKERS EXPRESS PHARMACY INC", "BLOOMING LIGHT RX INC", "THRIFTY WHITE PHARMACY #735", "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "HEALTHDIRECT INSTITUTIONAL PHARMACY", "THRIFTY WHITE DRUG #746", "THRIFTY WHITE PHARMACY #738", "BALL GROUND PHARMACY LLC", "HOSPITAL PHARMACY WEST", "HOSPITAL PHARMACY INC", "PREMIER KIDS CARE", "WEST CONCORD PHARMACY", "PHARMCAREOK OF TULSA INC", "THRIFTY WHITE PHARMACY #740", "THRIFTY WHITE PHARMACY #776", "THRIFTY WHITE PHARMACY #778", "THRIFTY WHITE PHARMACY #734", "ROTECH", "THRIFTY WHITE DRUG #759", "J&G MEDICAL SUPPLIES", "ACCESS PT PENNSYLVANIA", "PHARMACY ON U LLC", "ADVANCED MEDICAL SUPPLY INC", "DIABETIC SOLUTIONS INC", "THC OF NEVADA", "ADVANCED EYECARE", "THE MED-SHOP PHARMACY", "LIBERTY RX INC", "THRIFTY WHITE PHARMACY #775", "THRIFTY WHITE PHARMACY #781", "MEDI CITY PHARMACY INC", "U HEALTH PHARMACY LLC", "VALLEY VIEW", "CORONA PHARMACY RX INC.", "THE MEDICINE SHOPPE #2193", "MEDICAL PHARMACY PA", "VITAL CARE OF LAFAYETTE", "PINK PROMISES & DME LLC", "CHARITY COMFORT CARE MEDICAL SUPPLY", "CPR DME, LLC", "REMEDY PHARMACY", "ROYAL MEDICAL SUPPLY", "SAINT MARY AND JESSIE LLC", "BUCKNER NEIGHBORHOOD PHARMACY INC.", "PHARMSCRIPT OF FLORIDA LLC", "CVS PHARMACY #01254", "CVS PHARMACY #10449", "CVS PHARMACY #10174", "CVS PHARMACY #10487", "CVS PHARMACY #10414", "CVS PHARMACY #10521", "CVS PHARMACY #10486", "CVS PHARMACY #10428", "CVS PHARMACY #10446", "CVS PHARMACY #10265", "CVS PHARMACY #10544", "CVS PHARMACY #10350", "CVS PHARMACY #10215", "CVS PHARMACY #00496", "CVS PHARMACY #10540", "CVS PHARMACY # 05465", "CVS PHARMACY #04879", "CVS PHARMACY #01020", "CVS PHARMACY #04599", "CVS PHARMACY # 02282", "CVS PHARMACY # 00861", "CVS PHARMACY # 01225", "CVS PHARMACY #00860", "CVS PHARMACY # 00844", "CVS PHARMACY # 00810", "CVS PHARMACY # 00769", "CVS PHARMACY INC", "CVS PHARMACY # 01871", "CVS PHARMACY # 01002", "CVS PHARMACY # 01870", "CVS PHARMACY # 01247", "CVS PHARMACY # 01143", "CVS PHARMACY # 01085", "CVS PHARMACY # 01121", "CVS PHARMACY # 08319", "CVS PHARMACY # 04471", "CVS PHARMACY # 00148", "CVS PHARMACY # 00130", "CVS PHARMACY # 00119", "CVS PHARMACY # 01869", "CVS PHARMACY #01021", "CVS PHARMACY # 01041", "CVS PHARMACY #16419", "CVS PHARMACY # 16205", "CVS PHARMACY # 01111", "CVS PHARMACY #01264", "CVS PHARMACY #00915", "CVS PHARMACY #01874", "CVS PHARMACY #02325", "CVS PHARMACY #00995", "CVS PHARMACY #01853", "CVS PHARMACY #10782", "CVS PHARMACY #01049", "CVS PHARMACY #01885", "CVS PHARMACY #01862", "CVS PHARMACY # 05872", "CVS PHARMACY #00983", "CVS PHARMACY #01368", "CVS PHARMACY# 05407", "CVS PHARMACY #07607", "CVS PHARMACY #00307", "CVS PHARMACY #00117", "CVS PHARMACY #01886", "CVS PHARMACY #02283", "CVS PHAMRACY #05402", "CVS PHARMACY #01068", "CVS PHARMACY #00946", "CVS PHARMACY #01010", "CVS PHARMACY #01234", "CVS PHARMACY #00704", "CVS PHARMACY #00636", "CVS PHARMACY # 00318", "CVS PHARMACY #01238", "CVS PHARMACY #01130", "CVS PHARMACY #01872", "CVS PHARMACY #05874", "CVS PHARMACY #02254", "CVS PHARMACY #01850", "CVS PHARMACY #01094", "CVS PHARMACY # 05913", "CVS PHARMACY # 07170", "CVS PHARMACY #10324", "CVS PHARMACY #01859", "CVS PHARMACY # 01873", "CVS PHARMACY # 01875", "CVS PHARMACY #05002", "CVS PHARMACY #10665", "CVS PHARMACY 17604", "CVS PHARMACY #10601", "CVS PHARMACY #10637", "CVS PHARMACY #17335", "CVS PHARMACY #16009", "CVS PHARMACY #10906", "CVS PHARMACY #16013", "CVS PHARMACY #16895", "CVS PHARMACY #16024", "CVS PHARMACY #10758", "CVS PHARMACY #10603", "CVS PHARMACY #17276", "CVS PHARMACY #17603", "CVS PHARMACY #16074", "CVS PHARMACY #17046", "CVS PHARMACY #16081", "CVS PHARMACY #16831", "CVS PHARMACY #16033", "CVS PHARMACY #10139", "CVS PHARMACY #10598", "CVS PHARMACY #16855", "CVS PHARMACY #10752", "CVS PHARMACY #10635", "CVS PHARMACY #10775", "CVS PHARMACY #10595", "CVS PHARMACY #10580", "CVS PHARMACY #10638", "CVS PHARMACY #10671", "CVS PHARMACY #10576", "CVS PHARMACY # 05987", "CVS PHARMACY # 05822", "CVS PHARMACY # 05829", "CVS PHARMACY # 05836", "CVS PHARMACY # 02903", "CVS PHARMACY # 02935", "CVS PHAMRACY # 02936", "CVS PHARMACY # 02942", "CVS PHARMACY # 02981", "CVS PHARMACY #02844", "CVS PHARMASCY # 05797", "CVS PHARMACY # 02692", "CVS PHARMACY # 09086", "CVS PHARMACY #05619", "CVS PHARMACY 05482", "CVS PHARMACY # 02827", "CVS PHARMACY # 06935", "CVS PHARMACY #08910", "CVS PHARMACY #04396", "CVS PHARMACY 01768", "CVS PHARMACY #00513", "CVS PHARMACY #01900", "CVS PHARMACY #00488", "CVS PHARMACY #00365", "CVS PHARMACY #00220", "CVS PHARMACY #01034", "CVS PHARMACY # 01095", "CVS PHARMACY # 02878", "CVS PHARMACY #16935", "CVS PHARMACY #02600", "CVS PHARMACY #01248", "HIGHLAND PARK CVS LLC", "CVS PHARMACY #07020", "CVS PHARMACY # 07166", "CVS PHARMACY #04581", "CVS PHARMACY #10664", "CVS PHARMACY #10673", "CVS PHARMACY #10691", "CVS PHARMACY #10818", "CVS PHARMACY #10602", "CVS PHARMACY #10667", "CVS PHARMACY #10880", "CVS PHARMACY #01996", "CVS PHARMACY #10579", "CVS PHARMACY #10634", "CVS PHARMACY #10944", "CVS PHARMACY #10670", "CVS PHARMACY #07970", "CVS PHARMACY #06748", "CVS PHARMACY # 06937", "CVS PHARMACY 07017", "CVS PHARMACY # 07142", "CVS PHARMACY #01184", "CVS PHARMACY #00929", "CVS PHARMACY #01024", "CVS PHARMACY #00272", "CVS PHARMACY #01867", "CVS PHARMACY #01868", "CVS PHARMACY #01955", "CVS PHARMACY #02054", "CVS PHARMACY #02161", "CVS PHARMACY #02200", "CVS PHARMACY #00062", "CVS PHARMACY #00137", "CVS PHARMACY #00260", "CVS PHARMACY #00335", "CVS PHARMACY #01861", "CVS PHARMACY #00373", "CVS PHARMACY #00394", "CVS PHARMACY #00517", "CVS PHARMACY #02206", "CVS PHARMACY # 07232", "CVS PHARMACY #06505", "CVS PHARMACY #02959", "CVS PHARMACY #01022", "CVS PHARMACY # 01876", "CVS PHARMACY #01865", "CVS PHARMACY #07222", "CVS PHARMACY #01179", "CVS PHARMACY #09320", "CVS PHARMACY #07962", "CVS PHARMACY # 06933", "CVS PHARMACY #09099", "CVS PHARMACY #09130", "CVS PHARMACY #09142", "CVS PHARMACY # 09147", "CVS PHARMACY #09896", "CVS PHARMACY #09135", "CVS PHARMACY #09929", "LONGS DRUG STORES CALIFORNIA LLC", "CVS PHARMACY #09922", "CVS PHARMACY #09921", "CVS PHARMACY #09920", "CVS PHARMACY #09909", "CVS PHARMACY #09917", "CVS PHARMACY #09919", "CVS PHARMACY #09801", "CVS PHARMACY #09146", "CVS PHARMACY #09800", "CVS PHARMACY #09128", "LONGS DRUG STORE #09815", "CVS PHARMACY #09818", "CVS PHARMACY #09819", "CVS PHARMACY #09208", "CVS PHARMACY #09296", "CVS PHARMACY #05421", "CVS PHARMACY #08734", "CVS PHARMACY #07553", "CVS PHARMACY #09167", "CVS PHARMACY #09149", "CVS PHARMACY # 09162", "CVS PHARMACY 09150", "CVS PHARMACY 09152", "CVS PHARMACY 09153", "CVS PHARMACY 09155", "CVS PHARMACY #09154", "CVS PHARMACY # 09156", "CVS PHARMACY #09845", "CVS PHARMACY #09158", "CVS PHARMACY 09161", "CVS PHARMACY #09821", "CVS PHARMACY 09282", "CVS PHARMACY #09796", "CVS PHARMACY #09783", "CVS PHARMACY #09752", "CVS PHARMACY #09834", "CVS PHARMACY #09872", "CVS PHARMACY #09219", "CVS PHARMACY #09159", "CVS PHARMACY #09822", "CVS PHARMACY #10886", "CVS PHARMACY #10750", "CVS PHARMACY #10681", "CVS PHARMACY #10177", "CVS PHARMACY #05493", "CVS PHARMACY #00046", "CVS PHARMACY #01023", "CVS PHARMACY #01265", "CVS PHARMACY #01199", "CVS PHARMACY #00055", "CVS PHARMACY #00107", "CVS PHARMACY #00714", "CVS PHARMACY #00736", "CVS PHARMACY# 08441", "CVS PHARMACY #02201", "CVS PHARMACY # 01009", "CVS PHARMACY#01803", "CVS PHARMACY #01012", "CVS #05494", "CVS PHARMACY #04820", "CVS PHARMACY #04880", "CVS PHARMACY # 07319", "CVS PHARMACY# 01878", "CVS PHARMACY #01001", "CVS PHARMACY #10581", "CVS PHARMACY #10535", "CVS PHARMACY #05382", "CVS PHARMACY", "CVS PHARMACY #00131", "CVS PHARMACY #01531", "CVS PHARMACY #01845", "CVS PHARMACY #00604", "CVS PHARMACY #00632", "CVS PHARMACY #00654", "CVS PHARMACY #00674", "CVS PHARMACY #07242", "CVS PHARMACY # 09844", "CVS PHARMACY #09198", "HOOK-SUPERX LLC", "HOOK- SUPERX, L.L.C..", "LONGS DRUGS #09835", "CVS PHARMACY #09833", "CVS PHARMACY #09735", "CVS PHARMACY #09802", "CVS PHARMACY #09163", "CVS PHARMACY #09851", "CVS PHARMACY #09632", "CVS PHARMACY #09809", "CVS PHARMACY #09623", "CVS PHARMACY #01921", "CVS PHARMACY #02755", "CVS PHARMACY #02756", "CVS PHARMACY #02782", "CVS PHARMACY #02783", "CVS PHARMACY # 10794", "CVS PHARMACY #02784", "CVS PHARMACY #01657", "CVS PHARMACY #04773", "CVS PHARMACY # 05088", "CVS PHARMACY #00835", "CVS PHARMACY #16537", "CVS PHARMACY # 07969", "CVS PHARMACY # 03047", "CVS PHARMACY # 10606", "CVS PHARMACY #07227", "CVS PHARMACY #08266"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practicename", "count": 467, "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC"}, {"values": {"label": ["511 MONROE TPKE", "1239 E PUTNAM AVE", "3514 MAIN ST", "3141 WILSON BLVD", "1240 FARMINGTON AVE", "219 BROAD ST", "358 W MAIN ST", "777 MAIN ST", "20 BANK ST", "94 PARK ST", "229 HOPE ST", "734 BRIDGEPORT AVE", "1341 LONG STREET", "6400 LANSDOWNE CENTER", "714 HOPMEADOW ST", "1200 MAIN ST", "632 MIDDLE TPKE", "311 MAIN ST", "26 DAVIS ST", "22 WINDSOR AVE", "1055 FARMINGTON AVE", "526 MERIDEN RD", "1968 BLACK ROCK TPKE", "6 QUEEN ST", "47 HAZARD AVE", "844 JONES HILL RD", "2045 DIXWELL AVE", "26 WATERBURY RD", "1425 BARNUM AVE", "2000 N MAIN ST", "581 HIGHLAND AVE", "323 CROMWELL AVE", "35 PADANARAM RD", "1 HAWLEY LN", "225 SOUND BEACH AVE", "690 WETHERSFIELD AVE", "153 BROAD ST", "3440 WILKINSON BLVD", "2981 S. MILITARY HWY", "99 GREENWICH AVE", "110 MAIN STREET", "163 MOUNTAIN RD", "25 BROADWAY AVE", "279 BOSTON POST RD", "479 BLUE HILLS AVE", "964 POST RD", "106 BOSTON POST RD", "191 W MAIN ST", "900 N 6TH STREET", "300 E 8TH ST", "3222 S MAIN ST", "2703 ROUTE 130", "2025 FIRST AVENUE SE", "5046 S SHERIDAN RD", "4016 S STATE HIGHWAY 97", "591 S MILL ST", "27 S COAST HWY", "5518 MAGAZINE ST", "124 W WASHINGTON AVE", "701 W GROVE ST", "915 HILL ST", "220 N ALEXANDER AVE", "5905 DOLLARWAY RD", "2611 E OAKLAND AVE", "602 HIGHWAY 16 E", "12352 FM 1957", "101 N BUSINESS 60", "214 S MAIN ST", "304 E MAIN ST", "6 E SPRINGFIELD RD", "1219 E BUSTAMANTE ST", "2321 7TH AVE", "10601 S MAY AVE", "5711 ALTAMA AVE", "23122 SAINT FRANCIS BLVD", "15245 BLUEBIRD ST NW", "530 3RD ST NW", "100 ASMA BLVD", "2621 GREENHAVEN RD", "820 BAY AVE", "11983 TAMIAMI TRL N", "102 PRINCE ROYAL DR", "433 W ALLEN AVE", "151 GUY PARK AVE", "11001 ROOSEVELT BLVD N", "516 BECKLEY CROSSING SHPG CTR", "810 SE WASHINGTON ST", "81 NORTH ST", "60 MIDDLE ST", "3710 MAIN ST", "40 EAST ST", "1875 BOSTON AVE", "20 BURNSIDE AVE", "45 S MAIN ST", "241 MIDDLE TPKE W", "15 CHESTERFIELD RD", "57 PROVIDENCE PIKE", "11 FOREST ST", "66 HIGH RIDGE RD", "903 BENHAM ST", "2251 COMMERCE BLVD", "1142 N DESLOGE DR", "2401 N CENTRAL AVE", "PR #14 KM 51.5", "17703 VIRGINIA AVE", "24 SCHOOL ST.", "605 N MAIN ST", "6068 S 1ST ST", "3303 W 26TH ST STE 101", "11500 W BROAD ST", "5580 GEORGETOWN RD", "13723 N LITCHFIELD RD", "871 W OAKLAND PARK BLVD", "11 ASHFORD AVE", "6505 E 71ST ST", "950 E TAFT AVE", "1357 VETERANS MEMORIAL BLVD", "901 SW STATE ROUTE 150", "4500 OLD PASS RD", "11085 CATHELL RD", "411 KING ST", "3375 RINCONADA BLVD", "58 PENNSYLVANIA AVE", "905 S MAIN ST", "661 MAIN ST", "540 W MAIN ST", "369 MAIN ST", "330 GRASMERE AVE", "37 W MAIN ST", "1657 ROUTE 12", "111 ALBANY TPKE", "150 WASHINGTON STREET", "965 WHITE PLAINS RD", "281 CONNECTICUT AVE", "710 FAYETTEVILLE ST", "14095 RICHMOND HWY", "3140 HWY 280", "206 US HIGHWAY 117 S", "3555 COLORADO BLVD", "1812 HOLLOWAY STREET", "407 W MAIN STREET", "1124 PATTON AVE", "454 S MAIN ST", "140 NC 102 W", "28895 W IL RTE 120", "101 E ATKINS ST", "244 E 161ST ST", "4021 CROSS TIMBERS ROAD", "1645 CRANIUM DR", "1606 HIGHLAND COLONY PKWY", "1921 S 77 SUNSHINE STRIP", "17970 N TAMIAMI TRL", "40 FLOWING SPRINGS WAY", "2590 N TEXAS ST", "1086 JEFF RD NW", "81 US HIGHWAY 9", "3800 W MADISON ST STE 101", "7403 ALOMA AVE", "2719 GRAND AVE", "4720 S KIRKMAN RD", "4720 N MARINE DR", "4710 S WESTERN AVE", "1800 W INDIANTOWN RD", "12405 NE 85TH ST", "3601 W WILLIAM CANNON DR", "3200 E BAY DR", "19710 HOLZWARTH RD", "19302 KUYKENDAHL RD", "128 E BRANDON BLVD", "4320 26TH ST W", "6003 14TH ST W", "11000 VENTURA BLVD", "9307 N LAMAR BLVD", "305 N BREED ST", "1634 S FEDERAL HWY", "9865 GLADES RD", "3200 S FEDERAL HWY", "1851 CLINT MOORE RD", "4218 LINDELL BLVD", "1515 N ALEXANDER DR", "355 CAMPBELL AVE", "720 BRANCHVILLE RD", "891N COLONY RD", "8 ROYCE CIR", "162 WASHINGTON AVE", "644 W PUTNAM AVE", "24 PERSHING DR", "14 CANDLEWOOD LAKE RD", "1181 MAIN ST", "6 WILLARD RD", "146 SOUTH ST", "7 DURANT AVE", "7950 FAYETTEVILLE RD", "283 W IL ROUTE 173", "301 UNIVERSITY AVE", "3801 BISCAYNE BLVD", "101 N TENNESSEE STREET", "3 PLAISTOW RD", "8815 STAGECOACH RD", "1601 MAIN ST", "4003 W VERNON AVE", "4030 ANNAS RETREAT", "125 MORRIS AVE", "3501 N HALSTED ST", "302 ROUTE 25A", "5555W 79TH ST", "5496 UNIVERSITY PKWY", "3501 UNIQUE CIRCLE", "12020 CULEBRA RD", "4353 LAKE OTIS PKWY", "1801 W 11TH ST", "900 MERIDIAN E", "1455 NE DIVISION ST", "1302 E 38TH ST", "22 DEPOT HILL RD", "969 HIGH RIDGE RD", "10 LATHROP RD", "17 W MAIN ST", "1 MIFFLIN ST", "200 BUTLER CMNS", "467 MAIN ST", "341 COTTAGE GROVE RD", "372 W MAIN ST", "1044 BOULEVARD", "525 BUCKLAND RD", "656 NEW HAVEN AVE", "5550 FM 423", "401 S ROOSEVELT DR", "599 W 4TH ST", "1449 N ARIZONA BLVD", "6519 MAIN ST", "1125 2ND ST", "831 KUHIO HWY", "1810 S IRISH RD", "1515 W PARADISE DR", "10562 BELLEVILLE RD", "1445 E CENTRAL CT", "822 CITY AVE S", "505 S. PINE RIDGE AVE", "804 PIKE ST", "100 SARA WAY", "1501 WAGNER AVE", "4141 PEARL RD", "593 NEWFIELD AVE", "326 MAIN ST", "3151 UNIVERSITY AVE", "9256 SLAUSON AVE", "1830 N BROADWAY", "74955 US HIGHWAY 111", "25829 NARBONNE AVE", "1200 N SEPULVEDA BLVD", "9100 ROSEDALE HWY", "43525 10TH ST W", "1790 AIRLINE HWY", "3033 VINTAGE BLVD", "2417 TONGASS AVE", "3500 BRUMBACK BLVD", "340 WESTWIND DR", "131 EUREKA TWNCTR DR", "1309 NW 12TH AVE", "354 PRIVATE DRIVE 288", "825 E GREEN BAY AVE", "410 GRAND VALLEY BLVD", "100 SYCAMORE ESTATES DR", "2021 E INDEPENDENCE ST", "180 RIVER RD", "1733 2ND ST S", "205 HOUSE CARLSON DR", "4000 S BOLGER RD", "1903 COBBS FORD RD", "1420 HIGHWAY 231 S", "805 US HIGHWAY 27 S", "6812 N LAMAR BLVD", "804 W MARKET ST", "324 ROOSEVELT RD", "875 E NAPIER AVE", "4995 E US ROUTE 36", "1311 N STATE ROUTE 48", "1150 E SIBLEY BLVD", "1835 SAND LAKE RD", "1403 WAUKEGAN RD", "6297 PGA BLVD", "6200 W WILLIAM CANNON DR", "1213 PALM BAY RD", "175 MALABAR RD NW", "901 N ANKENY BLVD", "5896 CORTEZ RD W", "2501 S LAMAR BLVD", "6230 W. IRLO BRONSON MEMORIAL HWY", "5600 S 1ST ST", "5895 W PEORIA AVE", "900 SHELBY RD", "2310 MCCAUSLAND AVE", "3300 BROWN RD", "420 N FRAZIER ST", "7731 E NORTHERN LIGHTS BLVD", "301 N SANTA CLAUS LN", "MILE 1907 SEWARD HWY", "4000 W DIMOND BLVD", "500 RIVER ST", "17 US HIGHWAY 206", "11352 DORSETT RD", "169 TERRACE ST", "596 PROVIDENCE HWY", "1505 MERMAID AVE", "115 JOHNSON AVE N", "2249 86TH ST", "846 FORT DALE RD", "2846 E 101ST ST", "130 3RD ST NE", "3105 S MERIDIAN AVE", "3310 LAMAR AVE", "18049 MAGNOLIA ST", "2600 HWY 138", "611 STATE HIGHWAY 54", "1133 N MAIN ST", "38020 US HIGHWAY 18", "3915 GATEWAY DR", "920 US HWY 12", "W190 N9855 APPLETON AVE", "800 FOXCROFT AVE", "3333 US ROUTE 60", "254 CASSIDY BLVD", "4000 RED BANK RD", "18401 BUSINESS 13", "8118 PERRY HILLS CT", "2136 CAMPBELLSVILLE RD", "650 S TRUMAN BLVD", "3240 S WESTERN AVE", "414 KINGS HIGHWAY EAST", "5935 W ADDISON ST", "3915 S NOLAND RD", "600 W KARSCH BLVD", "1200 S MAIN ST", "10555 W OVERLAND RD", "955 N STATE ST", "2329 W CLAY ST", "13242 WICKER AVE", "5345 N IH 35", "4822 CATON FARM RD", "33975 DATE PALM DR", "11701 DETROIT AVE", "76 HEIGHTS RD", "W62N190 WASHINGTON AVE", "15738 W CAPITOL DR", "W156N11261 PILGRIM RD", "2204 NEVA RD", "603 W PINE ST", "9449 S HOWELL AVE", "2677 S 108TH ST", "S79W18885 JANESVILLE RD", "2420 E COLONIAL DR", "700 W COLLEGE AVE", "12101 SHELBYVILLE RD", "7914 FEGENBUSH LN", "8802 WEST COLONIAL DR", "12295 BISCAYNE BLVD", "8000 LAKE UNDERHILL RD", "20020 CORTEZ BLVD", "9320 LACKLAND RD", "8790 W MCNAB RD", "6401 W COMMERCIAL BLVD", "8800 W 95TH ST", "1723 E YOUNG CIR", "4200 WINNETKA AVE N", "4950 COUNTY RD 101", "655 NICOLLET MALL", "5428 LYNDALE AVE S", "780 E 9TH ST", "1600 N NOVA RD", "3705 HOLLYWOOD BLVD", "2280 N LAS VEGAS BLVD", "3325 N MAIN ST", "815 SUMMIT ST", "2311 OGDEN AVE", "23684 STRICKLAND DR", "200 MARQUIS PKWY", "4060 CAMPBELL AVE", "2601 RICHMOND HWY", "3336 WILSON BLVD", "2035 4TH AVE", "115 N 19TH AVE", "1902 BROOKS ST", "2402 GRAND AVE", "2001 10TH AVE S", "10100 BROOK RD", "1275 HARRISON AVE", "1300 E PARK AVE", "1311 GRAND AVE", "425 MAIN ST", "307 SE 4TH ST", "617 CENTRAL AVE", "3095 N MONTANA AVE", "2601 CENTRAL AVE", "1020 SENECA RD", "6010 PLANK RD", "603 N MONTANA AVE", "681 S OHIO ST", "1060 WOODS MILL PLZ", "452 WYTHE CREEK RD", "1788 N PIERCE ST", "3401 CHARLES STREET", "4310 FORTUNA CENTER PLZ", "1245 N MILITARY HWY", "15341 MONTANUS DR", "191 MARKET ST", "721 SOUTHPARK BLVD", "155 HOLT GARRISON PKWY", "2530 WEIR RD", "1316 GREENBRIER PKWY", "25 S GATEWAY DR", "3424 MORMON COULEE RD", "1250 WATERS PLACE", "136 JESSICA LN", "6238 HADLEY ST", "5722 GATEWOOD AVE", "7922 ROSECRANS AVE", "821 PROSPECT AVE", "940A SOUTHERN BLVD", "111 E CARSON ST", "4566 E FLORENCE AVE", "111 S 3RD ST", "1501 23RD AVE", "1075 W FM 3040", "13308 MERIDIAN E", "5137 E BASELINE RD", "3201 W GORE BLVD", "8440 E MCDONALD DR", "2611 W PARK ROW", "1222 E WOODLAND AVE", "301 S MAIN ST", "233 CARMICHAEL WAY", "12130 JEFFERSON AVE", "1700 SEMINOLE TRL", "17307 HULL STREET RD", "709 E MAIN ST", "12455 W BROAD ST", "2775 GODWIN BLVD", "2441 EISENHOWER AVE", "2704 OAKLAWN BLVD", "7235 BELL CREEK RD", "3149 E HARRY ST", "2440 N LEBANON ST", "1180 W 19TH ST", "8301 N CHURCH RD", "4201 N BELT HWY", "1212 S MADISON ST", "2100 N MAIN AVE", "885 E HIGHWAY 60", "11900 SAINT CHARLES ROCK RD", "2395 MAIN ST", "11601 E US 40 HWY", "2401 US HWY 14 EAST", "4024 ELKHART RD", "3270 TELEGRAPH RD", "16205 MILITARY TRL", "5245 RANGELINE SERVICE RD S", "3005 CHARITY ST", "7955 HWY N", "12380 SAINT CHARLES ROCK RD", "1749 WOODSTONE DR", "2120 W OSAGE ST", "3603 MCMASTERS AVE", "9433 MANCHESTER RD", "8101 CLAYTON RD", "4501 AIRLINE DR", "101 FLORIDA AVE SE", "880 S NEOSHO BLVD", "300 KEYSER AVE", "6250 PASEO DEL NORTE NE", "7776 COX LN", "188 UNION ST", "12659 S RIDGELAND AVE", "15514 W WADDELL RD", "806 NISSAN DR", "602 ALABAMA AVE", "2141 E BROADWAY RD", "52 JERICHO TPKE", "120 BERGEN AVE", "3900 S GRAND BLVD", "7402 N 56TH ST", "819 S SALINA ST", "2170 86TH ST", "2577 MALL RD", "950 MAIN ST", "1311 RING RD", "298 CENTRAL AVE", "2519 N 7TH ST", "7617 MYRTLE AVE", "3595 HIRAM DOUGLASVILLE HWY", "5501 W OREM DR", "3341 HALLS FERRY RD", "747 HIGHWAY 1 S", "765 E GLENN AVE", "54 CENTER SQ", "1615 N SAGINAW RD", "2985 CROOKS RD", "3100 N MARKET ST", "7994 US HIGHWAY 51 N", "3880 DICKERSON PIKE"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practiceaddress1", "count": 500, "min": "1 S MAIN ST", "max": "ONE DAVIS SQ"}, {"values": {"label": ["UNIT B1", "CVS PHARMACY #01241", "CVS PHARMACY #06807", "STE E", "STE 11", "STE G", "STE B", "STE 203-E", "STE 203A", "STE 100C", "STE 2", "STE 116", "STE 1400", "BO PUEBLO SEC PUEBLO NORTE", "STE 100", "WALGREENS #5495", "# 36", "STE 260", "WALGREENS #5549", "STE A", "WALGREENS #5727", "WALGREENS #6153", "TOWER 2", "STE P2", "UNIT 8", "STE 4", "STE 202", "STE 907", "STE 107", "STE 102"], "data": [458, 1, 1, 2, 1, 1, 8, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]}, "label": "practiceaddress2", "count": 30, "min": "# 36", "max": "WALGREENS #6153"}, {"values": {"label": ["MONROE", "RIVERSIDE", "COVENTRY", "ARLINGTON", "WEST HARTFORD", "WINDSOR", "AVON", "HARTFORD", "GRANBY", "NEW CANAAN", "STAMFORD", "MILFORD", "CHARLOTTESVILLE", "ALEXANDRIA", "SIMSBURY", "WILLIMANTIC", "STORRS", "TERRYVILLE", "OAKVILLE", "VERNON ROCKVILLE", "KENSINGTON", "WATERBURY", "FAIRFIELD", "NEWTOWN", "ENFIELD", "WEST HAVEN", "HAMDEN", "PROSPECT", "STRATFORD", "CHESHIRE", "ROCKY HILL", "DANBURY", "OLD GREENWICH", "MERIDEN", "CHARLOTTE", "CHESAPEAKE", "GREENWICH", "HEBRON", "SUFFIELD", "MYSTIC", "ORANGE", "DARIEN", "WATERFORD", "ASHDOWN", "BLYTHEVILLE", "DANVILLE", "JOPLIN", "NORTH BRUNSWICK", "MOULTRIE", "TULSA", "SAND SPRINGS", "PRYOR", "NEWPORT", "NEW ORLEANS", "AVA", "EL DORADO", "ELLISVILLE", "PORT ALLEN", "PINE BLUFF", "BLOOMINGTON", "CARTHAGE", "SAN ANTONIO", "MANSFIELD", "SEYMOUR", "LINN", "SULLIVAN", "LAREDO", "ANOKA", "OKLAHOMA CITY", "BRUNSWICK", "SAINT FRANCIS", "ANDOVER", "ELK RIVER", "LAFAYETTE", "CAPITOLA", "NAPLES", "BEREA", "SAN DIMAS", "AMSTERDAM", "ST PETERSBURG", "BECKLEY", "IDABEL", "BRISTOL", "BRIDGEPORT", "NEW MILFORD", "EAST HARTFORD", "UNIONVILLE", "MANCHESTER", "EAST LYME", "PUTNAM", "BONNE TERRE", "MOUND", "DESLOGE", "HUMBOLDT", "AIBONITO", "HAGERSTOWN", "BOSTON", "IRONTON", "MILAN", "CHICAGO", "RICHMOND", "INDIANAPOLIS", "SURPRISE", "WILTON MANORS", "DOBBS FERRY", "SAPULPA", "EUPORA", "LEES SUMMIT", "GULFPORT", "BERLIN", "CHAPPAQUA", "LAS CRUCES", "NIANTIC", "TORRINGTON", "EAST HAVEN", "STAFFORD SPRINGS", "GALES FERRY", "CANTON", "TRUMBULL", "NORWALK", "DURHAM", "WOODBRIDGE", "ALEXANDER CITY", "BURGAW", "DENVER", "JAMESTOWN", "ASHEVILLE", "SPARTA", "AYDEN", "LAKEMOOR", "DOBSON", "BRONX", "FLOWER MOUND", "ROCK HILL", "MADISON", "HARLINGEN", "NORTH FORT MYERS", "CHARLES TOWN", "HUNTSVILLE", "ENGLISHTOWN", "WINTER PARK", "AMES", "ORLANDO", "JUPITER", "KIRKLAND", "AUSTIN", "HOLMES BEACH", "SPRING", "BRANDON", "BRADENTON", "STUDIO CITY", "LOS ANGELES", "BOYNTON BEACH", "BOCA RATON", "DELRAY BEACH", "SAINT LOUIS", "BAYTOWN", "RIDGEFIELD", "WALLINGFORD", "NORTH HAVEN", "ANSONIA", "BROOKFIELD", "NEWINGTON", "BETHEL", "RALEIGH", "ANTIOCH", "SAN DIEGO", "MIAMI", "CARTERSVILLE", "PLAISTOW", "LITTLE ROCK", "KINSTON", "ST THOMAS", "SPRINGFIELD", "MILLER PLACE", "BURBANK", "WINSTON SALEM", "FORT MYERS", "ANCHORAGE", "TRACY", "MILTON", "GRESHAM", "TACOMA", "SOUTHBURY", "PLAINFIELD", "CLINTON", "PHILADELPHIA", "BUTLER", "BLOOMFIELD", "NORWICH", "SOUTH WINDSOR", "DERBY", "FRISCO", "SEASIDE", "BENSON", "COOLIDGE", "BONNERS FERRY", "BRENTWOOD", "KAPAA", "CHILTON", "WEST BEND", "BELLEVILLE", "UNION", "RIPLEY", "MERRILL", "MARIETTA", "BELLE VERNON", "GREENVILLE", "MEDINA", "SOUTHINGTON", "PICO RIVERA", "SANTA MARIA", "INDIAN WELLS", "LOMITA", "MANHATTAN BEACH", "BAKERSFIELD", "LANCASTER", "HOLLISTER", "JUNEAU", "KETCHIKAN", "KENOSHA", "EUREKA", "SOUTH POINT", "SAUKVILLE", "MARTINSVILLE", "AURORA", "LISBON", "MERIDIAN", "BATESVILLE", "INDEPENDENCE", "PRATTVILLE", "TROY", "CYNTHIANA", "WARREN", "GLEN ELLYN", "BENTON HARBOR", "DECATUR", "DOLTON", "GLENVIEW", "PALM BEACH GARDENS", "MELBOURNE", "PALM BAY", "ANKENY", "KISSIMMEE", "GLENDALE", "KINGS MOUNTAIN", "CONROE", "NORTH POLE", "SEWARD", "PATERSON", "STANHOPE", "MARYLAND HEIGHTS", "HAWORTH", "DEDHAM", "BROOKLYN", "FOSSTON", "HARTLEY", "PARIS", "FOUNTAIN VALLEY", "STOUGHTON", "BLACK RIVER FALLS", "VIROQUA", "PRAIRIE DU CHIEN", "EAU CLAIRE", "BARABOO", "GERMANTOWN", "MARTINSBURG", "HUNTINGTON", "PIKEVILLE", "CINCINNATI", "BRANSON WEST", "NOTTINGHAM", "LEBANON", "FESTUS", "MARION", "FARMINGTON", "ROSWELL", "BOISE", "JACKSON", "SAINT CHARLES", "CEDAR LAKE", "CATHEDRAL CITY", "LAKEWOOD", "CEDARBURG", "ANTIGO", "OAK CREEK", "WEST ALLIS", "MUSKEGO", "APPLETON", "MIDDLETOWN", "LOUISVILLE", "OCOEE", "NORTH MIAMI", "BROOKSVILLE", "OVERLAND", "TAMARAC", "HICKORY HILLS", "HOLLYWOOD", "NEW HOPE", "MINNETONKA", "MINNEAPOLIS", "HIALEAH", "HOLLY HILL", "NORTH LAS VEGAS", "ROCKFORD", "ELGIN", "ASHBURN", "WILLIAMSBURG", "SEATTLE", "BOZEMAN", "MISSOULA", "BILLINGS", "GREAT FALLS", "GLEN ALLEN", "BUTTE", "ANACONDA", "LAUREL", "HELENA", "FREDERICKSBURG", "SALINA", "CHESTERFIELD", "POQUOSON", "FALLS CHURCH", "DUMFRIES", "NORFOLK", "CULPEPER", "WINCHESTER", "COLONIAL HEIGHTS", "CHESTER", "LA CROSSE", "OLIVE HILL", "RAYTOWN", "HOUSTON", "PARAMOUNT", "WESTBURY", "CARSON", "CUDAHY", "LEWISVILLE", "PUYALLUP", "GILBERT", "LAWTON", "SCOTTSDALE", "BARRON", "STUART", "NEWPORT NEWS", "MOSELEY", "FLOYD", "SUFFOLK", "HOPEWELL", "MECHANICSVILLE", "WICHITA", "HIGGINSVILLE", "KANSAS CITY", "SAINT JOSEPH", "WEBB CITY", "MOUNTAIN GROVE", "MONETT", "BRIDGETON", "ROCHESTER", "RICHLAND CENTER", "GOSHEN", "MOBILE", "ABBEVILLE", "DARDENNE PRAIRIE", "SAINT PETERS", "PACIFIC", "HANNIBAL", "ST. LOUIS", "CLAYTON", "METAIRIE", "DENHAM SPRINGS", "NEOSHO", "NATCHITOCHES", "ALBUQUERQUE", "WEST CHESTER", "VERNON", "PALOS HEIGHTS", "SMYRNA", "TEMPE", "MINEOLA", "BERGENFIELD", "TAMPA", "SYRACUSE", "FLORENCE", "MUNFORDVILLE", "ELIZABETHTOWN", "LAWRENCE", "WEST MONROE", "HIRAM", "VICKSBURG", "AUBURN", "EAST LONGMEADOW", "MIDLAND", "ROCHESTER HILLS", "SHREVEPORT", "MILLINGTON", "NASHVILLE"], "data": [1, 1, 1, 5, 2, 1, 1, 4, 1, 1, 5, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 2, 4, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 7, 1, 2, 1, 3, 1, 1, 1, 2, 2, 5, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practicecity", "count": 397, "min": "ABBEVILLE", "max": "WOODBRIDGE"}, {"values": {"label": ["NC", "CA", "MD", "NY", "TX", "WA", "KY", "AZ", "NJ", "PA", "SC", "NH", "AR", "TN", "AL", "MS", "FL", "MO", "MA", "CO", "MN", "OK", "NV", "MI", "OH", "VA", "MT", "IL", "GA", "WY", "WI", "VT", "KS", "LA", "NM", "IN", "HI", "PR"], "data": [5, 71, 5, 38, 68, 2, 2, 1, 5, 20, 2, 2, 2, 1, 3, 6, 12, 1, 126, 19, 33, 3, 3, 1, 1, 9, 1, 36, 4, 2, 3, 1, 1, 2, 4, 3, 1, 1]}, "label": "practicestate", "count": 38, "min": "AK", "max": "WV"}, {"values": {"label": ["705.0 - 99902224.5", "99902224.5 - 199803744.0", "199803744.0 - 299705263.5", "299705263.5 - 399606783.0", "399606783.0 - 499508302.5", "499508302.5 - 599409822.0", "599409822.0 - 699311341.5", "699311341.5 - 799212861.0", "799212861.0 - 899114380.5", "899114380.5 - 999015900"], "data": [154, 53, 21, 26, 7, 35, 37, 64, 30, 73]}, "label": "practicezip9code", "count": 10, "min": 705.0, "max": 999015900}, {"values": {"label": ["-2141564683.0 - -1712887730.7", "-1712887730.7 - -1284210778.4", "-1284210778.4 - -855533826.1", "-855533826.1 - -426856873.8", "-426856873.8 - 1820078.5", "1820078.5 - 430497030.8", "430497030.8 - 859173983.1", "859173983.1 - 1287850935.4", "1287850935.4 - 1716527887.7", "1716527887.7 - 2145204840.0"], "data": [46, 61, 54, 48, 52, 12, 93, 56, 9, 69]}, "label": "telephonenumber", "count": 10, "min": -2141564683.0, "max": 2145204840.0}, {"values": {"label": ["Pharmacy", "Medical Supply Company Other", "Certified Other|Pharmacy", "MSC With Respiratory Therapist", "MSC With Orthotic-Prosthetic", "Pharmacy|Grocery Store", "Pharmacy|Optician", "Medical Supply Company Other|Pharmacy|Optician", "Medical Supply Company Other|Orthotic Personnel", "Optometrist", "Medical Supply Company Other|MSC With Respiratory Therapist", "Optometrist|Optician", "Prosthetic Personnel", "Medical Supply Company Other|MSC With Orthotic Personnel", "MSC With Orthotic Personnel"], "data": [405, 6, 4, 1, 3, 21, 50, 1, 1, 2, 2, 1, 1, 1, 1]}, "label": "specialitieslist", "count": 15, "min": "Certified Other|Pharmacy", "max": "Prosthetic Personnel"}, {"values": {"label": ["PHYSICIAN ASSISTANT", "OXYGEN & EQUIPMENT"], "data": [498, 2]}, "label": "providertypelist", "count": 2, "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT"}, {"values": {"label": ["Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Nebulizer Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings|Lymphedema Compression Treatment Items", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Wheelchairs (Standard Manual)|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Continuous Positive Airway Pressure (CPAP) Devices|Respiratory Assist Devices", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual Related Accessories)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Canes and/or Crutches|Patient Lifts|Wheelchairs (Standard Manual Related Accessories)|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "Speech Generating Devices", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Nebulizer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies", "Limb Prostheses", "Nebulizer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Enteral Nutrients|Nebulizer Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Urological Supplies|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Antiemetic Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Traction Equipment|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom"], "data": [132, 28, 200, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 4, 8, 8, 1, 1, 41, 8, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "supplieslist", "count": 56, "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings"}, {"values": {"label": ["18.0 - 21.0", "21.0 - 24.0", "24.0 - 27.0", "27.0 - 30.0", "30.0 - 33.0", "33.0 - 36.0", "36.0 - 39.0", "39.0 - 42.0", "42.0 - 45.0", "45.0 - 48.0"], "data": [2, 1, 19, 27, 38, 63, 102, 166, 44, 31]}, "label": "latitude", "count": 10, "min": 18.0, "max": 48.0}, {"values": {"label": ["-159.0 - -149.5", "-149.5 - -140.0", "-140.0 - -130.5", "-130.5 - -121.0", "-121.0 - -111.5", "-111.5 - -102.0", "-102.0 - -92.5", "-92.5 - -83.0", "-83.0 - -73.5", "-73.5 - -64.0"], "data": [1, 0, 0, 15, 61, 28, 100, 66, 68, 161]}, "label": "longitude", "count": 10, "min": -159.0, "max": -64.0}, {"values": {"label": ["0"], "data": [500]}, "label": "is_contracted_for_cba", "count": 1, "min": "0", "max": "0"}, {"values": {"label": ["1.0 - 3.6", "3.6 - 6.2", "6.2 - 8.8", "8.8 - 11.4", "11.4 - 14.0", "14.0 - 16.6", "16.6 - 19.2", "19.2 - 21.8", "21.8 - 24.4", "24.4 - 27"], "data": [407, 17, 17, 12, 4, 15, 8, 4, 2, 4]}, "label": "participationbegindate_dayofmonth", "count": 10, "min": 1.0, "max": 27}, {"values": {"label": ["1", "12", "11", "10"], "data": [416, 15, 68, 1]}, "label": "participationbegindate_month", "count": 4, "min": "1", "max": "12"}, {"values": {"label": ["2023", "2022", "2020", "2017", "2014", "2019"], "data": [152, 199, 32, 50, 58, 9]}, "label": "participationbegindate_year", "count": 6, "min": "2014", "max": "2023"}, {"values": {"label": ["127.0", "6.0", "109.0"], "data": [497, 2, 1]}, "label": "businessname_stringindexer_transform", "count": 3, "min": "6.0", "max": "127.0"}, {"values": {"label": ["467.0"], "data": [500]}, "label": "practicename_stringindexer_transform", "count": 1, "min": "467.0", "max": "467.0"}, {"values": {"label": ["500.0 - 500.0"], "data": [500]}, "label": "practiceaddress1_stringindexer_transform", "count": 1, "min": 500.0, "max": 500.0}, {"values": {"label": ["0.0 - 3.0", "3.0 - 6.0", "6.0 - 9.0", "9.0 - 12.0", "12.0 - 15.0", "15.0 - 18.0", "18.0 - 21.0", "21.0 - 24.0", "24.0 - 27.0", "27.0 - 30.0"], "data": [469, 7, 3, 3, 3, 3, 3, 3, 3, 3]}, "label": "practiceaddress2_stringindexer_transform", "count": 10, "min": 0.0, "max": 30.0}, {"values": {"label": ["0.0 - 39.3", "39.3 - 78.6", "78.6 - 117.9", "117.9 - 157.2", "157.2 - 196.5", "196.5 - 235.8", "235.8 - 275.1", "275.1 - 314.4", "314.4 - 353.7", "353.7 - 393.0"], "data": [117, 69, 39, 40, 39, 39, 40, 39, 39, 39]}, "label": "practicecity_stringindexer_transform", "count": 10, "min": 0.0, "max": 393.0}, {"values": {"label": ["0.0 - 3.8", "3.8 - 7.6", "7.6 - 11.4", "11.4 - 15.2", "15.2 - 19.0", "19.0 - 22.8", "22.8 - 26.6", "26.6 - 30.4", "30.4 - 34.2", "34.2 - 38.0"], "data": [303, 108, 32, 18, 9, 10, 8, 5, 4, 3]}, "label": "practicestate_stringindexer_transform", "count": 10, "min": 0.0, "max": 38.0}, {"values": {"label": ["0.0 - 1.4", "1.4 - 2.8", "2.8 - 4.2", "4.2 - 5.6", "5.6 - 7.0", "7.0 - 8.4", "8.4 - 9.8", "9.8 - 11.2", "11.2 - 12.6", "12.6 - 14.0"], "data": [425, 0, 31, 2, 9, 17, 1, 6, 3, 1]}, "label": "specialitieslist_stringindexer_transform", "count": 10, "min": 0.0, "max": 14.0}, {"values": {"label": ["0", "1"], "data": [498, 2]}, "label": "providertypelist_stringindexer_transform", "count": 2, "min": "0", "max": "1"}, {"values": {"label": ["1.0 - 6.5", "6.5 - 12.0", "12.0 - 17.5", "17.5 - 23.0", "23.0 - 28.5", "28.5 - 34.0", "34.0 - 39.5", "39.5 - 45.0", "45.0 - 50.5", "50.5 - 56.0"], "data": [352, 7, 2, 1, 0, 1, 0, 0, 2, 135]}, "label": "supplieslist_stringindexer_transform", "count": 10, "min": 1.0, "max": 56.0}]}, "selectedFE": [{"transformationsData": [{"transformation_label": "novalue"}], "feature": "provider_id", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "20494650.01", "stddev": "1133930.19", "min": "20310995", "max": "34356956", "missing": "0"}, "updatedLabel": "provider_id"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "acceptsassignement", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.92", "stddev": "0.27", "min": "0", "max": "1", "missing": "0"}, "updatedLabel": "acceptsassignement"}, {"transformationsData": [{"feature_label": "participationbegindate", "transformation_label": "Extract Date"}], "feature": "participationbegindate", "type": "date", "selected": true, "replaceby": "random", "stats": {"count": "", "mean": "", "stddev": "", "min": "", "max": "", "missing": "0"}, "transformation": [{"transformation": "Extract Date", "selectedAsDefault": 1}], "generated": false, "updatedLabel": "participationbegindate"}, {"transformationsData": [{"feature_label": "businessname", "transformation_label": "String Indexer"}], "feature": "businessname", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC", "missing": "0", "distinct": "127"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "businessname"}, {"transformationsData": [{"feature_label": "practicename", "transformation_label": "String Indexer"}], "feature": "practicename", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC", "missing": "0", "distinct": "467"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicename"}, {"transformationsData": [{"feature_label": "practiceaddress1", "transformation_label": "String Indexer"}], "feature": "practiceaddress1", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "1 S MAIN ST", "max": "ONE DAVIS SQ", "missing": "0", "distinct": "500"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress1"}, {"transformationsData": [{"feature_label": "practiceaddress2", "transformation_label": "String Indexer"}], "feature": "practiceaddress2", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "42", "mean": "", "stddev": "", "min": "# 36", "max": "WALGREENS #6153", "missing": "458", "distinct": "29"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress2"}, {"transformationsData": [{"feature_label": "practicecity", "transformation_label": "String Indexer"}], "feature": "practicecity", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "ABBEVILLE", "max": "WOODBRIDGE", "missing": "0", "distinct": "397"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicecity"}, {"transformationsData": [{"feature_label": "practicestate", "transformation_label": "String Indexer"}], "feature": "practicestate", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "AK", "max": "WV", "missing": "0", "distinct": "43"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicestate"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "practicezip9code", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "424344798.64", "stddev": "358451425.83", "min": "2472", "max": "981993202", "missing": "0"}, "updatedLabel": "practicezip9code"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "telephonenumber", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "6144013752076.46", "stddev": "136516631952037.42", "min": "2014881230", "max": "3052621292106456", "missing": "0"}, "updatedLabel": "telephonenumber"}, {"transformationsData": [{"feature_label": "specialitieslist", "transformation_label": "String Indexer"}], "feature": "specialitieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "Certified Other|Pharmacy", "max": "Prosthetic Personnel", "missing": "0", "distinct": "15"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "specialitieslist"}, {"transformationsData": [{"feature_label": "providertypelist", "transformation_label": "String Indexer"}], "feature": "providertypelist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "23", "mean": "", "stddev": "", "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT", "missing": "477", "distinct": "1"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "providertypelist"}, {"transformationsData": [{"feature_label": "supplieslist", "transformation_label": "String Indexer"}], "feature": "supplieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings", "missing": "0", "distinct": "56"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "supplieslist"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "latitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "38.59", "stddev": "5.16", "min": "18.23407", "max": "48.57833", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "latitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "longitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "-89.16", "stddev": "17.29", "min": "-157.8097", "max": "-66.03487", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "longitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "is_contracted_for_cba", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.0", "min": "0", "max": "0", "missing": "0"}, "updatedLabel": "is_contracted_for_cba"}], "autoFE_flag": true}, "status": "new", "position": {"x": 62, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/transformation/feature-transformation.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "transformation", "text": "Auto FE", "slug": "auto-fe", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "root": {"dataTooltipPosition": "bottom", "dataTooltipPositionSelector": ".joint-stencil", "mode": "auto"}, "body": {"fill": "transparent", "stroke": "#4295d1", "strokeWidth": 2, "strokeDasharray": "0"}, "dbValues": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10"}, "ManualFE": {"FE": []}, "selectedFE": [], "autoFE_flag": true}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": 0}, {"inherited": true, "checked": true, "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": 3}, {"inherited": true, "checked": true, "field": "latitude", "alias": "latitude", "type": "real", "position": 4}, {"inherited": true, "checked": true, "field": "longitude", "alias": "longitude", "type": "real", "position": 5}, {"inherited": true, "checked": true, "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": 6}, {"inherited": true, "checked": true, "field": "participationbegindate_dayofmonth", "alias": "participationbegindate_dayofmonth", "type": "numeric", "position": 7, "generated": true}, {"inherited": true, "checked": true, "field": "participationbegindate_month", "alias": "participationbegindate_month", "type": "numeric", "position": 8, "generated": true}, {"inherited": true, "checked": true, "field": "participationbegindate_year", "alias": "participationbegindate_year", "type": "numeric", "position": 9, "generated": true}, {"inherited": true, "checked": true, "field": "businessname_stringindexer", "alias": "businessname_stringindexer", "type": "real", "position": 10}, {"inherited": true, "checked": true, "field": "practicename_stringindexer", "alias": "practicename_stringindexer", "type": "real", "position": 11}, {"inherited": true, "checked": true, "field": "practiceaddress1_stringindexer", "alias": "practiceaddress1_stringindexer", "type": "real", "position": 12}, {"inherited": true, "checked": true, "field": "practiceaddress2_stringindexer", "alias": "practiceaddress2_stringindexer", "type": "real", "position": 13}, {"inherited": true, "checked": true, "field": "practicecity_stringindexer", "alias": "practicecity_stringindexer", "type": "real", "position": 14}, {"inherited": true, "checked": true, "field": "practicestate_stringindexer", "alias": "practicestate_stringindexer", "type": "real", "position": 15}, {"inherited": true, "checked": true, "field": "specialitieslist_stringindexer", "alias": "specialitieslist_stringindexer", "type": "real", "position": 16}, {"inherited": true, "checked": true, "field": "providertypelist_stringindexer", "alias": "providertypelist_stringindexer", "type": "numeric", "position": 17}, {"inherited": true, "checked": true, "field": "supplieslist_stringindexer", "alias": "supplieslist_stringindexer", "type": "real", "position": 18}], "actual_schema": [{"inherited": true, "checked": true, "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": 0}, {"inherited": true, "checked": true, "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "participationbegindate", "alias": "participationbegindate", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "businessname", "alias": "businessname", "type": "String", "position": 3}, {"inherited": true, "checked": true, "field": "practicename", "alias": "practicename", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "practiceaddress1", "alias": "practiceaddress1", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "practiceaddress2", "alias": "practiceaddress2", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "practicecity", "alias": "practicecity", "type": "String", "position": 7}, {"inherited": true, "checked": true, "field": "practicestate", "alias": "practicestate", "type": "String", "position": 8}, {"inherited": true, "checked": true, "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": 9}, {"inherited": true, "checked": true, "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": 10}, {"inherited": true, "checked": true, "field": "specialitieslist", "alias": "specialitieslist", "type": "String", "position": 11}, {"inherited": true, "checked": true, "field": "providertypelist", "alias": "providertypelist", "type": "String", "position": 12}, {"inherited": true, "checked": true, "field": "supplieslist", "alias": "supplieslist", "type": "String", "position": 13}, {"inherited": true, "checked": true, "field": "latitude", "alias": "latitude", "type": "real", "position": 14}, {"inherited": true, "checked": true, "field": "longitude", "alias": "longitude", "type": "real", "position": 15}, {"inherited": true, "checked": true, "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": 16}], "selected_schema": [], "created_at": "2025-01-17 20:30:41.410000", "originalcount": 59566, "samplecount": 6019, "samplefile": "/FileStore/platform/sampleData/678abdf1bdb869a10b24512b/part-00000-df9f8a87-a225-43b8-9bee-ad4fb0750247-c000.csv", "joinSchema": [], "updated_at": "2025-01-17 20:32:15.054000", "__v": 0, "datacache": 0, "sampleData": [{"provider_id": 23280121, "acceptsassignement": true, "participationbegindate": 1705449600000, "businessname": "39 PHARMACY CORPORATION", "practicename": "39 PHARMACY", "practiceaddress1": "13671 BEACH BLVD STE B", "practiceaddress2": null, "practicecity": "WESTMINSTER", "practicestate": "CA", "practicezip9code": 926833200, "telephonenumber": 7143791099, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "latitude": 33.7635989831, "longitude": -117.9903239934, "is_contracted_for_cba": false}, {"provider_id": 20575847, "acceptsassignement": true, "participationbegindate": 1705017600000, "businessname": "APPARO, INC.", "practicename": "EVERCARE MEDICAL SOLUTIONS INC", "practiceaddress1": "2102 BUTTON LN", "practiceaddress2": "STE 105", "practicecity": "LA GRANGE", "practicestate": "KY", "practicezip9code": 400316720, "telephonenumber": 5022229222, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 38.39402, "longitude": -85.40254, "is_contracted_for_cba": false}, {"provider_id": 23280163, "acceptsassignement": true, "participationbegindate": 1704844800000, "businessname": "HACKENSACK PHARMACY INC", "practicename": "HACKENSACK PHARMACY", "practiceaddress1": "441 PASSAIC STREET", "practiceaddress2": null, "practicecity": "HACKENSACK", "practicestate": "NJ", "practicezip9code": 7601, "telephonenumber": 2014881230, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 40.8989254747, "longitude": -74.0556728784, "is_contracted_for_cba": false}, {"provider_id": 23280349, "acceptsassignement": false, "participationbegindate": 1701820800000, "businessname": "PROSTHETIC AND ORTHOTIC ASSOCIATES OF SOUTH CAROLINA LLC", "practicename": "PROSTHETIC AND ORTHOTIC ASSOC OF SC", "practiceaddress1": "4900 OHEAR AVE", "practiceaddress2": "STE 100", "practicecity": "CHARLESTON", "practicestate": "SC", "practicezip9code": 294055091, "telephonenumber": 8432773919, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Limb Prostheses", "latitude": 32.8833188968, "longitude": -79.9756620172, "is_contracted_for_cba": false}, {"provider_id": 20533685, "acceptsassignement": true, "participationbegindate": 1701648000000, "businessname": "OPTUM PHARMACY 705, LLC", "practicename": "OPTUM PHARMACY 705, LLC", "practiceaddress1": "3539 BLUECUTT RD", "practiceaddress2": null, "practicecity": "COLUMBUS", "practicestate": "MS", "practicezip9code": 397051324, "telephonenumber": 8663068900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.51717, "longitude": -88.4165, "is_contracted_for_cba": false}, {"provider_id": 23280487, "acceptsassignement": false, "participationbegindate": 1700179200000, "businessname": "MEDIX SUPPLIES INC", "practicename": "MEDIX SUPPLIES INC", "practiceaddress1": "5301 LAUREL CANYON BLVD", "practiceaddress2": "STE 136", "practicecity": "VALLEY VILLAGE", "practicestate": "CA", "practicezip9code": 916072778, "telephonenumber": 8188243222, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 34.1669129879, "longitude": -118.3969639793, "is_contracted_for_cba": false}, {"provider_id": 20303273, "acceptsassignement": true, "participationbegindate": 1700006400000, "businessname": "MS EYE CARE PA", "practicename": "MS EYE CARE PA", "practiceaddress1": "504 EASEL ST", "practiceaddress2": null, "practicecity": "TAYLOR", "practicestate": "MS", "practicezip9code": 386731003, "telephonenumber": 6622349394, "specialitieslist": "Optometrist", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 34.2907, "longitude": -89.60851, "is_contracted_for_cba": false}, {"provider_id": 23280193, "acceptsassignement": true, "participationbegindate": 1704326400000, "businessname": "DEVINES PHARMACY INC", "practicename": "DEVINE'S PHARMACY", "practiceaddress1": "1949 OAK TREE RD", "practiceaddress2": null, "practicecity": "EDISON", "practicestate": "NJ", "practicezip9code": 88202036, "telephonenumber": 7325497117, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Urological Supplies", "latitude": 40.573874987, "longitude": -74.3662550367, "is_contracted_for_cba": false}, {"provider_id": 20680583, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #758", "practiceaddress1": "18 S MARSHALL AVE", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "MN", "practicezip9code": 560871613, "telephonenumber": 5077234313, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44.23843, "longitude": -94.97607, "is_contracted_for_cba": false}, {"provider_id": 20680685, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #727", "practiceaddress1": "223 STATE ST N", "practiceaddress2": null, "practicecity": "WASECA", "practicestate": "MN", "practicezip9code": 560932930, "telephonenumber": 5078351610, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44.07901, "longitude": -93.50745, "is_contracted_for_cba": false}, {"provider_id": 20303297, "acceptsassignement": true, "participationbegindate": 1699488000000, "businessname": "DYNAMEDICS MEDICAL SOLUTIONS, INC.", "practicename": "DYNAMEDICS MEDICAL SOLUTIONS INC", "practiceaddress1": "1053 BULLARD CT", "practiceaddress2": "STE AB", "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276156801, "telephonenumber": 8006680021, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 35.86943, "longitude": -78.62087, "is_contracted_for_cba": false}, {"provider_id": 20347331, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "SOUTH BROWARD HOSPITAL DISTRICT", "practicename": "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "practiceaddress1": "777 S DOUGLAS RD", "practiceaddress2": null, "practicecity": "PEMBROKE PINES", "practicestate": "FL", "practicezip9code": 330251353, "telephonenumber": 9545185675, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 26.00298, "longitude": -80.17975, "is_contracted_for_cba": false}, {"provider_id": 20412839, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "1721 MILLER ST", "practiceaddress2": null, "practicecity": "LA CROSSE", "practicestate": "WI", "practicezip9code": 546015217, "telephonenumber": 6087846500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.79506, "longitude": -91.25194, "is_contracted_for_cba": false}, {"provider_id": 20590727, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "MED-SHOP OF HUGHES SPRINGS INC", "practicename": "THE MED-SHOP PHARMACY", "practiceaddress1": "111 E 2ND", "practiceaddress2": null, "practicecity": "HUGHES SPRINGS", "practicestate": "TX", "practicezip9code": 756562596, "telephonenumber": 9036393508, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": null, "supplieslist": "Nebulizer Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.9989140169, "longitude": -94.6311369979, "is_contracted_for_cba": false}, {"provider_id": 20339183, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10174", "practiceaddress1": "700 ATLANTIC AVENUE", "practiceaddress2": null, "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21112813, "telephonenumber": 6177377232, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.35258, "longitude": -71.05528, "is_contracted_for_cba": false}, {"provider_id": 20339513, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01021", "practiceaddress1": "500 ROUTE 134", "practiceaddress2": "STE 2", "practicecity": "SOUTH DENNIS", "practicestate": "MA", "practicezip9code": 26603430, "telephonenumber": 5083980133, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.69601, "longitude": -70.1533, "is_contracted_for_cba": false}, {"provider_id": 20339675, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01264", "practiceaddress1": "704 CENTRE ST", "practiceaddress2": null, "practicecity": "JAMAICA PLAIN", "practicestate": "MA", "practicezip9code": 21302516, "telephonenumber": 6175243933, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.3116, "longitude": -71.11428, "is_contracted_for_cba": false}, {"provider_id": 20339729, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00915", "practiceaddress1": "19 DODGE ST", "practiceaddress2": "STE A", "practicecity": "BEVERLY", "practicestate": "MA", "practicezip9code": 19151705, "telephonenumber": 9789270060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.57611, "longitude": -70.89147, "is_contracted_for_cba": false}, {"provider_id": 20339705, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01853", "practiceaddress1": "737 BRIDGE ST", "practiceaddress2": null, "practicecity": "WEYMOUTH", "practicestate": "MA", "practicezip9code": 21912139, "telephonenumber": 7813353331, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.24513, "longitude": -70.93752, "is_contracted_for_cba": false}, {"provider_id": 20339459, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01049", "practiceaddress1": "942 A HYDE PARK AVE", "practiceaddress2": null, "practicecity": "HYDE PARK", "practicestate": "MA", "practicezip9code": 21363269, "telephonenumber": 6173645141, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.26762, "longitude": -71.12081, "is_contracted_for_cba": false}, {"provider_id": 20339477, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00318", "practiceaddress1": "637 LOWELL STREET", "practiceaddress2": null, "practicecity": "PEABODY", "practicestate": "MA", "practicezip9code": 19602318, "telephonenumber": 9785355465, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.55041, "longitude": -70.99903, "is_contracted_for_cba": false}, {"provider_id": 20339465, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01130", "practiceaddress1": "615-621 BELMONT AVE", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "MA", "practicezip9code": 11082439, "telephonenumber": 4137322998, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.08591, "longitude": -72.55645, "is_contracted_for_cba": false}, {"provider_id": 20315537, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01875", "practiceaddress1": "414 UNION STREET", "practiceaddress2": null, "practicecity": "ASHLAND", "practicestate": "MA", "practicezip9code": 17212154, "telephonenumber": 5088817606, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.25558, "longitude": -71.46559, "is_contracted_for_cba": false}, {"provider_id": 20314871, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16831", "practiceaddress1": "14500 W COLFAX AVE", "practiceaddress2": "UNIT B1", "practicecity": "LAKEWOOD", "practicestate": "CO", "practicezip9code": 804013203, "telephonenumber": 3032739949, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.73343, "longitude": -105.15468, "is_contracted_for_cba": false}, {"provider_id": 20314601, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10139", "practiceaddress1": "7300 N FM 620 RD", "practiceaddress2": null, "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787264535, "telephonenumber": 5122499448, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.4046910118, "longitude": -97.8543930025, "is_contracted_for_cba": false}, {"provider_id": 20314727, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10671", "practiceaddress1": "10420 FM 1464 RD", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "TX", "practicezip9code": 774072044, "telephonenumber": 2812400123, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.68566, "longitude": -95.70149, "is_contracted_for_cba": false}, {"provider_id": 20314799, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10576", "practiceaddress1": "3802 E BROAD ST", "practiceaddress2": null, "practicecity": "MANSFIELD", "practicestate": "TX", "practicezip9code": 760635617, "telephonenumber": 8174731373, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.58005, "longitude": -97.07183, "is_contracted_for_cba": false}, {"provider_id": 20336189, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 05829", "practiceaddress1": "500 DUNDEE AVENUE", "practiceaddress2": null, "practicecity": "ELGIN", "practicestate": "IL", "practicezip9code": 601203819, "telephonenumber": 8476952398, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.04685, "longitude": -88.27568, "is_contracted_for_cba": false}, {"provider_id": 20336165, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 02942", "practiceaddress1": "401 W ARMITAGE AVE", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606144512, "telephonenumber": 3123373035, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.91822, "longitude": -87.6396, "is_contracted_for_cba": false}, {"provider_id": 20337119, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09086", "practiceaddress1": "670 EL CERRITO PLZ", "practiceaddress2": null, "practicecity": "EL CERRITO", "practicestate": "CA", "practicezip9code": 945304010, "telephonenumber": 5105245895, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.9006, "longitude": -122.29896, "is_contracted_for_cba": false}, {"provider_id": 20315237, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02054", "practiceaddress1": "136 NAHATAN ST", "practiceaddress2": null, "practicecity": "NORWOOD", "practicestate": "MA", "practicezip9code": 20624252, "telephonenumber": 7817692422, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.19497, "longitude": -71.20078, "is_contracted_for_cba": false}, {"provider_id": 20337071, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09320", "practiceaddress1": "686 LIGHTHOUSE AVE", "practiceaddress2": null, "practicecity": "MONTEREY", "practicestate": "CA", "practicezip9code": 939401008, "telephonenumber": 8316555411, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.6142, "longitude": -121.90211, "is_contracted_for_cba": false}, {"provider_id": 20337125, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09099", "practiceaddress1": "4020 FREMONT HUB", "practiceaddress2": null, "practicecity": "FREMONT", "practicestate": "CA", "practicezip9code": 945381322, "telephonenumber": 5107975505, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.54844, "longitude": -121.98849, "is_contracted_for_cba": false}, {"provider_id": 20337107, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09130", "practiceaddress1": "175 41ST ST", "practiceaddress2": null, "practicecity": "OAKLAND", "practicestate": "CA", "practicezip9code": 946115206, "telephonenumber": 5106583496, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.82668, "longitude": -122.253, "is_contracted_for_cba": false}, {"provider_id": 20336945, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09922", "practiceaddress1": "3950 W POINT LOMA BLVD", "practiceaddress2": null, "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921105601, "telephonenumber": 6195231440, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.75385, "longitude": -117.22353, "is_contracted_for_cba": false}, {"provider_id": 20337095, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09146", "practiceaddress1": "575 S CITRUS AVE", "practiceaddress2": null, "practicecity": "COVINA", "practicestate": "CA", "practicezip9code": 917232930, "telephonenumber": 6263310036, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.07949, "longitude": -117.89023, "is_contracted_for_cba": false}, {"provider_id": 20337077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09128", "practiceaddress1": "2314 SANTA CLARA AVE", "practiceaddress2": null, "practicecity": "ALAMEDA", "practicestate": "CA", "practicezip9code": 945014522, "telephonenumber": 5105234929, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.76554, "longitude": -122.24272, "is_contracted_for_cba": false}, {"provider_id": 20335265, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #05421", "practiceaddress1": "2375 DRAUDEN RD", "practiceaddress2": null, "practicecity": "PLAINFIELD", "practicestate": "IL", "practicezip9code": 605862213, "telephonenumber": 8155770457, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.56429, "longitude": -88.22942, "is_contracted_for_cba": false}, {"provider_id": 20336891, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09158", "practiceaddress1": "850 OROVILLE DAM BLVD E", "practiceaddress2": null, "practicecity": "OROVILLE", "practicestate": "CA", "practicezip9code": 959655722, "telephonenumber": 5305341554, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.49975, "longitude": -121.56552, "is_contracted_for_cba": false}, {"provider_id": 20337401, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09796", "practiceaddress1": "490 RODRIGUEZ ST", "practiceaddress2": null, "practicecity": "WATSONVILLE", "practicestate": "CA", "practicezip9code": 950764522, "telephonenumber": 8317229454, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.90975, "longitude": -121.75919, "is_contracted_for_cba": false}, {"provider_id": 20340605, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01009", "practiceaddress1": "21 AUSTIN ST", "practiceaddress2": "BUNKER HILL MALL", "practicecity": "CHARLESTOWN", "practicestate": "MA", "practicezip9code": 21293502, "telephonenumber": 6172422950, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.37473, "longitude": -71.06652, "is_contracted_for_cba": false}, {"provider_id": 20338901, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY#01803", "practiceaddress1": "2 W CENTER STREET", "practiceaddress2": null, "practicecity": "WEST BRIDGEWATER", "practicestate": "MA", "practicezip9code": 23791741, "telephonenumber": 5085888050, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.01546, "longitude": -71.03963, "is_contracted_for_cba": false}, {"provider_id": 20339309, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00654", "practiceaddress1": "344 GREAT RD", "practiceaddress2": null, "practicecity": "ACTON", "practicestate": "MA", "practicezip9code": 17204044, "telephonenumber": 9782649130, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.50292, "longitude": -71.42002, "is_contracted_for_cba": false}, {"provider_id": 20339297, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07242", "practiceaddress1": "4201 MONTANO RD NW", "practiceaddress2": null, "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871205743, "telephonenumber": 5059226323, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.14999, "longitude": -106.68672, "is_contracted_for_cba": false}, {"provider_id": 20344799, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONGS DRUGS #09835", "practiceaddress1": "2750 WOODLAWN DR", "practiceaddress2": null, "practicecity": "HONOLULU", "practicestate": "HI", "practicezip9code": 968221841, "telephonenumber": 8089882151, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 21.30764, "longitude": -157.8097, "is_contracted_for_cba": false}, {"provider_id": 23279953, "acceptsassignement": false, "participationbegindate": 1713916800000, "businessname": "TOTAL MEDICAL EQUIPMENT LLC", "practicename": "TOTAL MEDICAL EQUIPMENT LLC", "practiceaddress1": "12975 JEFFERSON AVE", "practiceaddress2": "STE 105", "practicecity": "NEWPORT NEWS", "practicestate": "VA", "practicezip9code": 236081786, "telephonenumber": 5404139331, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf", "latitude": 37.1586265448, "longitude": -76.5364244844, "is_contracted_for_cba": false}, {"provider_id": 23278993, "acceptsassignement": true, "participationbegindate": 1713225600000, "businessname": "INFUSE ALASKA LLC", "practicename": "INFUSE ALASKA", "practiceaddress1": "6250 TUTTLE PL", "practiceaddress2": "STE 7", "practicecity": "ANCHORAGE", "practicestate": "AK", "practicezip9code": 995072094, "telephonenumber": 9072229979, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 61.1642726842, "longitude": -149.8396925115, "is_contracted_for_cba": false}, {"provider_id": 34359446, "acceptsassignement": true, "participationbegindate": 1713139200000, "businessname": "FRESH MEADOW PHARMACY INC", "practicename": "FRESH MEADOW PHARMACY INC.", "practiceaddress1": "18408 HORACE HARDING EXPY", "practiceaddress2": null, "practicecity": "FRESH MEADOWS", "practicestate": "NY", "practicezip9code": 113652124, "telephonenumber": 7182609353, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7396220093, "longitude": -73.789835411, "is_contracted_for_cba": false}, {"provider_id": 23279029, "acceptsassignement": true, "participationbegindate": 1712707200000, "businessname": "OPTIMAL VERSATILITY", "practicename": "OPTIMAL VERSATILITY", "practiceaddress1": "601 HERITAGE DR", "practiceaddress2": "STE 207", "practicecity": "JUPITER", "practicestate": "FL", "practicezip9code": 334582777, "telephonenumber": 5618214323, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Urological Supplies", "latitude": 26.8895550104, "longitude": -80.1056359988, "is_contracted_for_cba": false}, {"provider_id": 23279041, "acceptsassignement": true, "participationbegindate": 1712620800000, "businessname": "MY SUPER PHARMACY", "practicename": "MY SUPER PHARMACY", "practiceaddress1": "8601 NW SOUTH RIVER DR", "practiceaddress2": null, "practicecity": "MEDLEY", "practicestate": "FL", "practicezip9code": 331667428, "telephonenumber": 7864854170, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 25.8511610077, "longitude": -80.3195020185, "is_contracted_for_cba": false}, {"provider_id": 23279077, "acceptsassignement": false, "participationbegindate": 1712188800000, "businessname": "AMERICARE OF AMITYVILLE PHARMACY INC", "practicename": "AMERICARE OF AMITYVILLE PHARMACY IN", "practiceaddress1": "357 BROADWAY", "practiceaddress2": null, "practicecity": "AMITYVILLE", "practicestate": "NY", "practicezip9code": 117012748, "telephonenumber": 6316165101, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs", "latitude": 40.6840682219, "longitude": -73.4175341546, "is_contracted_for_cba": false}, {"provider_id": 20328287, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02408", "practiceaddress1": "802 LANDSDOWNE AVE", "practiceaddress2": null, "practicecity": "DREXEL HILL", "practicestate": "PA", "practicezip9code": 190261526, "telephonenumber": 6108536018, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95982, "longitude": -75.28809, "is_contracted_for_cba": false}, {"provider_id": 20328719, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05103", "practiceaddress1": "1003 CALIFORNIA AVE", "practiceaddress2": null, "practicecity": "NATRONA HEIGHTS", "practicestate": "PA", "practicezip9code": 150651301, "telephonenumber": 7242247772, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.6185, "longitude": -79.73253, "is_contracted_for_cba": false}, {"provider_id": 20328707, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05098", "practiceaddress1": "330 W COLUMBUS AVE", "practiceaddress2": null, "practicecity": "CORRY", "practicestate": "PA", "practicezip9code": 16407, "telephonenumber": 8146642617, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.9346, "longitude": -79.65726, "is_contracted_for_cba": false}, {"provider_id": 20327249, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02866", "practiceaddress1": "1046 MARKET ST", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191074205, "telephonenumber": 2155921543, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95153, "longitude": -75.15755, "is_contracted_for_cba": false}, {"provider_id": 20328851, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 02131", "practiceaddress1": "3943 HULMEVILLE ROAD", "practiceaddress2": null, "practicecity": "BENSALEM", "practicestate": "PA", "practicezip9code": 19020, "telephonenumber": 2152447002, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.10923, "longitude": -74.93623, "is_contracted_for_cba": false}, {"provider_id": 20328047, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06043", "practiceaddress1": "302 W BRIDGE ST", "practiceaddress2": null, "practicecity": "NEW HOPE", "practicestate": "PA", "practicezip9code": 189381432, "telephonenumber": 2158625917, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.36268, "longitude": -74.96717, "is_contracted_for_cba": false}, {"provider_id": 20328683, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05099", "practiceaddress1": "392 NORTH ST", "practiceaddress2": null, "practicecity": "MEADVILLE", "practicestate": "PA", "practicezip9code": 163352500, "telephonenumber": 8143336370, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.64016, "longitude": -80.14734, "is_contracted_for_cba": false}, {"provider_id": 20329511, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #17393", "practiceaddress1": "5057 HARVEY ST", "practiceaddress2": null, "practicecity": "MUSKEGON", "practicestate": "MI", "practicezip9code": 494449795, "telephonenumber": 2317987507, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.16007, "longitude": -86.20577, "is_contracted_for_cba": false}, {"provider_id": 20329691, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #16599", "practiceaddress1": "650 BROWN RD", "practiceaddress2": null, "practicecity": "AUBURN HILLS", "practicestate": "MI", "practicezip9code": 483261307, "telephonenumber": 2483938114, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.7082, "longitude": -83.2615, "is_contracted_for_cba": false}, {"provider_id": 20329319, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "WOODWARD DETROIT CVS LLC", "practiceaddress1": "6839 S WESTNEDGE AVE", "practiceaddress2": null, "practicecity": "PORTAGE", "practicestate": "MI", "practicezip9code": 490023582, "telephonenumber": 2693279646, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.21895, "longitude": -85.5893, "is_contracted_for_cba": false}, {"provider_id": 20329697, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #16656", "practiceaddress1": "1301 COOLIDGE HWY", "practiceaddress2": null, "practicecity": "TROY", "practicestate": "MI", "practicezip9code": 480847017, "telephonenumber": 2486142801, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.54649, "longitude": -83.18644, "is_contracted_for_cba": false}, {"provider_id": 20312573, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PUERTO RICO CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07967", "practiceaddress1": "88 CARR 2", "practiceaddress2": null, "practicecity": "MANATI", "practicestate": "PR", "practicezip9code": 6745469, "telephonenumber": 7878548450, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 18.43315, "longitude": -66.48436, "is_contracted_for_cba": false}, {"provider_id": 20308397, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05285", "practiceaddress1": "1315 MOSS ST", "practiceaddress2": null, "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 705013648, "telephonenumber": 3372321564, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.24307, "longitude": -92.00661, "is_contracted_for_cba": false}, {"provider_id": 20521403, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS PHARMACY 110", "practiceaddress1": "US HIGHWAY 64", "practiceaddress2": null, "practicecity": "CASHIERS", "practicestate": "NC", "practicezip9code": 287171913, "telephonenumber": 8287436312, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.10838, "longitude": -83.11258, "is_contracted_for_cba": false}, {"provider_id": 20521589, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #031", "practiceaddress1": "151 SMOKEY PARK HWY", "practiceaddress2": null, "practicecity": "ASHEVILLE", "practicestate": "NC", "practicezip9code": 28806, "telephonenumber": 8286705776, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.56451, "longitude": -82.62808, "is_contracted_for_cba": false}, {"provider_id": 20521823, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #409", "practiceaddress1": "100 OLD ORCHARD SQ", "practiceaddress2": null, "practicecity": "ELLIJAY", "practicestate": "GA", "practicezip9code": 305408172, "telephonenumber": 7066357176, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.67582, "longitude": -84.47832, "is_contracted_for_cba": false}, {"provider_id": 20521277, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #451", "practiceaddress1": "1502 ATLANTA HWY", "practiceaddress2": null, "practicecity": "AUBURN", "practicestate": "GA", "practicezip9code": 300113648, "telephonenumber": 7702775284, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0101, "longitude": -83.83832, "is_contracted_for_cba": false}, {"provider_id": 20521871, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #457", "practiceaddress1": "1735 ZEBULON RD", "practiceaddress2": null, "practicecity": "GRIFFIN", "practicestate": "GA", "practicezip9code": 302235103, "telephonenumber": 7702285815, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.1927, "longitude": -84.28711, "is_contracted_for_cba": false}, {"provider_id": 20308157, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08922", "practiceaddress1": "1850 N HIGHWAY 190", "practiceaddress2": null, "practicecity": "COVINGTON", "practicestate": "LA", "practicezip9code": 704335157, "telephonenumber": 9858091515, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.45756, "longitude": -90.08198, "is_contracted_for_cba": false}, {"provider_id": 23279131, "acceptsassignement": true, "participationbegindate": 1711497600000, "businessname": "SOUTH TEXAS ORTHOPEDIC SHOES LLC", "practicename": "SOUTH TEXAS ORTHOPEDIC SHOES LLC", "practiceaddress1": "1125 JAMES ST", "practiceaddress2": "STE G", "practicecity": "WESLACO", "practicestate": "TX", "practicezip9code": 785966657, "telephonenumber": 9569981178, "specialitieslist": null, "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 26.149068012, "longitude": -97.9756720168, "is_contracted_for_cba": false}, {"provider_id": 26717020, "acceptsassignement": true, "participationbegindate": 1711497600000, "businessname": "MEDS ON TIME PHARMACY CORP.", "practicename": "MEDS ON TIME PHARMACY CORP.", "practiceaddress1": "3147 LAWSON BLVD", "practiceaddress2": null, "practicecity": "OCEANSIDE", "practicestate": "NY", "practicezip9code": 115723717, "telephonenumber": 5162087332, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6346743371, "longitude": -73.653618588, "is_contracted_for_cba": false}, {"provider_id": 34359458, "acceptsassignement": true, "participationbegindate": 1711497600000, "businessname": "RELIABLE RX LLC", "practicename": "RELIABLE RX LLC", "practiceaddress1": "1248 COLUMBUS AVE", "practiceaddress2": "STE 10", "practicecity": "LEBANON", "practicestate": "OH", "practicezip9code": 450369005, "telephonenumber": 5138091122, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Nebulizer Equipment and/or Supplies", "latitude": 39.4516295984, "longitude": -84.1813110207, "is_contracted_for_cba": false}, {"provider_id": 20308661, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05396", "practiceaddress1": "4890 BARKSDALE BLVD", "practiceaddress2": null, "practicecity": "BOSSIER CITY", "practicestate": "LA", "practicezip9code": 711124566, "telephonenumber": 3187474330, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.46188, "longitude": -93.66361, "is_contracted_for_cba": false}, {"provider_id": 20308901, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16686", "practiceaddress1": "7110 YOUREE DR", "practiceaddress2": null, "practicecity": "SHREVEPORT", "practicestate": "LA", "practicezip9code": 711055107, "telephonenumber": 3187987860, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.4412, "longitude": -93.71755, "is_contracted_for_cba": false}, {"provider_id": 23282881, "acceptsassignement": true, "participationbegindate": 1710892800000, "businessname": "PHARMILYCARE INC", "practicename": "ROSA PHARMACY", "practiceaddress1": "9200 VALLEY BLVD", "practiceaddress2": null, "practicecity": "ROSEMEAD", "practicestate": "CA", "practicezip9code": 917701900, "telephonenumber": 6265739477, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Urological Supplies|Nebulizer Equipment and/or Supplies", "latitude": 34.0805829894, "longitude": -118.0693500014, "is_contracted_for_cba": false}, {"provider_id": 23279191, "acceptsassignement": true, "participationbegindate": 1710806400000, "businessname": "OPTIONS MOBILITY, LLC", "practicename": "OPTIONS MOBILITY", "practiceaddress1": "1700 N DIXIE HWY", "practiceaddress2": "STE 118", "practicecity": "BOCA RATON", "practicestate": "FL", "practicezip9code": 334321807, "telephonenumber": 5616177429, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions", "latitude": 26.3654750056, "longitude": -80.0847949833, "is_contracted_for_cba": false}, {"provider_id": 20521451, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS PHARMACY #428", "practiceaddress1": "199 E LOUISE ST", "practiceaddress2": null, "practicecity": "CLARKESVILLE", "practicestate": "GA", "practicezip9code": 305236019, "telephonenumber": 7067543933, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.60314, "longitude": -83.51743, "is_contracted_for_cba": false}, {"provider_id": 21611715, "acceptsassignement": true, "participationbegindate": 1727049600000, "businessname": "H SERVICES CORP", "practicename": "H SERVICES CORP", "practiceaddress1": "1801 CORAL WAY", "practiceaddress2": "STE 311", "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331452784, "telephonenumber": 7866314839, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.7510499869, "longitude": -80.2243150306, "is_contracted_for_cba": false}, {"provider_id": 20329739, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #16157", "practiceaddress1": "30020 GRAND RIVER AVE", "practiceaddress2": null, "practicecity": "FARMINGTON HILLS", "practicestate": "MI", "practicezip9code": 483364722, "telephonenumber": 2484771467, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.45045, "longitude": -83.34163, "is_contracted_for_cba": false}, {"provider_id": 20353691, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9773", "practiceaddress1": "10300 CENTRAL AVE SE", "practiceaddress2": null, "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871232732, "telephonenumber": 5052920917, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.07153, "longitude": -106.53273, "is_contracted_for_cba": false}, {"provider_id": 20352659, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5067", "practiceaddress1": "963 S MILITARY TRL", "practiceaddress2": null, "practicecity": "WEST PALM BEACH", "practicestate": "FL", "practicezip9code": 334153909, "telephonenumber": 5616150543, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.6647, "longitude": -80.11259, "is_contracted_for_cba": false}, {"provider_id": 20351075, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3829", "practiceaddress1": "8398 SHELDON RD", "practiceaddress2": null, "practicecity": "TAMPA", "practicestate": "FL", "practicezip9code": 336151609, "telephonenumber": 8138841487, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.02527, "longitude": -82.58315, "is_contracted_for_cba": false}, {"provider_id": 20309081, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05293", "practiceaddress1": "24600 CHURCH ST", "practiceaddress2": null, "practicecity": "PLAQUEMINE", "practicestate": "LA", "practicezip9code": 707644116, "telephonenumber": 2256876816, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Infusion Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.28171, "longitude": -91.22577, "is_contracted_for_cba": false}, {"provider_id": 20310977, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17219", "practiceaddress1": "10302 156TH ST E", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983749321, "telephonenumber": 2536041067, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.11623, "longitude": -122.29085, "is_contracted_for_cba": false}, {"provider_id": 20312213, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #11427", "practiceaddress1": "2564 BARATARIA BLVD", "practiceaddress2": null, "practicecity": "MARRERO", "practicestate": "LA", "practicezip9code": 700725304, "telephonenumber": 5045820323, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.85594, "longitude": -90.10416, "is_contracted_for_cba": false}, {"provider_id": 20312003, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10885", "practiceaddress1": "1420 SAINT CHARLES ST", "practiceaddress2": null, "practicecity": "HOUMA", "practicestate": "LA", "practicezip9code": 703603935, "telephonenumber": 9855809990, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.58256, "longitude": -90.74696, "is_contracted_for_cba": false}, {"provider_id": 20312189, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OKLAHOMA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06096", "practiceaddress1": "1301 N SANTA FE AVE", "practiceaddress2": null, "practicecity": "EDMOND", "practicestate": "OK", "practicezip9code": 730033673, "telephonenumber": 4053400522, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.66751, "longitude": -97.51416, "is_contracted_for_cba": false}, {"provider_id": 20352617, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1131 E SUPERIOR ST", "practiceaddress2": null, "practicecity": "DULUTH", "practicestate": "MN", "practicezip9code": 558022216, "telephonenumber": 2187243060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 46.79794, "longitude": -92.08402, "is_contracted_for_cba": false}, {"provider_id": 20352623, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2942", "practiceaddress1": "2300 PECAN BLVD", "practiceaddress2": null, "practicecity": "MCALLEN", "practicestate": "TX", "practicezip9code": 785017332, "telephonenumber": 9566867486, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.2192, "longitude": -98.24306, "is_contracted_for_cba": false}, {"provider_id": 20352665, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04416", "practiceaddress1": "20011 BOLLINGER RD", "practiceaddress2": null, "practicecity": "CUPERTINO", "practicestate": "CA", "practicezip9code": 950144532, "telephonenumber": 4089738402, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.3108, "longitude": -122.02609, "is_contracted_for_cba": false}, {"provider_id": 20312201, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OKLAHOMA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06128", "practiceaddress1": "1016 SW LEE BLVD", "practiceaddress2": null, "practicecity": "LAWTON", "practicestate": "OK", "practicezip9code": 735015721, "telephonenumber": 5803531940, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.5942, "longitude": -98.40397, "is_contracted_for_cba": false}, {"provider_id": 20308889, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16805", "practiceaddress1": "4313 AMBASSADOR CAFFERY PKWY", "practiceaddress2": null, "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 705086703, "telephonenumber": 3379819673, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.15919, "longitude": -92.05147, "is_contracted_for_cba": false}, {"provider_id": 20353595, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "303 S CIRCLE DR", "practiceaddress2": null, "practicecity": "COLORADO SPRINGS", "practicestate": "CO", "practicezip9code": 809103026, "telephonenumber": 7194448569, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.82686, "longitude": -104.77918, "is_contracted_for_cba": false}, {"provider_id": 20352563, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04754", "practiceaddress1": "8380 HARRISON ST", "practiceaddress2": null, "practicecity": "LA VISTA", "practicestate": "NE", "practicezip9code": 681282918, "telephonenumber": 4025927990, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.19078, "longitude": -96.04241, "is_contracted_for_cba": false}, {"provider_id": 20352329, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4811", "practiceaddress1": "12807 US HIGHWAY 301", "practiceaddress2": null, "practicecity": "DADE CITY", "practicestate": "FL", "practicezip9code": 335255812, "telephonenumber": 3525679606, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.34977, "longitude": -82.18767, "is_contracted_for_cba": false}, {"provider_id": 20509337, "acceptsassignement": true, "participationbegindate": 1692316800000, "businessname": "DASCO-MAJOR HOME MEDICAL EQUIPMENT, LLC", "practicename": "DASCO-MAJOR HOME MEDICAL EQUIPMENT,", "practiceaddress1": "245 NORTHRIDGE DR", "practiceaddress2": "STE F", "practicecity": "SHELBYVILLE", "practicestate": "IN", "practicezip9code": 461768522, "telephonenumber": 3173923760, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Breast Prostheses and/or Accessories|Facial Prostheses|Neurostimulators and/or Supplies|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 39.54577, "longitude": -85.788, "is_contracted_for_cba": false}, {"provider_id": 20305517, "acceptsassignement": false, "participationbegindate": 1692316800000, "businessname": "GENAHEALTH PHARMACY INC", "practicename": "GENAHEALTH PHARMACY", "practiceaddress1": "18107 SHERMAN WAY", "practiceaddress2": "SUITE 202", "practicecity": "RESEDA", "practicestate": "CA", "practicezip9code": 913358802, "telephonenumber": 8187983314, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.20109, "longitude": -118.52745, "is_contracted_for_cba": false}, {"provider_id": 34357076, "acceptsassignement": false, "participationbegindate": 1691020800000, "businessname": "ALLCARE MEDICAL EQUIPMENT AND SUPPLY LLC", "practicename": "ALLCARE MEDICAL EQUIPMENT AND SUPPL", "practiceaddress1": "20 E NORTHWEST HWY", "practiceaddress2": null, "practicecity": "MOUNT PROSPECT", "practicestate": "IL", "practicezip9code": 600563223, "telephonenumber": 8477492566, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Unknown|Lymphedema Compression Treatment Items", "latitude": 42.0635848771, "longitude": -87.9365046959, "is_contracted_for_cba": false}, {"provider_id": 20305667, "acceptsassignement": true, "participationbegindate": 1690329600000, "businessname": "STRONGHOLD PHARMACY LLC", "practicename": "STRONGHOLD PHARMACY", "practiceaddress1": "125 S MAIN ST", "practiceaddress2": null, "practicecity": "ARLINGTON", "practicestate": "SD", "practicezip9code": 572122086, "telephonenumber": 6059835711, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 44.36386, "longitude": -97.13409, "is_contracted_for_cba": false}, {"provider_id": 20351177, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "500 S COMMERCIAL ST", "practiceaddress2": "WALGREENS #3392", "practicecity": "NEENAH", "practicestate": "WI", "practicezip9code": 549563383, "telephonenumber": 9207291311, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.18202, "longitude": -88.46486, "is_contracted_for_cba": false}, {"provider_id": 20351111, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02660", "practiceaddress1": "41400 BLACOW RD", "practiceaddress2": null, "practicecity": "FREMONT", "practicestate": "CA", "practicezip9code": 945383387, "telephonenumber": 5104408195, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.52238, "longitude": -121.96983, "is_contracted_for_cba": false}, {"provider_id": 20315765, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01157", "practiceaddress1": "1242 PARKER ST", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "MA", "practicezip9code": 11291006, "telephonenumber": 4137965501, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.11388, "longitude": -72.49862, "is_contracted_for_cba": false}, {"provider_id": 20316029, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00009", "practiceaddress1": "339 SQUIRE RD", "practiceaddress2": null, "practicecity": "REVERE", "practicestate": "MA", "practicezip9code": 21514309, "telephonenumber": 7812896099, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.3991, "longitude": -70.98924, "is_contracted_for_cba": false}, {"provider_id": 20308499, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MARYLAND CVS PHARMACY LLC.", "practicename": "CVS PHARMACY # 03043", "practiceaddress1": "1500 RITCHIE HWY", "practiceaddress2": null, "practicecity": "ARNOLD", "practicestate": "MD", "practicezip9code": 210122400, "telephonenumber": 4107573902, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.02633, "longitude": -76.50198, "is_contracted_for_cba": false}, {"provider_id": 20310065, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MARYLAND CVS PHARMACY LLC.", "practicename": "CVS PHARMACY #07656", "practiceaddress1": "3915 HOLLINS FERRY RD", "practiceaddress2": null, "practicecity": "BALTIMORE", "practicestate": "MD", "practicezip9code": 212273416, "telephonenumber": 4102421441, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.24307, "longitude": -76.64978, "is_contracted_for_cba": false}, {"provider_id": 34357130, "acceptsassignement": true, "participationbegindate": 1690243200000, "businessname": "COMMUNITY HEALTH NETWORK INC", "practicename": "COMMUNITY HEALTH NETWORK INC", "practiceaddress1": "7250 CLEARVISTA DR", "practiceaddress2": "STE 140", "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462564640, "telephonenumber": 3176213100, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.9005720019, "longitude": -86.0400210163, "is_contracted_for_cba": false}, {"provider_id": 34357172, "acceptsassignement": true, "participationbegindate": 1689724800000, "businessname": "ZARCHY PHARMACY RX LLC", "practicename": "ZARCHY PHARMACY RX LLC", "practiceaddress1": "5721 ROOSEVELT AVE", "practiceaddress2": null, "practicecity": "WOODSIDE", "practicestate": "NY", "practicezip9code": 113773430, "telephonenumber": 7184243286, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7455139424, "longitude": -73.9068140061, "is_contracted_for_cba": false}, {"provider_id": 26717650, "acceptsassignement": false, "participationbegindate": 1689638400000, "businessname": "VISIONARY RETAIL MANAGEMENT CA INC", "practicename": "VISIONWORKS", "practiceaddress1": "939 W ARROW HWY", "practiceaddress2": null, "practicecity": "SAN DIMAS", "practicestate": "CA", "practicezip9code": 917732410, "telephonenumber": 9096865401, "specialitieslist": "Optician", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 34.1080279807, "longitude": -117.8266049725, "is_contracted_for_cba": false}, {"provider_id": 20379749, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS#17201", "practiceaddress1": "415 E RIDGEVILLE BLVD", "practiceaddress2": null, "practicecity": "MOUNT AIRY", "practicestate": "MD", "practicezip9code": 217715217, "telephonenumber": 3018292920, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.36439, "longitude": -77.16109, "is_contracted_for_cba": false}, {"provider_id": 20379737, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "379 N MAIN ST", "practiceaddress2": null, "practicecity": "CLEVELAND", "practicestate": "GA", "practicezip9code": 305281127, "telephonenumber": 7068652525, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.60125, "longitude": -83.76502, "is_contracted_for_cba": false}, {"provider_id": 20380145, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #19760", "practiceaddress1": "12 PARK DR", "practiceaddress2": null, "practicecity": "HORNELL", "practicestate": "NY", "practicezip9code": 148432271, "telephonenumber": 6073246276, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.3207, "longitude": -77.66151, "is_contracted_for_cba": false}, {"provider_id": 20366345, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06834", "practiceaddress1": "4400 NW 23RD ST", "practiceaddress2": null, "practicecity": "OKLAHOMA CITY", "practicestate": "OK", "practicezip9code": 731072644, "telephonenumber": 4059439899, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.49322, "longitude": -97.60005, "is_contracted_for_cba": false}, {"provider_id": 20366399, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6346", "practiceaddress1": "525 W ZIA RD", "practiceaddress2": null, "practicecity": "SANTA FE", "practicestate": "NM", "practicezip9code": 875056910, "telephonenumber": 5058202196, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.6471, "longitude": -105.95499, "is_contracted_for_cba": false}, {"provider_id": 20366387, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN #7041", "practiceaddress1": "9184 E VALENCIA RD", "practiceaddress2": null, "practicecity": "TUCSON", "practicestate": "AZ", "practicezip9code": 857474902, "telephonenumber": 5205748328, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.11914, "longitude": -110.79763, "is_contracted_for_cba": false}, {"provider_id": 20335889, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11297", "practiceaddress1": "6125 LEGACY DR", "practiceaddress2": null, "practicecity": "PLANO", "practicestate": "TX", "practicezip9code": 750243619, "telephonenumber": 4017651500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.07959, "longitude": -96.83592, "is_contracted_for_cba": false}, {"provider_id": 20380259, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "469 WALPOLE ST", "practiceaddress2": null, "practicecity": "NORWOOD", "practicestate": "MA", "practicezip9code": 20621710, "telephonenumber": 7817695400, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.17817, "longitude": -71.2224, "is_contracted_for_cba": false}, {"provider_id": 20366333, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6300 E LAKE SAMMAMISH PKWY SE", "practiceaddress2": null, "practicecity": "ISSAQUAH", "practicestate": "WA", "practicezip9code": 980298935, "telephonenumber": 4253690265, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 47.54488, "longitude": -122.03759, "is_contracted_for_cba": false}, {"provider_id": 21611667, "acceptsassignement": false, "participationbegindate": 1729468800000, "businessname": "ARIZE MEDICAL & MOBILITY INC", "practicename": "ARIZE MEDICAL EQUIPMENT & REPAIR", "practiceaddress1": "6420 SKY POINTE DR", "practiceaddress2": "STE 110", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891314052, "telephonenumber": 7027789771, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Nebulizer Equipment and/or Supplies", "latitude": 36.2789398977, "longitude": -115.2629855117, "is_contracted_for_cba": false}, {"provider_id": 24548496, "acceptsassignement": true, "participationbegindate": 1728604800000, "businessname": "SHARP MEMORIAL HOSPITAL", "practicename": "SHARP METRO PHARMACY", "practiceaddress1": "8010 FROST ST", "practiceaddress2": "STE 102", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921234201, "telephonenumber": 8589394500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 32.8015719973, "longitude": -117.1519890042, "is_contracted_for_cba": false}, {"provider_id": 26717242, "acceptsassignement": true, "participationbegindate": 1728345600000, "businessname": "PLATINUM MED SUPPLIES LLC", "practicename": "PLATINUM MED SUPPLIES LLC", "practiceaddress1": "620 HILLCREST RD", "practiceaddress2": "STE 100", "practicecity": "LILBURN", "practicestate": "GA", "practicezip9code": 300476892, "telephonenumber": 8002767440, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33.8983340114, "longitude": -84.147920033, "is_contracted_for_cba": false}, {"provider_id": 26717818, "acceptsassignement": false, "participationbegindate": 1727913600000, "businessname": "PHARMAKEIO INC", "practicename": "PHARMAKEIO INC", "practiceaddress1": "2222 154TH ST", "practiceaddress2": null, "practicecity": "WHITESTONE", "practicestate": "NY", "practicezip9code": 113573732, "telephonenumber": 7183166881, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "latitude": 40.7778200604, "longitude": -73.8093779859, "is_contracted_for_cba": false}, {"provider_id": 20335733, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11161", "practiceaddress1": "515 HOUSTON ST", "practiceaddress2": null, "practicecity": "FORT WORTH", "practicestate": "TX", "practicezip9code": 76102, "telephonenumber": 8178200488, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.75385, "longitude": -97.3316, "is_contracted_for_cba": false}, {"provider_id": 23279521, "acceptsassignement": false, "participationbegindate": 1718928000000, "businessname": "APPLE MEDICAL SUPPLY LLC", "practicename": "APPLE MEDICAL SUPPLY LLC", "practiceaddress1": "7552 113TH ST", "practiceaddress2": "APT 1F", "practicecity": "FOREST HILLS", "practicestate": "NY", "practicezip9code": 113757468, "telephonenumber": 3476441969, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 40.7181132076, "longitude": -73.8348684431, "is_contracted_for_cba": false}, {"provider_id": 20545871, "acceptsassignement": true, "participationbegindate": 1718928000000, "businessname": "NYC DRUG STORE, INC.", "practicename": "NYC DRUG STORE INC.", "practiceaddress1": "15916 UNION TPKE", "practiceaddress2": null, "practicecity": "FLUSHING", "practicestate": "NY", "practicezip9code": 113661954, "telephonenumber": 7183800999, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.72013, "longitude": -73.80743, "is_contracted_for_cba": false}, {"provider_id": 20303969, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "5550 BETHELVIEW RD", "practiceaddress2": "KROGER PHARMACY #627", "practicecity": "CUMMING", "practicestate": "GA", "practicezip9code": 300406859, "telephonenumber": 6784564054, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.21767, "longitude": -84.25127, "is_contracted_for_cba": false}, {"provider_id": 24548016, "acceptsassignement": true, "participationbegindate": 1718323200000, "businessname": "MMG TEAM INC", "practicename": "WESTCOAST SPECIALTY PHARMACY", "practiceaddress1": "6727 ODESSA AVE", "practiceaddress2": "STE 201", "practicecity": "LAKE BALBOA", "practicestate": "CA", "practicezip9code": 914065747, "telephonenumber": 8187434373, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.1926619849, "longitude": -118.4905099582, "is_contracted_for_cba": false}, {"provider_id": 20366699, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6609", "practiceaddress1": "119 FORKS OF THE RIVER PKWY", "practiceaddress2": null, "practicecity": "SEVIERVILLE", "practicestate": "TN", "practicezip9code": 378623435, "telephonenumber": 8659088755, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.86879, "longitude": -83.56777, "is_contracted_for_cba": false}, {"provider_id": 20366375, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6993", "practiceaddress1": "220 FOOTHILLS MALL DR", "practiceaddress2": null, "practicecity": "MARYVILLE", "practicestate": "TN", "practicezip9code": 378015516, "telephonenumber": 8653797899, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.73836, "longitude": -83.99394, "is_contracted_for_cba": false}, {"provider_id": 20366489, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6102", "practiceaddress1": "4404 S MERIDIAN", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983739500, "telephonenumber": 2537706484, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 47.16312, "longitude": -122.29323, "is_contracted_for_cba": false}, {"provider_id": 20380127, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17857", "practiceaddress1": "101 BISHOP MURPHY DR", "practiceaddress2": null, "practicecity": "FROSTBURG", "practicestate": "MD", "practicezip9code": 215321329, "telephonenumber": 3016892422, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.64571, "longitude": -78.91228, "is_contracted_for_cba": false}, {"provider_id": 20316053, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07682", "practiceaddress1": "1830 TEXOMA PKWY", "practiceaddress2": null, "practicecity": "SHERMAN", "practicestate": "TX", "practicezip9code": 750902616, "telephonenumber": 9038935511, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.65708, "longitude": -96.60375, "is_contracted_for_cba": false}, {"provider_id": 20315297, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00080", "practiceaddress1": "2306 RR 620 S", "practiceaddress2": null, "practicecity": "LAKEWAY", "practicestate": "TX", "practicezip9code": 787346269, "telephonenumber": 5122636000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.34211, "longitude": -97.96853, "is_contracted_for_cba": false}, {"provider_id": 20317367, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05962", "practiceaddress1": "3200 TEASLEY LN", "practiceaddress2": null, "practicecity": "DENTON", "practicestate": "TX", "practicezip9code": 762108322, "telephonenumber": 9403821810, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.17352, "longitude": -97.11402, "is_contracted_for_cba": false}, {"provider_id": 23279593, "acceptsassignement": false, "participationbegindate": 1717545600000, "businessname": "K&B MEDICAL SUPPLY LLC", "practicename": "K&B MEDICAL SUPPLY LLC", "practiceaddress1": "521 ENERGY CENTER BLVD", "practiceaddress2": "STE 1505", "practicecity": "NORTHPORT", "practicestate": "AL", "practicezip9code": 354735833, "telephonenumber": 8663842069, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf", "latitude": 33.2402088537, "longitude": -87.5521211528, "is_contracted_for_cba": false}, {"provider_id": 21610971, "acceptsassignement": false, "participationbegindate": 1717545600000, "businessname": "NSC-TX, PLLC", "practicename": "NSC-TX, PLLC", "practiceaddress1": "4828 LOOP CENTRAL DR", "practiceaddress2": "STE 150", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770812193, "telephonenumber": 7139401315, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses", "latitude": 29.7253769868, "longitude": -95.4551000406, "is_contracted_for_cba": false}, {"provider_id": 23282491, "acceptsassignement": false, "participationbegindate": 1717459200000, "businessname": "ELECTROCHEMICAL OXYGEN CONCEPTS, INC.", "practicename": "MAIN OFFICE", "practiceaddress1": "12500 NETWORK BLVD", "practiceaddress2": "STE 310", "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 782493310, "telephonenumber": 8008252979, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Oxygen Equipment and/or Supplies|Surgical Dressings", "latitude": 29.5528449815, "longitude": -98.589811967, "is_contracted_for_cba": false}, {"provider_id": 23279611, "acceptsassignement": true, "participationbegindate": 1717459200000, "businessname": "COBB MEDICAL SUPPLY", "practicename": "COBB MEDICAL SUPPLY", "practiceaddress1": "1755 THE EXCHANGE SE", "practiceaddress2": "STE 110", "practicecity": "ATLANTA", "practicestate": "GA", "practicezip9code": 303397401, "telephonenumber": 4709643790, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33.90986202, "longitude": -84.4840230348, "is_contracted_for_cba": false}, {"provider_id": 20310587, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16124", "practiceaddress1": "3310 S MERIDIAN", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983733777, "telephonenumber": 2538644617, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.15959, "longitude": -122.29476, "is_contracted_for_cba": false}, {"provider_id": 20310911, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10927", "practiceaddress1": "1982 W 1700 S", "practiceaddress2": null, "practicecity": "SYRACUSE", "practicestate": "UT", "practicezip9code": 840759698, "telephonenumber": 8018252679, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.08924, "longitude": -112.06384, "is_contracted_for_cba": false}, {"provider_id": 20311835, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARKANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10816", "practiceaddress1": "1749 W WALNUT ST", "practiceaddress2": null, "practicecity": "ROGERS", "practicestate": "AR", "practicezip9code": 727563323, "telephonenumber": 4792460871, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.33445, "longitude": -94.14242, "is_contracted_for_cba": false}, {"provider_id": 20310857, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARAMCY #16694", "practiceaddress1": "665 SLEATER KINNEY RD SE", "practiceaddress2": null, "practicecity": "LACEY", "practicestate": "WA", "practicezip9code": 985031007, "telephonenumber": 3604868927, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.0427, "longitude": -122.83389, "is_contracted_for_cba": false}, {"provider_id": 20310803, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10387", "practiceaddress1": "2100 N 45TH ST", "practiceaddress2": null, "practicecity": "SEATTLE", "practicestate": "WA", "practicezip9code": 981036902, "telephonenumber": 2066331536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.66147, "longitude": -122.33312, "is_contracted_for_cba": false}, {"provider_id": 20311889, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10578", "practiceaddress1": "11506 S 4000 W", "practiceaddress2": null, "practicecity": "SOUTH JORDAN", "practicestate": "UT", "practicezip9code": 840096070, "telephonenumber": 8014469995, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.54328, "longitude": -111.9864, "is_contracted_for_cba": false}, {"provider_id": 20311913, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10577", "practiceaddress1": "475 E STATE RD", "practiceaddress2": null, "practicecity": "AMERICAN FORK", "practicestate": "UT", "practicezip9code": 840032558, "telephonenumber": 8017561501, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.37427, "longitude": -111.78661, "is_contracted_for_cba": false}, {"provider_id": 20304725, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER CO", "practiceaddress1": "1524 GEORGIA HIGHWAY 16 W", "practiceaddress2": null, "practicecity": "GRIFFIN", "practicestate": "GA", "practicezip9code": 302232046, "telephonenumber": 7702297430, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.25099, "longitude": -84.28793, "is_contracted_for_cba": false}, {"provider_id": 20303507, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-529", "practiceaddress1": "965 POPLAR ST", "practiceaddress2": null, "practicecity": "NELSONVILLE", "practicestate": "OH", "practicezip9code": 457641442, "telephonenumber": 7407531984, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.45193, "longitude": -82.22073, "is_contracted_for_cba": false}, {"provider_id": 20303807, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-966", "practiceaddress1": "4656 CEMETERY RD", "practiceaddress2": null, "practicecity": "HILLIARD", "practicestate": "OH", "practicezip9code": 430261124, "telephonenumber": 6148761248, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.03181, "longitude": -83.14022, "is_contracted_for_cba": false}, {"provider_id": 20304467, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #363", "practiceaddress1": "48 BULLSBORO DR", "practiceaddress2": null, "practicecity": "NEWNAN", "practicestate": "GA", "practicezip9code": 302631461, "telephonenumber": 7702515188, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.38284, "longitude": -84.78806, "is_contracted_for_cba": false}, {"provider_id": 20304851, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #257", "practiceaddress1": "115 RICHARD RUSSELL PARKWAY", "practiceaddress2": null, "practicecity": "WARNER ROBINS", "practicestate": "GA", "practicezip9code": 31088, "telephonenumber": 4789229040, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.59376, "longitude": -83.62533, "is_contracted_for_cba": false}, {"provider_id": 20304443, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 298", "practiceaddress1": "1700 MONROE DR", "practiceaddress2": null, "practicecity": "ATLANTA", "practicestate": "GA", "practicezip9code": 303245033, "telephonenumber": 4048720785, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.8005, "longitude": -84.37172, "is_contracted_for_cba": false}, {"provider_id": 20304449, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "4355 WASHINGTON RD", "practiceaddress2": null, "practicecity": "EVANS", "practicestate": "GA", "practicezip9code": 308093939, "telephonenumber": 7068684515, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.53936, "longitude": -82.13121, "is_contracted_for_cba": false}, {"provider_id": 24548502, "acceptsassignement": true, "participationbegindate": 1727740800000, "businessname": "AMIGOS HME DME INC", "practicename": "AMIGOS HME DME INC", "practiceaddress1": "815 SALINAS AVE", "practiceaddress2": "STE C", "practicecity": "LAREDO", "practicestate": "TX", "practicezip9code": 780408007, "telephonenumber": 9563825913, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 27.5067960133, "longitude": -99.5082640366, "is_contracted_for_cba": false}, {"provider_id": 20379671, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17603", "practiceaddress1": "17 E STATE ST", "practiceaddress2": null, "practicecity": "ILION", "practicestate": "NY", "practicezip9code": 133571807, "telephonenumber": 3158949995, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.01532, "longitude": -75.03648, "is_contracted_for_cba": false}, {"provider_id": 20335919, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11209", "practiceaddress1": "3122 UNDERWOOD RD", "practiceaddress2": null, "practicecity": "LA PORTE", "practicestate": "TX", "practicezip9code": 775717502, "telephonenumber": 2812413117, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.66383, "longitude": -95.08701, "is_contracted_for_cba": false}, {"provider_id": 26717830, "acceptsassignement": false, "participationbegindate": 1727222400000, "businessname": "CURA MEDICAL SUPPLY LLC", "practicename": "CURA MEDICAL SUPPLY LLC", "practiceaddress1": "2511 NEUDORF RD", "practiceaddress2": "STE N", "practicecity": "CLEMMONS", "practicestate": "NC", "practicezip9code": 270128922, "telephonenumber": 3362839056, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Enteral Nutrients|Diabetic Shoes and Inserts|Lymphedema Compression Treatment Items", "latitude": 36.0287176659, "longitude": -80.3840451037, "is_contracted_for_cba": false}, {"provider_id": 21611691, "acceptsassignement": true, "participationbegindate": 1727222400000, "businessname": "YUBA CITY PHARMACY INC", "practicename": "YUBA CITY PHARMACY", "practiceaddress1": "1000 LINCOLN RD", "practiceaddress2": "STE A", "practicecity": "YUBA CITY", "practicestate": "CA", "practicezip9code": 959916598, "telephonenumber": 5304347494, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.1121540121, "longitude": -121.6266560283, "is_contracted_for_cba": false}, {"provider_id": 20521835, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #239", "practiceaddress1": "1900N MAIN ST", "practiceaddress2": null, "practicecity": "ANDERSON", "practicestate": "SC", "practicezip9code": 296213849, "telephonenumber": 8643320552, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.52171, "longitude": -82.65626, "is_contracted_for_cba": false}, {"provider_id": 20334935, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17807", "practiceaddress1": "100 CAMBRIDGE ST", "practiceaddress2": "STE 102", "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21142531, "telephonenumber": 6178501998, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.36094, "longitude": -71.06152, "is_contracted_for_cba": false}, {"provider_id": 20521367, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #436", "practiceaddress1": "1197 BIG A RD", "practiceaddress2": null, "practicecity": "TOCCOA", "practicestate": "GA", "practicezip9code": 305776028, "telephonenumber": 7068868711, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.57052, "longitude": -83.30675, "is_contracted_for_cba": false}, {"provider_id": 20378009, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12334", "practiceaddress1": "1654 N PEBBLE CREEK PKWY", "practiceaddress2": null, "practicecity": "GOODYEAR", "practicestate": "AZ", "practicezip9code": 853952571, "telephonenumber": 6232076808, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.46542, "longitude": -112.39257, "is_contracted_for_cba": false}, {"provider_id": 20303495, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "1100 HILLCREST PKWY", "practiceaddress2": null, "practicecity": "DUBLIN", "practicestate": "GA", "practicezip9code": 310213557, "telephonenumber": 4782773085, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.54757, "longitude": -82.92945, "is_contracted_for_cba": false}, {"provider_id": 20304671, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #636", "practiceaddress1": "3093 STEVE REYNOLDS BLVD", "practiceaddress2": null, "practicecity": "DULUTH", "practicestate": "GA", "practicezip9code": 300964501, "telephonenumber": 7702250960, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.95995, "longitude": -84.14148, "is_contracted_for_cba": false}, {"provider_id": 20303681, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "570 E CROSSVILLE RD", "practiceaddress2": null, "practicecity": "ROSWELL", "practicestate": "GA", "practicezip9code": 300753034, "telephonenumber": 7706402065, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.03774, "longitude": -84.34515, "is_contracted_for_cba": false}, {"provider_id": 20304947, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-870", "practiceaddress1": "2257 N HOLLAND SYLVANIA RD", "practiceaddress2": null, "practicecity": "TOLEDO", "practicestate": "OH", "practicezip9code": 436152646, "telephonenumber": 4195786465, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.66316, "longitude": -83.68265, "is_contracted_for_cba": false}, {"provider_id": 20304377, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #641", "practiceaddress1": "774 HIGHWAY 96", "practiceaddress2": null, "practicecity": "BONAIRE", "practicestate": "GA", "practicezip9code": 31005, "telephonenumber": 4789885720, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 32.55031, "longitude": -83.65337, "is_contracted_for_cba": false}, {"provider_id": 20327633, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17696", "practiceaddress1": "7162 RIDGE AVE", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191283250, "telephonenumber": 2154832124, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.04549, "longitude": -75.2325, "is_contracted_for_cba": false}, {"provider_id": 20327651, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16572", "practiceaddress1": "600 CHAUVET DR", "practiceaddress2": null, "practicecity": "PITTSBURGH", "practicestate": "PA", "practicezip9code": 152751043, "telephonenumber": 4121900802, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.44751, "longitude": -80.18166, "is_contracted_for_cba": false}, {"provider_id": 20328611, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16500", "practiceaddress1": "857 BALTIMORE PIKE", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "PA", "practicezip9code": 190643963, "telephonenumber": 6103380548, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.91543, "longitude": -75.33765, "is_contracted_for_cba": false}, {"provider_id": 20681903, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11306", "practiceaddress1": "7101 E WILLIAM CANNON DR", "practiceaddress2": null, "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787442243, "telephonenumber": 7372209738, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.1621450112, "longitude": -97.7257339739, "is_contracted_for_cba": false}, {"provider_id": 20313419, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06850", "practiceaddress1": "1424 NORTH ST", "practiceaddress2": null, "practicecity": "NACOGDOCHES", "practicestate": "TX", "practicezip9code": 759614037, "telephonenumber": 9365699596, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.61549, "longitude": -94.6528, "is_contracted_for_cba": false}, {"provider_id": 20313413, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00656", "practiceaddress1": "1000 E KING AVE", "practiceaddress2": null, "practicecity": "KINGSVILLE", "practicestate": "TX", "practicezip9code": 783635869, "telephonenumber": 3615929397, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27.5158, "longitude": -97.85541, "is_contracted_for_cba": false}, {"provider_id": 20313623, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 06238", "practiceaddress1": "4451 W FUQUA ST", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770456205, "telephonenumber": 7134336447, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.61325, "longitude": -95.4453, "is_contracted_for_cba": false}, {"provider_id": 20313023, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05894", "practiceaddress1": "13033 COIT RD", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752405723, "telephonenumber": 9723929634, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.92709, "longitude": -96.76923, "is_contracted_for_cba": false}, {"provider_id": 20378867, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11968", "practiceaddress1": "1250 TOM HALL ST", "practiceaddress2": null, "practicecity": "FORT MILL", "practicestate": "SC", "practicezip9code": 297157000, "telephonenumber": 8035484699, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.00791, "longitude": -80.92127, "is_contracted_for_cba": false}, {"provider_id": 20378111, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12885", "practiceaddress1": "2495 SANDY POINT RD", "practiceaddress2": null, "practicecity": "PALM HARBOR", "practicestate": "FL", "practicezip9code": 346851636, "telephonenumber": 7272545928, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.09215, "longitude": -82.70496, "is_contracted_for_cba": false}, {"provider_id": 20335937, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 11324", "practiceaddress1": "150 BAILEY RANCH RD", "practiceaddress2": null, "practicecity": "ALEDO", "practicestate": "TX", "practicezip9code": 76008, "telephonenumber": 6827034401, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.72103, "longitude": -97.60998, "is_contracted_for_cba": false}, {"provider_id": 20335961, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 10887", "practiceaddress1": "8516 PARKER RD", "practiceaddress2": null, "practicecity": "WYLIE", "practicestate": "TX", "practicezip9code": 750987744, "telephonenumber": 8724299847, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.04365, "longitude": -96.57533, "is_contracted_for_cba": false}, {"provider_id": 20345489, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09876", "practiceaddress1": "699 LEWELLING BLVD", "practiceaddress2": null, "practicecity": "SAN LEANDRO", "practicestate": "CA", "practicezip9code": 945791870, "telephonenumber": 5103510951, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.68618, "longitude": -122.13738, "is_contracted_for_cba": false}, {"provider_id": 20338223, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #03897", "practiceaddress1": "10 YOUNG ST", "practiceaddress2": null, "practicecity": "TONAWANDA", "practicestate": "NY", "practicezip9code": 141502208, "telephonenumber": 7166921894, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.02035, "longitude": -78.87651, "is_contracted_for_cba": false}, {"provider_id": 20378039, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "2540 NE 15TH AVE", "practiceaddress2": null, "practicecity": "WILTON MANORS", "practicestate": "FL", "practicezip9code": 333051310, "telephonenumber": 9543900445, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.15908, "longitude": -80.12703, "is_contracted_for_cba": false}, {"provider_id": 20378057, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11377", "practiceaddress1": "6707 PITTSFORD PALMYRA RD", "practiceaddress2": null, "practicecity": "FAIRPORT", "practicestate": "NY", "practicezip9code": 144503442, "telephonenumber": 5853601814, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.06938, "longitude": -77.444, "is_contracted_for_cba": false}, {"provider_id": 20378603, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12270", "practiceaddress1": "2101 NORTHERN BLVD NE", "practiceaddress2": null, "practicecity": "RIO RANCHO", "practicestate": "NM", "practicezip9code": 871244727, "telephonenumber": 5052173980, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.27445, "longitude": -106.69318, "is_contracted_for_cba": false}, {"provider_id": 20385953, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9971", "practiceaddress1": "41 HOLLAND AVE", "practiceaddress2": null, "practicecity": "ALBANY", "practicestate": "NY", "practicezip9code": 122083408, "telephonenumber": 5184262976, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.64855, "longitude": -73.77357, "is_contracted_for_cba": false}, {"provider_id": 20328617, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 16521", "practiceaddress1": "125 WITCHWOOD DR", "practiceaddress2": null, "practicecity": "NORTH WALES", "practicestate": "PA", "practicezip9code": 194541833, "telephonenumber": 2156997767, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.22528, "longitude": -75.23731, "is_contracted_for_cba": false}, {"provider_id": 20328383, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 17214", "practiceaddress1": "1824 E RIDGE PIKE", "practiceaddress2": null, "practicecity": "ROYERSFORD", "practicestate": "PA", "practicezip9code": 194682819, "telephonenumber": 6102262152, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.21371, "longitude": -75.49795, "is_contracted_for_cba": false}, {"provider_id": 20338199, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #3859", "practiceaddress1": "4815 BROADWAY", "practiceaddress2": null, "practicecity": "DEPEW", "practicestate": "NY", "practicezip9code": 140433926, "telephonenumber": 7166837971, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.90175, "longitude": -78.69572, "is_contracted_for_cba": false}, {"provider_id": 20336555, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS PHARMACY 03898", "practiceaddress1": "45 CUMBERLAND ST", "practiceaddress2": null, "practicecity": "WOONSOCKET", "practicestate": "RI", "practicezip9code": 28953301, "telephonenumber": 4017655010, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0079, "longitude": -71.50289, "is_contracted_for_cba": false}, {"provider_id": 20328497, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17185", "practiceaddress1": "246 WESTMINSTER DR", "practiceaddress2": null, "practicecity": "CARLISLE", "practicestate": "PA", "practicezip9code": 170133117, "telephonenumber": 7172493509, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.19741, "longitude": -77.1674, "is_contracted_for_cba": false}, {"provider_id": 20328575, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17163", "practiceaddress1": "2701 CASTOR AVE", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191345505, "telephonenumber": 2153059051, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.99046, "longitude": -75.09041, "is_contracted_for_cba": false}, {"provider_id": 20303513, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 490", "practiceaddress1": "805 GLYNN ST S", "practiceaddress2": "STE 117", "practicecity": "FAYETTEVILLE", "practicestate": "GA", "practicezip9code": 302142010, "telephonenumber": 7704618266, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.43271, "longitude": -84.45722, "is_contracted_for_cba": false}, {"provider_id": 20337959, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06621", "practiceaddress1": "415 W 3RD ST", "practiceaddress2": null, "practicecity": "MARION", "practicestate": "IN", "practicezip9code": 469523750, "telephonenumber": 7656621316, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.55873, "longitude": -85.66397, "is_contracted_for_cba": false}, {"provider_id": 20338295, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREEN EASTERN CO INC", "practiceaddress1": "35 MAIN ST", "practiceaddress2": null, "practicecity": "PEABODY", "practicestate": "MA", "practicezip9code": 19605548, "telephonenumber": 9789779211, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.52512, "longitude": -70.92584, "is_contracted_for_cba": false}, {"provider_id": 20330015, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #5723", "practiceaddress1": "960 NORTH AVE", "practiceaddress2": null, "practicecity": "BRIDGEPORT", "practicestate": "CT", "practicezip9code": 66065750, "telephonenumber": 2033346978, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.19145, "longitude": -73.19718, "is_contracted_for_cba": false}, {"provider_id": 20303981, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #344", "practiceaddress1": "3000 OLD ALABAMA RD", "practiceaddress2": null, "practicecity": "ALPHARETTA", "practicestate": "GA", "practicezip9code": 300225860, "telephonenumber": 7707517388, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.02168, "longitude": -84.27166, "is_contracted_for_cba": false}, {"provider_id": 20337719, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "TETER ORTHOTICS & PROSTHETICS, INC", "practicename": "TETER ORTHOTICS AND PROSTHETICS INC", "practiceaddress1": "1225 W FRONT ST", "practiceaddress2": "STE A", "practicecity": "TRAVERSE CITY", "practicestate": "MI", "practicezip9code": 496842368, "telephonenumber": 2319475701, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 44.76392, "longitude": -85.64325, "is_contracted_for_cba": false}, {"provider_id": 20387213, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12373", "practiceaddress1": "606 N BROADWAY ST", "practiceaddress2": null, "practicecity": "JOHNSON CITY", "practicestate": "TN", "practicezip9code": 376013535, "telephonenumber": 4232321524, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.33449, "longitude": -82.34376, "is_contracted_for_cba": false}, {"provider_id": 20387477, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10505", "practiceaddress1": "2785 N PINAL AVE", "practiceaddress2": null, "practicecity": "CASA GRANDE", "practicestate": "AZ", "practicezip9code": 851227916, "telephonenumber": 5204210031, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.93612, "longitude": -111.75702, "is_contracted_for_cba": false}, {"provider_id": 20336741, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS PHARMACY 03719", "practiceaddress1": "25 PUTNAM PIKE", "practiceaddress2": null, "practicecity": "JOHNSTON", "practicestate": "RI", "practicezip9code": 29192029, "telephonenumber": 4012313562, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.8614, "longitude": -71.49144, "is_contracted_for_cba": false}, {"provider_id": 20313083, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06725", "practiceaddress1": "601 N LOOP 274", "practiceaddress2": null, "practicecity": "ANGLETON", "practicestate": "TX", "practicezip9code": 775153256, "telephonenumber": 9798498294, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.17671, "longitude": -95.43121, "is_contracted_for_cba": false}, {"provider_id": 20313077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06727", "practiceaddress1": "1600 S BYPASS 35", "practiceaddress2": null, "practicecity": "ALVIN", "practicestate": "TX", "practicezip9code": 775114602, "telephonenumber": 2813311536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.40902, "longitude": -95.23332, "is_contracted_for_cba": false}, {"provider_id": 20336243, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #06448", "practiceaddress1": "1101 PEORIA ST", "practiceaddress2": null, "practicecity": "WASHINGTON", "practicestate": "IL", "practicezip9code": 615712350, "telephonenumber": 3094442301, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.70114, "longitude": -89.42669, "is_contracted_for_cba": false}, {"provider_id": 20313887, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 06903", "practiceaddress1": "3350 FOREST HILL CIR", "practiceaddress2": null, "practicecity": "FOREST HILL", "practicestate": "TX", "practicezip9code": 761401105, "telephonenumber": 8178689566, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.66001, "longitude": -97.27268, "is_contracted_for_cba": false}, {"provider_id": 20304593, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 519", "practiceaddress1": "1585 GEORGESVILLE SQUARE DR", "practiceaddress2": null, "practicecity": "COLUMBUS", "practicestate": "OH", "practicezip9code": 432283777, "telephonenumber": 6148781664, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.9204, "longitude": -83.12249, "is_contracted_for_cba": false}, {"provider_id": 20304515, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 542", "practiceaddress1": "31550 CHIEFTAIN DR", "practiceaddress2": null, "practicecity": "LOGAN", "practicestate": "OH", "practicezip9code": 431389087, "telephonenumber": 7403802041, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.5457, "longitude": -82.43531, "is_contracted_for_cba": false}, {"provider_id": 20335367, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #08926", "practiceaddress1": "983 IL ROUTE 59", "practiceaddress2": null, "practicecity": "ANTIOCH", "practicestate": "IL", "practicezip9code": 600021453, "telephonenumber": 8473955691, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.47644, "longitude": -88.10411, "is_contracted_for_cba": false}, {"provider_id": 20336057, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 04979", "practiceaddress1": "7855 S WESTERN AVE", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606205823, "telephonenumber": 7734366000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.75102, "longitude": -87.68275, "is_contracted_for_cba": false}, {"provider_id": 20337905, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #6536", "practiceaddress1": "2340 W SYCAMORE ST", "practiceaddress2": null, "practicecity": "KOKOMO", "practicestate": "IN", "practicezip9code": 469014108, "telephonenumber": 7654524437, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.48784, "longitude": -86.16411, "is_contracted_for_cba": false}, {"provider_id": 20313683, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 07207", "practiceaddress1": "210 N BUSINESS IH 35", "practiceaddress2": null, "practicecity": "NEW BRAUNFELS", "practicestate": "TX", "practicezip9code": 781307857, "telephonenumber": 8306295096, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.69412, "longitude": -98.10917, "is_contracted_for_cba": false}, {"provider_id": 20335985, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #06789", "practiceaddress1": "8645 WOODWARD AVE", "practiceaddress2": null, "practicecity": "WOODRIDGE", "practicestate": "IL", "practicezip9code": 605173148, "telephonenumber": 6309102250, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.73307, "longitude": -88.03037, "is_contracted_for_cba": false}, {"provider_id": 20341481, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY #16910", "practiceaddress1": "1901 13TH AVE E", "practiceaddress2": null, "practicecity": "TUSCALOOSA", "practicestate": "AL", "practicezip9code": 354044785, "telephonenumber": 2055565731, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.19665, "longitude": -87.51865, "is_contracted_for_cba": false}, {"provider_id": 20304905, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "600 E MAIN ST", "practiceaddress2": null, "practicecity": "HEBRON", "practicestate": "OH", "practicezip9code": 430258006, "telephonenumber": 7409282152, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.96139, "longitude": -82.47711, "is_contracted_for_cba": false}, {"provider_id": 20304437, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #16-531", "practiceaddress1": "8730 WATERVILLE SWANTON RD", "practiceaddress2": null, "practicecity": "WATERVILLE", "practicestate": "OH", "practicezip9code": 435669726, "telephonenumber": 4198781040, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.50975, "longitude": -83.75859, "is_contracted_for_cba": false}, {"provider_id": 20338511, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #2055", "practiceaddress1": "10962 FRANCIS LEWIS BLVD", "practiceaddress2": null, "practicecity": "QUEENS VILLAGE", "practicestate": "NY", "practicezip9code": 114291753, "telephonenumber": 7187404988, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.70672, "longitude": -73.75135, "is_contracted_for_cba": false}, {"provider_id": 20337989, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06661", "practiceaddress1": "263 W MORGAN ST", "practiceaddress2": null, "practicecity": "KNIGHTSTOWN", "practicestate": "IN", "practicezip9code": 461489312, "telephonenumber": 7653457163, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.80132, "longitude": -85.53137, "is_contracted_for_cba": false}, {"provider_id": 34358504, "acceptsassignement": true, "participationbegindate": 1715904000000, "businessname": "AID DEPOT MEDICAL SUPPLY", "practicename": "AID DEPOT MEDICAL SUPPLY", "practiceaddress1": "15664 MAIN ST", "practiceaddress2": "STE 210", "practicecity": "HESPERIA", "practicestate": "CA", "practicezip9code": 923453412, "telephonenumber": 8184540653, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Surgical Dressings", "latitude": 34.4251049843, "longitude": -117.3211389954, "is_contracted_for_cba": false}, {"provider_id": 23283235, "acceptsassignement": true, "participationbegindate": 1725580800000, "businessname": "EAGLET PHARMACY LLC", "practicename": "EAGLET PHARMACY", "practiceaddress1": "2209 SW 104TH ST", "practiceaddress2": "STE E", "practicecity": "OKLAHOMA CITY", "practicestate": "OK", "practicezip9code": 731597551, "telephonenumber": 4056765300, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 35.3636916845, "longitude": -97.5505982142, "is_contracted_for_cba": false}, {"provider_id": 20338241, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #3000", "practiceaddress1": "12 E MAIN RD", "practiceaddress2": null, "practicecity": "MIDDLETOWN", "practicestate": "RI", "practicezip9code": 28424912, "telephonenumber": 4018478520, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.51712, "longitude": -71.29968, "is_contracted_for_cba": false}, {"provider_id": 20338145, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREEN EASTERN CO INC", "practiceaddress1": "29 NEW DERBY ST", "practiceaddress2": null, "practicecity": "SALEM", "practicestate": "MA", "practicezip9code": 19703637, "telephonenumber": 9787447442, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.51949, "longitude": -70.89474, "is_contracted_for_cba": false}, {"provider_id": 20313449, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07196", "practiceaddress1": "4100 STATE HIGHWAY 121", "practiceaddress2": null, "practicecity": "CARROLLTON", "practicestate": "TX", "practicezip9code": 750101118, "telephonenumber": 9729397062, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.0223, "longitude": -96.93294, "is_contracted_for_cba": false}, {"provider_id": 20304323, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "1720 MARS HILL RD NW", "practiceaddress2": null, "practicecity": "ACWORTH", "practicestate": "GA", "practicezip9code": 301017127, "telephonenumber": 7704195495, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.99632, "longitude": -84.70595, "is_contracted_for_cba": false}, {"provider_id": 20456069, "acceptsassignement": true, "participationbegindate": 1715126400000, "businessname": "DHAKA RX INC", "practicename": "HILLSIDE DHAKA PHARMACY", "practiceaddress1": "17014 HILLSIDE AVE", "practiceaddress2": null, "practicecity": "JAMAICA", "practicestate": "NY", "practicezip9code": 114324547, "telephonenumber": 7185262300, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.71093, "longitude": -73.79174, "is_contracted_for_cba": false}, {"provider_id": 23282995, "acceptsassignement": true, "participationbegindate": 1715126400000, "businessname": "EZ SCRIPTS RX LLC", "practicename": "EZ SCRIPTS RX LLC", "practiceaddress1": "9857 63RD RD", "practiceaddress2": null, "practicecity": "REGO PARK", "practicestate": "NY", "practicezip9code": 113741739, "telephonenumber": 3478134177, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7325916042, "longitude": -73.8573771221, "is_contracted_for_cba": false}, {"provider_id": 26717044, "acceptsassignement": false, "participationbegindate": 1724630400000, "businessname": "RV MEDICAL SUPPLY INC", "practicename": "RV MEDICAL SUPPLY INC", "practiceaddress1": "12202 20TH AVE", "practiceaddress2": null, "practicecity": "COLLEGE POINT", "practicestate": "NY", "practicezip9code": 113562212, "telephonenumber": 3473686589, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Pneumatic Compression Devices and/or Supplies|Walkers|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 40.7815992091, "longitude": -73.8456412004, "is_contracted_for_cba": false}, {"provider_id": 20336591, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06612", "practiceaddress1": "5110 E 38TH ST", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462181717, "telephonenumber": 3175491891, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.82541, "longitude": -86.0828, "is_contracted_for_cba": false}, {"provider_id": 20338337, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06260", "practiceaddress1": "225 12TH ST", "practiceaddress2": null, "practicecity": "TELL CITY", "practicestate": "IN", "practicezip9code": 475861915, "telephonenumber": 8125474201, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.94427, "longitude": -86.76462, "is_contracted_for_cba": false}, {"provider_id": 20305001, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #631", "practiceaddress1": "2460 ENTERPRISE DR", "practiceaddress2": null, "practicecity": "OPELIKA", "practicestate": "AL", "practicezip9code": 368011510, "telephonenumber": 3347372650, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.62884, "longitude": -85.39979, "is_contracted_for_cba": false}, {"provider_id": 20343827, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07417", "practiceaddress1": "11820 ELAM RD", "practiceaddress2": null, "practicecity": "BALCH SPRINGS", "practicestate": "TX", "practicezip9code": 751802734, "telephonenumber": 9722863530, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.71669, "longitude": -96.62946, "is_contracted_for_cba": false}, {"provider_id": 21609081, "acceptsassignement": false, "participationbegindate": 1675728000000, "businessname": "SUTTER RX PHARMACY INC", "practicename": "SUTTER RX PHARMACY INC", "practiceaddress1": "593 SUTTER AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112074180, "telephonenumber": 3472950208, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6692400904, "longitude": -73.8969209296, "is_contracted_for_cba": false}, {"provider_id": 20307341, "acceptsassignement": true, "participationbegindate": 1675641600000, "businessname": "AJ WOODHAVEN CHEMIST INC", "practicename": "AJ WOODHAVEN CHEMIST INC", "practiceaddress1": "6243A WOODHAVEN BLVD", "practiceaddress2": null, "practicecity": "REGO PARK", "practicestate": "NY", "practicezip9code": 113743704, "telephonenumber": 9177915151, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.72567, "longitude": -73.87001, "is_contracted_for_cba": false}, {"provider_id": 26717302, "acceptsassignement": false, "participationbegindate": 1724371200000, "businessname": "DIVINE BEAUTY BAR, LLC", "practicename": "DIVINE BEAUTY BAR, LLC", "practiceaddress1": "4201 CYPRESS CREEK PKWY", "practiceaddress2": "STE 322", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770683414, "telephonenumber": 4694996200, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Breast Prostheses and/or Accessories|Neurostimulators and/or Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Lymphedema Compression Treatment Items", "latitude": 29.9902390083, "longitude": -95.4930760132, "is_contracted_for_cba": false}, {"provider_id": 20338571, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #4535", "practiceaddress1": "107 N MAIN ST", "practiceaddress2": null, "practicecity": "RANDOLPH", "practicestate": "MA", "practicezip9code": 23684629, "telephonenumber": 7819637713, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.1655, "longitude": -71.04336, "is_contracted_for_cba": false}, {"provider_id": 20338565, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #1847", "practiceaddress1": "757 GALLIVAN BLVD STE 3", "practiceaddress2": null, "practicecity": "DORCHESTER", "practicestate": "MA", "practicezip9code": 21223109, "telephonenumber": 6172825246, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.28442, "longitude": -71.04508, "is_contracted_for_cba": false}, {"provider_id": 20340221, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #6553", "practiceaddress1": "2320 CUNNINGHAM RD", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462243702, "telephonenumber": 3172416374, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.79792, "longitude": -86.26507, "is_contracted_for_cba": false}, {"provider_id": 20339903, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06697", "practiceaddress1": "2701 E 3RD ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IN", "practicezip9code": 474015433, "telephonenumber": 8123321419, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.16431, "longitude": -86.4968, "is_contracted_for_cba": false}, {"provider_id": 20307353, "acceptsassignement": true, "participationbegindate": 1675641600000, "businessname": "DENVER PAIN RELIEF CENTER PLLC", "practicename": "DENVER PAIN RELIEF CENTER", "practiceaddress1": "3915 E EXPOSITION AVE", "practiceaddress2": "STE 100", "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 802095052, "telephonenumber": 3039554609, "specialitieslist": null, "providertypelist": "NURSE PRACTITIONER", "supplieslist": "Contracture Treatment Devices: Dynamic Splint|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "latitude": 39.70392, "longitude": -104.94232, "is_contracted_for_cba": false}, {"provider_id": 34358882, "acceptsassignement": true, "participationbegindate": 1675468800000, "businessname": "LAABH PHARMACY LLC", "practicename": "LAABH PHARMACY LLC", "practiceaddress1": "4369 SUWANEE DAM RD", "practiceaddress2": "STE 102", "practicecity": "SUWANEE", "practicestate": "GA", "practicezip9code": 300244646, "telephonenumber": 4707804422, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.0653930111, "longitude": -84.0753869824, "is_contracted_for_cba": false}, {"provider_id": 20307377, "acceptsassignement": false, "participationbegindate": 1675382400000, "businessname": "MEDI PRIME PHARMACY INC", "practicename": "MEDI PRIME PHARMACY INC", "practiceaddress1": "10504 101ST AVE", "practiceaddress2": null, "practicecity": "OZONE PARK", "practicestate": "NY", "practicezip9code": 114162703, "telephonenumber": 3474944240, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.68632, "longitude": -73.83782, "is_contracted_for_cba": false}, {"provider_id": 21610905, "acceptsassignement": true, "participationbegindate": 1722384000000, "businessname": "ATTENTIVE MEDICAL SUPPLY LLC", "practicename": "ATTENTIVE MEDICAL SUPPLY LLC", "practiceaddress1": "12925 HIGHWAY 601", "practiceaddress2": "STE 100", "practicecity": "MIDLAND", "practicestate": "NC", "practicezip9code": 281079536, "telephonenumber": 7047815632, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 35.2388697235, "longitude": -80.5038562792, "is_contracted_for_cba": false}, {"provider_id": 20333429, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08293", "practiceaddress1": "1550 LAKE DR SE", "practiceaddress2": null, "practicecity": "GRAND RAPIDS", "practicestate": "MI", "practicezip9code": 495062704, "telephonenumber": 6162350747, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.95461, "longitude": -85.63038, "is_contracted_for_cba": false}, {"provider_id": 20319911, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16231", "practiceaddress1": "2056 SKIBO RD", "practiceaddress2": null, "practicecity": "FAYETTEVILLE", "practicestate": "NC", "practicezip9code": 283142245, "telephonenumber": 9108604606, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.05513, "longitude": -78.97269, "is_contracted_for_cba": false}, {"provider_id": 20307503, "acceptsassignement": true, "participationbegindate": 1675123200000, "businessname": "PRAMUKHDEV LLC", "practicename": "PRAMUKHDEV LLC", "practiceaddress1": "701 BRUNSWICK AVE", "practiceaddress2": null, "practicecity": "TRENTON", "practicestate": "NJ", "practicezip9code": 86384123, "telephonenumber": 6093965000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.23524, "longitude": -74.7533, "is_contracted_for_cba": false}, {"provider_id": 20683355, "acceptsassignement": false, "participationbegindate": 1722297600000, "businessname": "1-2-3 BREATHE FREE LLC", "practicename": "1-2-3 BREATHE FREE LLC", "practiceaddress1": "10320 W MCDOWELL RD", "practiceaddress2": "STE 3010", "practicecity": "AVONDALE", "practicestate": "AZ", "practicezip9code": 853924867, "telephonenumber": 6235354194, "specialitieslist": null, "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated", "latitude": 33.4652519708, "longitude": -112.2816256584, "is_contracted_for_cba": false}, {"provider_id": 26717326, "acceptsassignement": false, "participationbegindate": 1721692800000, "businessname": "QUADRA HEALTHCARE INC", "practicename": "986 PHARMACY #8026", "practiceaddress1": "8536 DEL WEBB BLVD", "practiceaddress2": null, "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891348676, "telephonenumber": 7024765888, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 36.2102902208, "longitude": -115.2798514451, "is_contracted_for_cba": false}, {"provider_id": 20341385, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05064", "practiceaddress1": "335 LANCASTER AVE", "practiceaddress2": null, "practicecity": "FRAZER", "practicestate": "PA", "practicezip9code": 193551835, "telephonenumber": 6102407871, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.03903, "longitude": -75.55204, "is_contracted_for_cba": false}, {"provider_id": 20331287, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #16471", "practiceaddress1": "1650 NEW BRIGHTON BLVD", "practiceaddress2": null, "practicecity": "MINNEAPOLIS", "practicestate": "MN", "practicezip9code": 554131643, "telephonenumber": 6127817746, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.00413, "longitude": -93.2285, "is_contracted_for_cba": false}, {"provider_id": 20331527, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #17405", "practiceaddress1": "810 COUNTY RD 42 W", "practiceaddress2": null, "practicecity": "BURNSVILLE", "practicestate": "MN", "practicezip9code": 553374492, "telephonenumber": 9524358141, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44.74657, "longitude": -93.28863, "is_contracted_for_cba": false}, {"provider_id": 20329589, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04903", "practiceaddress1": "3100 DAUPHIN ISLAND PKWY", "practiceaddress2": null, "practicecity": "MOBILE", "practicestate": "AL", "practicezip9code": 366053826, "telephonenumber": 2514712591, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.60773, "longitude": -88.07514, "is_contracted_for_cba": false}, {"provider_id": 20307563, "acceptsassignement": false, "participationbegindate": 1674518400000, "businessname": "SHAN-PHAM DIVERSIFIED HOLDINGS, INC", "practicename": "MEDHOPE PHARMACY", "practiceaddress1": "12946 DAIRY ASHFORD RD", "practiceaddress2": "#450", "practicecity": "SUGAR LAND", "practicestate": "TX", "practicezip9code": 774784643, "telephonenumber": 8662790497, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Mail Order)|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 29.63149, "longitude": -95.59792, "is_contracted_for_cba": false}, {"provider_id": 20307611, "acceptsassignement": true, "participationbegindate": 1674172800000, "businessname": "INNOVATIVE PROSTHETICS LLC", "practicename": "INNOVATIVE PROSTHETICS LLC", "practiceaddress1": "121 B PROFESSIONAL LN", "practiceaddress2": null, "practicecity": "PAWLEYS ISLAND", "practicestate": "SC", "practicezip9code": 295857878, "telephonenumber": 8433143148, "specialitieslist": null, "providertypelist": "CERTIFIED ORTH/PROS/PEDORTHIST", "supplieslist": "Contracture Treatment Devices: Dynamic Splint|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 33.44248, "longitude": -79.12729, "is_contracted_for_cba": false}, {"provider_id": 20307653, "acceptsassignement": false, "participationbegindate": 1674086400000, "businessname": "RAPID RX PHARMACY LLC", "practicename": "RAPID RX PHARMACY LLC", "practiceaddress1": "1131 W HAMILTON ST", "practiceaddress2": null, "practicecity": "ALLENTOWN", "practicestate": "PA", "practicezip9code": 181011047, "telephonenumber": 6107075510, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.59983, "longitude": -75.48081, "is_contracted_for_cba": false}, {"provider_id": 20304983, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 339", "practiceaddress1": "203 A COMMERCE STREET", "practiceaddress2": "STE A", "practicecity": "LAGRANGE", "practicestate": "GA", "practicezip9code": 302402358, "telephonenumber": 7068836178, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.04948, "longitude": -85.02552, "is_contracted_for_cba": false}, {"provider_id": 20304359, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #012", "practiceaddress1": "3403 FOREST DR", "practiceaddress2": null, "practicecity": "COLUMBIA", "practicestate": "SC", "practicezip9code": 292044028, "telephonenumber": 8037824027, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.01888, "longitude": -80.99099, "is_contracted_for_cba": false}, {"provider_id": 20342543, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01091", "practiceaddress1": "430 KEYSTONE AVE", "practiceaddress2": null, "practicecity": "SAYRE", "practicestate": "PA", "practicezip9code": 188402006, "telephonenumber": 5708887763, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.99519, "longitude": -76.52972, "is_contracted_for_cba": false}, {"provider_id": 20403929, "acceptsassignement": false, "participationbegindate": 1721174400000, "businessname": "ACCORD SPECIALTY, LLC", "practicename": "ACCORD SPECIALTY PHARMACY", "practiceaddress1": "2752 ENTERPRISE RD", "practiceaddress2": "STE B", "practicecity": "ORANGE CITY", "practicestate": "FL", "practicezip9code": 327638328, "telephonenumber": 3864563000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Urological Supplies|Nebulizer Equipment and/or Supplies", "latitude": 28.90639, "longitude": -81.28939, "is_contracted_for_cba": false}, {"provider_id": 20329637, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04917", "practiceaddress1": "675 TUSCALOOSA ST", "practiceaddress2": null, "practicecity": "GREENSBORO", "practicestate": "AL", "practicezip9code": 367442020, "telephonenumber": 3346248874, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.69886, "longitude": -87.59557, "is_contracted_for_cba": false}, {"provider_id": 20307665, "acceptsassignement": true, "participationbegindate": 1673913600000, "businessname": "FALLS PHARMACY INC", "practicename": "FALLS PHARMACY", "practiceaddress1": "2401 PINE AVE", "practiceaddress2": null, "practicecity": "NIAGARA FALLS", "practicestate": "NY", "practicezip9code": 143012401, "telephonenumber": 7162156302, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Nebulizer Equipment and/or Supplies", "latitude": 43.09502, "longitude": -79.03287, "is_contracted_for_cba": false}, {"provider_id": 23283013, "acceptsassignement": true, "participationbegindate": 1719964800000, "businessname": "ELITE RX INC", "practicename": "ELITE RX INC", "practiceaddress1": "19506 47TH AVE", "practiceaddress2": null, "practicecity": "FLUSHING", "practicestate": "NY", "practicezip9code": 113583910, "telephonenumber": 9172852177, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7524508055, "longitude": -73.7859229901, "is_contracted_for_cba": false}, {"provider_id": 20317631, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01417", "practiceaddress1": "13031 LEE JACKSON HWY", "practiceaddress2": null, "practicecity": "FAIRFAX", "practicestate": "VA", "practicezip9code": 220332050, "telephonenumber": 7033787550, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.88034, "longitude": -77.39625, "is_contracted_for_cba": false}, {"provider_id": 20307803, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "PETER HARSCH PROSTHETICS OTTOBOCK C", "practiceaddress1": "5995 MIRA MESA BLVD", "practiceaddress2": "STE A", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921214305, "telephonenumber": 8584040733, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 32.89792, "longitude": -117.19158, "is_contracted_for_cba": false}, {"provider_id": 20328461, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 04051", "practiceaddress1": "1740 WASHINGTON RD", "practiceaddress2": null, "practicecity": "PITTSBURGH", "practicestate": "PA", "practicezip9code": 152411411, "telephonenumber": 4128335557, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.3479, "longitude": -80.05342, "is_contracted_for_cba": false}, {"provider_id": 20329613, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04838", "practiceaddress1": "708 E MAIN ST", "practiceaddress2": null, "practicecity": "PRATTVILLE", "practicestate": "AL", "practicezip9code": 360673620, "telephonenumber": 3343650661, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.45999, "longitude": -86.45619, "is_contracted_for_cba": false}, {"provider_id": 20329553, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04845", "practiceaddress1": "806 HOKE ST", "practiceaddress2": null, "practicecity": "GADSDEN", "practicestate": "AL", "practicezip9code": 359031810, "telephonenumber": 2564924807, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.00288, "longitude": -85.9695, "is_contracted_for_cba": false}, {"provider_id": 23279497, "acceptsassignement": false, "participationbegindate": 1719878400000, "businessname": "EFFECTIVE MEDICAL EQUIPMENT LLC", "practicename": "EFFECTIVE MEDICAL EQUIPMENT LLC", "practiceaddress1": "650 HENDERSON DR", "practiceaddress2": "STE 428", "practicecity": "CARTERSVILLE", "practicestate": "GA", "practicezip9code": 301203759, "telephonenumber": 4702271882, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Orthoses: Off-The-Shelf", "latitude": 34.1529460131, "longitude": -84.8159970272, "is_contracted_for_cba": false}, {"provider_id": 20329535, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY #04853", "practiceaddress1": "520 HIGHLAND AVENUE", "practiceaddress2": null, "practicecity": "SELMA", "practicestate": "AL", "practicezip9code": 367016655, "telephonenumber": 3348755530, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.43115, "longitude": -87.02983, "is_contracted_for_cba": false}, {"provider_id": 34356722, "acceptsassignement": true, "participationbegindate": 1684281600000, "businessname": "SIMPLY CARE PHARMACY CORP", "practicename": "SIMPLY CARE PHARMACY CORP", "practiceaddress1": "1222 AVENUE U", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112294107, "telephonenumber": 7166662554, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.5983741165, "longitude": -73.9595189942, "is_contracted_for_cba": false}, {"provider_id": 26716918, "acceptsassignement": true, "participationbegindate": 1684281600000, "businessname": "OPRX #11030, LLC", "practicename": "OPRX #11030, LLC", "practiceaddress1": "465 PLANDOME RD", "practiceaddress2": null, "practicecity": "MANHASSET", "practicestate": "NY", "practicezip9code": 110301942, "telephonenumber": 5166278666, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7990495352, "longitude": -73.70059882, "is_contracted_for_cba": false}, {"provider_id": 20364371, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #09092", "practiceaddress1": "70 GATEWAY BLVD", "practiceaddress2": null, "practicecity": "ROCK SPRINGS", "practicestate": "WY", "practicezip9code": 829015709, "telephonenumber": 3073822536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.57623, "longitude": -109.25005, "is_contracted_for_cba": false}, {"provider_id": 20364533, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #01093", "practiceaddress1": "2521 MAIN ST", "practiceaddress2": null, "practicecity": "VANCOUVER", "practicestate": "WA", "practicezip9code": 986602649, "telephonenumber": 3606932524, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.64019, "longitude": -122.67125, "is_contracted_for_cba": false}, {"provider_id": 20306189, "acceptsassignement": false, "participationbegindate": 1684195200000, "businessname": "MISSISSIPPI METHODIST HOSPITAL & REHABILITATION CENTER, INC.", "practicename": "METHODIST ORTHOTICS & PROSTHETICS", "practiceaddress1": "1 LAYFAIR DR", "practiceaddress2": "STE 300", "practicecity": "FLOWOOD", "practicestate": "MS", "practicezip9code": 392329717, "telephonenumber": 6019368899, "specialitieslist": "MSC With Orthotic Personnel|MSC With Prosthetic Personnel|MSC With Orthotic-Prosthetic", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 32.32602, "longitude": -90.10837, "is_contracted_for_cba": false}, {"provider_id": 20329649, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04905", "practiceaddress1": "240 HIGHWAY 31 SW", "practiceaddress2": "STE 11", "practicecity": "HARTSELLE", "practicestate": "AL", "practicezip9code": 356402803, "telephonenumber": 2567731768, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.41052, "longitude": -86.92045, "is_contracted_for_cba": false}, {"provider_id": 20330393, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04906", "practiceaddress1": "4240 NARROW LANE RD", "practiceaddress2": null, "practicecity": "MONTGOMERY", "practicestate": "AL", "practicezip9code": 361112650, "telephonenumber": 3342843297, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.32796, "longitude": -86.28223, "is_contracted_for_cba": false}, {"provider_id": 20563463, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK N SAVE PHARMACY #53400405", "practiceaddress1": "205 CENTRAL BRIDGE ST", "practiceaddress2": null, "practicecity": "WAUSAU", "practicestate": "WI", "practicezip9code": 544012947, "telephonenumber": 4142317345, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.96954, "longitude": -89.63503, "is_contracted_for_cba": false}, {"provider_id": 20563433, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANO'S PHARMACY #8536", "practiceaddress1": "150 W 63RD ST", "practiceaddress2": null, "practicecity": "WESTMONT", "practicestate": "IL", "practicezip9code": 605592614, "telephonenumber": 6309644654, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.77367, "longitude": -87.97891, "is_contracted_for_cba": false}, {"provider_id": 20563505, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANO'S PHARMACY #8535", "practiceaddress1": "9504 W 142ND ST", "practiceaddress2": null, "practicecity": "ORLAND PARK", "practicestate": "IL", "practicezip9code": 604624266, "telephonenumber": 7082260027, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.61532, "longitude": -87.81115, "is_contracted_for_cba": false}, {"provider_id": 23282485, "acceptsassignement": true, "participationbegindate": 1719532800000, "businessname": "GUARDIAN MEDICAL SUPPLIES, INC.", "practicename": "GUARDIAN MEDICAL SUPPLIES, INC", "practiceaddress1": "8408 SIX FORKS RD", "practiceaddress2": "STE 102B", "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276153077, "telephonenumber": 9192290883, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings", "latitude": 35.8950597122, "longitude": -78.646783856, "is_contracted_for_cba": false}, {"provider_id": 20320817, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17818", "practiceaddress1": "8701 SIX FORKS RD", "practiceaddress2": null, "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276152968, "telephonenumber": 9193343706, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.89911, "longitude": -78.65144, "is_contracted_for_cba": false}, {"provider_id": 20320019, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01733", "practiceaddress1": "6360 HOADLY RD", "practiceaddress2": null, "practicecity": "MANASSAS", "practicestate": "VA", "practicezip9code": 201123422, "telephonenumber": 7038974961, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.67333, "longitude": -77.39132, "is_contracted_for_cba": false}, {"provider_id": 20564045, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK N SAVE PHARMACY #6430", "practiceaddress1": "1629S MAIN ST", "practiceaddress2": null, "practicecity": "WEST BEND", "practicestate": "WI", "practicezip9code": 530954935, "telephonenumber": 2623352292, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.40071, "longitude": -88.18094, "is_contracted_for_cba": false}, {"provider_id": 20563751, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK 'N SAVE PHARMACY #6879", "practiceaddress1": "2355 N 35TH ST", "practiceaddress2": null, "practicecity": "MILWAUKEE", "practicestate": "WI", "practicezip9code": 532103033, "telephonenumber": 4144478117, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.06185, "longitude": -87.95762, "is_contracted_for_cba": false}, {"provider_id": 20336855, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #04634", "practiceaddress1": "111 LAKEVIEW DR", "practiceaddress2": null, "practicecity": "NOBLESVILLE", "practicestate": "IN", "practicezip9code": 460601308, "telephonenumber": 3177738100, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.04754, "longitude": -86.02421, "is_contracted_for_cba": false}, {"provider_id": 20337773, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 06494", "practiceaddress1": "700 N WAYNE ST", "practiceaddress2": null, "practicecity": "ANGOLA", "practicestate": "IN", "practicezip9code": 467031006, "telephonenumber": 2606652106, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.6431, "longitude": -84.99934, "is_contracted_for_cba": false}, {"provider_id": 20340209, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #04468", "practiceaddress1": "7935 S EMERSON AVE", "practiceaddress2": "STE B", "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462378607, "telephonenumber": 3178657593, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.65181, "longitude": -86.08263, "is_contracted_for_cba": false}, {"provider_id": 20396741, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "909 HASTY SCHOOL RD", "practiceaddress2": null, "practicecity": "THOMASVILLE", "practicestate": "NC", "practicezip9code": 273608620, "telephonenumber": 3368874927, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.91855, "longitude": -80.05892, "is_contracted_for_cba": false}, {"provider_id": 20397485, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "COMMUNITY A WALGREEN PHARMACY 16522", "practiceaddress1": "360 SHERMAN ST", "practiceaddress2": "STE 100", "practicecity": "SAINT PAUL", "practicestate": "MN", "practicezip9code": 551022425, "telephonenumber": 6514680604, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.94224, "longitude": -93.10694, "is_contracted_for_cba": false}, {"provider_id": 20397473, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "709 N GREEN BAY RD", "practiceaddress2": null, "practicecity": "WAUKEGAN", "practicestate": "IL", "practicezip9code": 600852235, "telephonenumber": 8476628091, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.37113, "longitude": -87.88184, "is_contracted_for_cba": false}, {"provider_id": 20397467, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16550", "practiceaddress1": "836 PRUDENTIAL DR", "practiceaddress2": "STE 120", "practicecity": "JACKSONVILLE", "practicestate": "FL", "practicezip9code": 322078334, "telephonenumber": 9042025288, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.3162, "longitude": -81.66401, "is_contracted_for_cba": false}, {"provider_id": 20320067, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08938", "practiceaddress1": "1701 INDEPENDENCE BLVD", "practiceaddress2": null, "practicecity": "VIRGINIA BEACH", "practicestate": "VA", "practicezip9code": 234554042, "telephonenumber": 7574602607, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.89431, "longitude": -76.14293, "is_contracted_for_cba": false}, {"provider_id": 20320031, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06852", "practiceaddress1": "16712 JEFFERSON DAVIS HWY", "practiceaddress2": null, "practicecity": "DUMFRIES", "practicestate": "VA", "practicezip9code": 22026, "telephonenumber": 7032217467, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.58798, "longitude": -77.306, "is_contracted_for_cba": false}, {"provider_id": 20320565, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07523", "practiceaddress1": "1040 ALAMANCE CHURCH ROAD", "practiceaddress2": null, "practicecity": "GREENSBORO", "practicestate": "NC", "practicezip9code": 274063808, "telephonenumber": 3362724121, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.04132, "longitude": -79.77069, "is_contracted_for_cba": false}, {"provider_id": 20334695, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04162", "practiceaddress1": "2556 CONSTITUTION BLVD", "practiceaddress2": null, "practicecity": "BEAVER FALLS", "practicestate": "PA", "practicezip9code": 150101249, "telephonenumber": 7248470675, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.77449, "longitude": -80.37703, "is_contracted_for_cba": false}, {"provider_id": 20329187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01624", "practiceaddress1": "5001 JONESTOWN RD", "practiceaddress2": null, "practicecity": "HARRISBURG", "practicestate": "PA", "practicezip9code": 171122922, "telephonenumber": 7175454229, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.30775, "longitude": -76.80431, "is_contracted_for_cba": false}, {"provider_id": 20331077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHAMACY 01774", "practiceaddress1": "100 PROVIDENCE MAIN ST NW", "practiceaddress2": "STE G", "practicecity": "HUNTSVILLE", "practicestate": "AL", "practicezip9code": 358064827, "telephonenumber": 2568372057, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.74893, "longitude": -86.69338, "is_contracted_for_cba": false}, {"provider_id": 20331335, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #16027", "practiceaddress1": "13201 RIDGEDALE DR", "practiceaddress2": null, "practicecity": "MINNETONKA", "practicestate": "MN", "practicezip9code": 553051809, "telephonenumber": 9525428266, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 44.97048, "longitude": -93.4456, "is_contracted_for_cba": false}, {"provider_id": 20395829, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4266", "practiceaddress1": "2150 W ORANGE GROVE RD", "practiceaddress2": null, "practicecity": "TUCSON", "practicestate": "AZ", "practicezip9code": 857413119, "telephonenumber": 5205449480, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.32323, "longitude": -111.01336, "is_contracted_for_cba": false}, {"provider_id": 20306249, "acceptsassignement": true, "participationbegindate": 1683676800000, "businessname": "5 STARS DME LLC", "practicename": "5 STARS DME LLC", "practiceaddress1": "501 MARINA", "practiceaddress2": "1A", "practicecity": "LAREDO", "practicestate": "TX", "practicezip9code": 780464065, "telephonenumber": 9567013509, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27.4361, "longitude": -99.48043, "is_contracted_for_cba": false}, {"provider_id": 20329229, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04144", "practiceaddress1": "3075 W LIBERTY AVE", "practiceaddress2": null, "practicecity": "PITTSBURGH", "practicestate": "PA", "practicezip9code": 152162460, "telephonenumber": 4123412269, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.39226, "longitude": -80.03766, "is_contracted_for_cba": false}, {"provider_id": 20306309, "acceptsassignement": true, "participationbegindate": 1683504000000, "businessname": "SANFORD HEALTH OF NORTHERN MINNESOTA", "practicename": "SANFORD BEMIDJI INFUSION PHARMACY", "practiceaddress1": "1233 34TH ST NW", "practiceaddress2": "STE B", "practicecity": "BEMIDJI", "practicestate": "MN", "practicezip9code": 566015112, "telephonenumber": 2183334770, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies", "latitude": 47.5015, "longitude": -94.90041, "is_contracted_for_cba": false}, {"provider_id": 20306393, "acceptsassignement": true, "participationbegindate": 1682899200000, "businessname": "DME EXPERT CARE LLC", "practicename": "DME EXPERT CARE LLC", "practiceaddress1": "1600 PROVIDENCE HWY", "practiceaddress2": "UNIT 222", "practicecity": "WALPOLE", "practicestate": "MA", "practicezip9code": 20812553, "telephonenumber": 8882029361, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42.12338, "longitude": -71.23223, "is_contracted_for_cba": false}, {"provider_id": 20564141, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK N SAVE PHARMACY #6397", "practiceaddress1": "15170 W GREENFIELD AVE", "practiceaddress2": null, "practicecity": "BROOKFIELD", "practicestate": "WI", "practicezip9code": 530057018, "telephonenumber": 2627822787, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.01689, "longitude": -88.10345, "is_contracted_for_cba": false}, {"provider_id": 20563631, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK 'N SAVE PHARMACY #6418", "practiceaddress1": "7401 W GOOD HOPE RD", "practiceaddress2": null, "practicecity": "MILWAUKEE", "practicestate": "WI", "practicezip9code": 532234618, "telephonenumber": 4147603273, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.14855, "longitude": -87.99869, "is_contracted_for_cba": false}, {"provider_id": 20564111, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "ROUNDYS SUPERMARKETS INC", "practiceaddress1": "1819 MAIN ST", "practiceaddress2": null, "practicecity": "GREEN BAY", "practicestate": "WI", "practicezip9code": 543023918, "telephonenumber": 9204693436, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.49453, "longitude": -87.97757, "is_contracted_for_cba": false}, {"provider_id": 20340167, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #02734", "practiceaddress1": "1299 W SOUTHPORT RD", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462174174, "telephonenumber": 3178595881, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.6626, "longitude": -86.18267, "is_contracted_for_cba": false}, {"provider_id": 20321171, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04441", "practiceaddress1": "1119 EASTCHESTER DR", "practiceaddress2": null, "practicecity": "HIGH POINT", "practicestate": "NC", "practicezip9code": 272653113, "telephonenumber": 3368811040, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.99225, "longitude": -79.99907, "is_contracted_for_cba": false}, {"provider_id": 20563343, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK N SAVE PHARMACY #6847", "practiceaddress1": "6760 W NATIONAL AVE", "practiceaddress2": null, "practicecity": "WEST ALLIS", "practicestate": "WI", "practicezip9code": 532144965, "telephonenumber": 4144765111, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.01394, "longitude": -87.9973, "is_contracted_for_cba": false}, {"provider_id": 23281003, "acceptsassignement": true, "participationbegindate": 1702598400000, "businessname": "BONITA MEDICAL SUPPLY INC", "practicename": "BONITA MEDICAL SUPPLY, INC.", "practiceaddress1": "4045 BONITA RD", "practiceaddress2": "STE 310", "practicecity": "BONITA", "practicestate": "CA", "practicezip9code": 919021347, "telephonenumber": 6195394725, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "latitude": 32.6586401781, "longitude": -117.0398362873, "is_contracted_for_cba": false}, {"provider_id": 23281015, "acceptsassignement": true, "participationbegindate": 1702512000000, "businessname": "DIABETIC MEDICS LLC", "practicename": "DIABETIC MEDICS", "practiceaddress1": "26039 205TH ST", "practiceaddress2": null, "practicecity": "DALLAS CENTER", "practicestate": "IA", "practicezip9code": 500638254, "telephonenumber": 5158507807, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies", "latitude": 41.7395310065, "longitude": -93.9681599727, "is_contracted_for_cba": false}, {"provider_id": 20316569, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02979", "practiceaddress1": "6120 E MOCKINGBIRD LN", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752142601, "telephonenumber": 2148876955, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.83634, "longitude": -96.76047, "is_contracted_for_cba": false}, {"provider_id": 20306369, "acceptsassignement": true, "participationbegindate": 1682899200000, "businessname": "DR RICHARD BARBER PLLC", "practicename": "BONA FIDE MEDICAL WOUND AND WELLNES", "practiceaddress1": "4455 S PADRE ISLAND DR", "practiceaddress2": "STE 13", "practicecity": "CORPUS CHRISTI", "practicestate": "TX", "practicezip9code": 784115161, "telephonenumber": 3612482663, "specialitieslist": null, "providertypelist": "PHYSICIAN ASSISTANT|NURSE PRACTITIONER|PHYSICIAN \u2013 ORTHOPEDIC/ORTHOPEDIC SURGERY|MULTI-SPECIALTY - PHYSICIAN", "supplieslist": "Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 27.71739, "longitude": -97.39067, "is_contracted_for_cba": false}, {"provider_id": 20306417, "acceptsassignement": true, "participationbegindate": 1682640000000, "businessname": "MASPETH DRUGS INC", "practicename": "MASPETH DRUGS INC", "practiceaddress1": "7111 GRAND AVE", "practiceaddress2": null, "practicecity": "MASPETH", "practicestate": "NY", "practicezip9code": 113781822, "telephonenumber": 7182556700, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.72832, "longitude": -73.89177, "is_contracted_for_cba": false}, {"provider_id": 20317649, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06292", "practiceaddress1": "7515 WILLIAMSON RD", "practiceaddress2": null, "practicecity": "ROANOKE", "practicestate": "VA", "practicezip9code": 240194301, "telephonenumber": 5405631010, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.34796, "longitude": -79.94976, "is_contracted_for_cba": false}, {"provider_id": 20317523, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06283", "practiceaddress1": "817 W MAIN ST", "practiceaddress2": null, "practicecity": "DANVILLE", "practicestate": "VA", "practicezip9code": 245414204, "telephonenumber": 4347930231, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.56997, "longitude": -79.42322, "is_contracted_for_cba": false}, {"provider_id": 20328485, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05709", "practiceaddress1": "405 W DUBOIS AVE", "practiceaddress2": null, "practicecity": "DUBOIS", "practicestate": "PA", "practicezip9code": 158012712, "telephonenumber": 8143719480, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.12901, "longitude": -78.76326, "is_contracted_for_cba": false}, {"provider_id": 20333603, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08160", "practiceaddress1": "23800 WEST RD", "practiceaddress2": null, "practicecity": "BROWNSTOWN TWP", "practicestate": "MI", "practicezip9code": 481833179, "telephonenumber": 7346924230, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.13819, "longitude": -83.26504, "is_contracted_for_cba": false}, {"provider_id": 20400065, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3782", "practiceaddress1": "5701 NW 183RD ST", "practiceaddress2": null, "practicecity": "HIALEAH", "practicestate": "FL", "practicezip9code": 330156022, "telephonenumber": 3056250952, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.9394, "longitude": -80.29586, "is_contracted_for_cba": false}, {"provider_id": 23281021, "acceptsassignement": true, "participationbegindate": 1702512000000, "businessname": "TRUE HEALTHCARE SERVICES LLC", "practicename": "TRUE HEALTHCARE SERVICES, LLC", "practiceaddress1": "5812 W PICO BLVD", "practiceaddress2": "STE B", "practicecity": "LOS ANGELES", "practicestate": "CA", "practicezip9code": 900193713, "telephonenumber": 3233302600, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 34.0508980183, "longitude": -118.3651529804, "is_contracted_for_cba": false}, {"provider_id": 23281039, "acceptsassignement": false, "participationbegindate": 1702425600000, "businessname": "SUZY HAJJAR", "practicename": "MEDIBELLA MEDICAL SUPPLY", "practiceaddress1": "14401 GILMORE ST", "practiceaddress2": "STE 203", "practicecity": "VAN NUYS", "practicestate": "CA", "practicezip9code": 914016269, "telephonenumber": 8188793260, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Surgical Dressings", "latitude": 34.1878480065, "longitude": -118.4467249915, "is_contracted_for_cba": false}, {"provider_id": 20307725, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "SCOTT SABOLICH OTTOBOCK CARE", "practiceaddress1": "15900 PRESTON RD", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752483551, "telephonenumber": 2143829270, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses", "latitude": 32.96551, "longitude": -96.80454, "is_contracted_for_cba": false}, {"provider_id": 20317805, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01534", "practiceaddress1": "1301 EAST NINE MILE RD", "practiceaddress2": null, "practicecity": "HIGHLAND SPRINGS", "practicestate": "VA", "practicezip9code": 230752305, "telephonenumber": 8047376493, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.53604, "longitude": -77.31858, "is_contracted_for_cba": false}, {"provider_id": 20339909, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06550", "practiceaddress1": "1700 E MAIN ST", "practiceaddress2": null, "practicecity": "PLAINFIELD", "practicestate": "IN", "practicezip9code": 461681849, "telephonenumber": 3178396822, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.71035, "longitude": -86.37779, "is_contracted_for_cba": false}, {"provider_id": 20340077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "HOOK-SUPERX LLC", "practiceaddress1": "100 N ANDERSON ST", "practiceaddress2": null, "practicecity": "ELWOOD", "practicestate": "IN", "practicezip9code": 460361541, "telephonenumber": 7655529565, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.27817, "longitude": -85.84198, "is_contracted_for_cba": false}, {"provider_id": 20339795, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06698", "practiceaddress1": "2650 S WALNUT ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IN", "practicezip9code": 474017302, "telephonenumber": 8123366223, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.13526, "longitude": -86.53138, "is_contracted_for_cba": false}, {"provider_id": 20399747, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04645", "practiceaddress1": "1534 CAPE CORAL PKWY W", "practiceaddress2": null, "practicecity": "CAPE CORAL", "practicestate": "FL", "practicezip9code": 339146953, "telephonenumber": 2395412035, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.56256, "longitude": -82.00587, "is_contracted_for_cba": false}, {"provider_id": 20399735, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "11101 US HIGHWAY 441", "practiceaddress2": "WALGREENS #4648", "practicecity": "TAVARES", "practicestate": "FL", "practicezip9code": 327784647, "telephonenumber": 3527421700, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.81671, "longitude": -81.76455, "is_contracted_for_cba": false}, {"provider_id": 20392499, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4608", "practiceaddress1": "1045 S GRATIOT AVE", "practiceaddress2": null, "practicecity": "CLINTON TOWNSHIP", "practicestate": "MI", "practicezip9code": 480363501, "telephonenumber": 5869544905, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.58369, "longitude": -82.88446, "is_contracted_for_cba": false}, {"provider_id": 20392505, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4688", "practiceaddress1": "14928 14TH AVE", "practiceaddress2": null, "practicecity": "WHITESTONE", "practicestate": "NY", "practicezip9code": 113571730, "telephonenumber": 7187469862, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.78848, "longitude": -73.81416, "is_contracted_for_cba": false}, {"provider_id": 20392547, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5426", "practiceaddress1": "1815 ROCHESTER RD", "practiceaddress2": null, "practicecity": "ROYAL OAK", "practicestate": "MI", "practicezip9code": 480734136, "telephonenumber": 2485466572, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.50497, "longitude": -83.14309, "is_contracted_for_cba": false}, {"provider_id": 20400233, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4378", "practiceaddress1": "925 BARTON BLVD", "practiceaddress2": null, "practicecity": "ROCKLEDGE", "practicestate": "FL", "practicezip9code": 329553129, "telephonenumber": 3216382482, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.33065, "longitude": -80.74178, "is_contracted_for_cba": false}, {"provider_id": 20359433, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #05621", "practiceaddress1": "6011 RANGEWOOD DR", "practiceaddress2": null, "practicecity": "COLORADO SPRINGS", "practicestate": "CO", "practicezip9code": 809187301, "telephonenumber": 7195937119, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.92074, "longitude": -104.7393, "is_contracted_for_cba": false}, {"provider_id": 20306477, "acceptsassignement": true, "participationbegindate": 1682380800000, "businessname": "CENTERPOINT MEDICAL LLC", "practicename": "CENTERPOINT MEDICAL LLC", "practiceaddress1": "5071 N RAINBOW BLVD", "practiceaddress2": "STE 190", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891301606, "telephonenumber": 7024441255, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies", "latitude": 36.28219, "longitude": -115.26889, "is_contracted_for_cba": false}, {"provider_id": 20306483, "acceptsassignement": true, "participationbegindate": 1682294400000, "businessname": "UNIVERSITY PHYSICIAN GROUP", "practicename": "UNIVERSITY PHYSICIAN GROUP", "practiceaddress1": "26400 W 12 MILE RD", "practiceaddress2": "STE 60", "practicecity": "SOUTHFIELD", "practicestate": "MI", "practicezip9code": 480341774, "telephonenumber": 2485946702, "specialitieslist": "Optometrist", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 42.50068, "longitude": -83.30695, "is_contracted_for_cba": false}, {"provider_id": 23282851, "acceptsassignement": true, "participationbegindate": 1682208000000, "businessname": "UNITED RX OF PENNSYLVANIA LLC", "practicename": "UNITED RX OF PENNSYLVANIA LLC", "practiceaddress1": "44 PRIMOS INDEPENDENCE CT", "practiceaddress2": "BAYS 15-17", "practicecity": "FOLCROFT", "practicestate": "PA", "practicezip9code": 190322111, "telephonenumber": 2158444500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.8937725011, "longitude": -75.2744727678, "is_contracted_for_cba": false}, {"provider_id": 20306513, "acceptsassignement": false, "participationbegindate": 1681776000000, "businessname": "MOUNTAIN PEAK ASSOCIATES LLC", "practicename": "YOU CAN HOME MEDICAL", "practiceaddress1": "4875 E EVANS AVE", "practiceaddress2": null, "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 802225213, "telephonenumber": 3033767449, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Lymphedema Compression Treatment Items", "latitude": 39.67855, "longitude": -104.93097, "is_contracted_for_cba": false}, {"provider_id": 34356758, "acceptsassignement": false, "participationbegindate": 1681689600000, "businessname": "STERLING COMMUNITY PHARMACY", "practicename": "STERLING COMMUNITY PHARMACY", "practiceaddress1": "129 W KEMPER RD", "practiceaddress2": null, "practicecity": "SPRINGDALE", "practicestate": "OH", "practicezip9code": 452462511, "telephonenumber": 5138103299, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.2876415297, "longitude": -84.4722645138, "is_contracted_for_cba": false}, {"provider_id": 20323565, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 10152", "practiceaddress1": "1501E OHIO ST", "practiceaddress2": null, "practicecity": "CLINTON", "practicestate": "MO", "practicezip9code": 647352432, "telephonenumber": 6608900707, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.36632, "longitude": -93.75153, "is_contracted_for_cba": false}, {"provider_id": 20323967, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY# 10053", "practiceaddress1": "400 MID RIVERS MALL DR", "practiceaddress2": null, "practicecity": "SAINT PETERS", "practicestate": "MO", "practicezip9code": 633761577, "telephonenumber": 6362791516, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.78998, "longitude": -90.62557, "is_contracted_for_cba": false}, {"provider_id": 20318027, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01372", "practiceaddress1": "6404 WILLIAMSBURG BLVD", "practiceaddress2": null, "practicecity": "ARLINGTON", "practicestate": "VA", "practicezip9code": 222071153, "telephonenumber": 7035386968, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.90025, "longitude": -77.15639, "is_contracted_for_cba": false}, {"provider_id": 20317691, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "VIRGINIA CVS PHARMACY LLC", "practiceaddress1": "2823 W MAIN ST", "practiceaddress2": "CVS PHARMACY # 00074", "practicecity": "WAYNESBORO", "practicestate": "VA", "practicezip9code": 229801619, "telephonenumber": 5409498871, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.08209, "longitude": -78.9285, "is_contracted_for_cba": false}, {"provider_id": 20318063, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01375", "practiceaddress1": "5017 COLUMBIA PIKE", "practiceaddress2": null, "practicecity": "ARLINGTON", "practicestate": "VA", "practicezip9code": 222042906, "telephonenumber": 7036712331, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.85574, "longitude": -77.11284, "is_contracted_for_cba": false}, {"provider_id": 20334809, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04008", "practiceaddress1": "242-250 FIFTH AVE", "practiceaddress2": "# 250", "practicecity": "PITTSBURGH", "practicestate": "PA", "practicezip9code": 152222712, "telephonenumber": 4125662619, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.44077, "longitude": -80.00075, "is_contracted_for_cba": false}, {"provider_id": 20314373, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16025", "practiceaddress1": "8601 RESEARCH BLVD", "practiceaddress2": null, "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787587121, "telephonenumber": 5126520483, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.36378, "longitude": -97.71731, "is_contracted_for_cba": false}, {"provider_id": 20392445, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5884", "practiceaddress1": "9527 S 27TH ST", "practiceaddress2": null, "practicecity": "FRANKLIN", "practicestate": "WI", "practicezip9code": 531329533, "telephonenumber": 4143041239, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.87199, "longitude": -87.95213, "is_contracted_for_cba": false}, {"provider_id": 20392421, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5828", "practiceaddress1": "1420 W STONE DR", "practiceaddress2": null, "practicecity": "KINGSPORT", "practicestate": "TN", "practicezip9code": 376602522, "telephonenumber": 4232463551, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.55836, "longitude": -82.57571, "is_contracted_for_cba": false}, {"provider_id": 20392757, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "111 S HALSTED ST", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606613507, "telephonenumber": 3124639142, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.87989, "longitude": -87.64718, "is_contracted_for_cba": false}, {"provider_id": 20359451, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06006", "practiceaddress1": "9525 E 21ST ST N", "practiceaddress2": null, "practicecity": "WICHITA", "practicestate": "KS", "practicezip9code": 672062946, "telephonenumber": 3166311401, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.72294, "longitude": -97.22679, "is_contracted_for_cba": false}, {"provider_id": 20372237, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7915", "practiceaddress1": "3580 ROUTE 66", "practiceaddress2": null, "practicecity": "NEPTUNE", "practicestate": "NJ", "practicezip9code": 77532603, "telephonenumber": 7329226379, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.22293, "longitude": -74.08524, "is_contracted_for_cba": false}, {"provider_id": 20322413, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #18026", "practiceaddress1": "48 PLAZA 94", "practiceaddress2": null, "practicecity": "SAINT PETERS", "practicestate": "MO", "practicezip9code": 633767405, "telephonenumber": 6369281625, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.74899, "longitude": -90.59219, "is_contracted_for_cba": false}, {"provider_id": 20340701, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06479", "practiceaddress1": "1703 CARROLL RD", "practiceaddress2": null, "practicecity": "FORT WAYNE", "practicestate": "IN", "practicezip9code": 468459372, "telephonenumber": 2603380834, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.19195, "longitude": -85.16544, "is_contracted_for_cba": false}, {"provider_id": 20340713, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #01078", "practiceaddress1": "14835 SUNNY DELL LN", "practiceaddress2": null, "practicecity": "NOBLESVILLE", "practicestate": "IN", "practicezip9code": 460626984, "telephonenumber": 3175691392, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.00314, "longitude": -86.06953, "is_contracted_for_cba": false}, {"provider_id": 20345477, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09234", "practiceaddress1": "46445 MISSION BLVD", "practiceaddress2": null, "practicecity": "FREMONT", "practicestate": "CA", "practicezip9code": 945397909, "telephonenumber": 5106562467, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.49171, "longitude": -121.92741, "is_contracted_for_cba": false}, {"provider_id": 20341733, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09554", "practiceaddress1": "77 BOVET RD", "practiceaddress2": null, "practicecity": "SAN MATEO", "practicestate": "CA", "practicezip9code": 944023104, "telephonenumber": 6503496303, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.55123, "longitude": -122.31445, "is_contracted_for_cba": false}, {"provider_id": 20317973, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 01547", "practiceaddress1": "6400 CENTRALIA RD", "practiceaddress2": null, "practicecity": "CHESTERFIELD", "practicestate": "VA", "practicezip9code": 238326523, "telephonenumber": 8047969084, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.37375, "longitude": -77.5006, "is_contracted_for_cba": false}, {"provider_id": 20319557, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01989", "practiceaddress1": "5001 FOREST HILL AVE", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232253147, "telephonenumber": 8042323333, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.52207, "longitude": -77.48996, "is_contracted_for_cba": false}, {"provider_id": 20317775, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01975", "practiceaddress1": "7023 THREE CHOPT RD", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232263606, "telephonenumber": 8042854449, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.59023, "longitude": -77.53188, "is_contracted_for_cba": false}, {"provider_id": 20319545, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05790", "practiceaddress1": "11271 NUCKOLS RD", "practiceaddress2": null, "practicecity": "GLEN ALLEN", "practicestate": "VA", "practicezip9code": 230595502, "telephonenumber": 8043178881, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.68007, "longitude": -77.58794, "is_contracted_for_cba": false}, {"provider_id": 20354963, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10149", "practiceaddress1": "13741 E 116TH ST", "practiceaddress2": null, "practicecity": "FISHERS", "practicestate": "IN", "practicezip9code": 460377604, "telephonenumber": 3175958764, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.95766, "longitude": -85.91957, "is_contracted_for_cba": false}, {"provider_id": 20372291, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7918", "practiceaddress1": "5 PATRICIA AVE", "practiceaddress2": null, "practicecity": "DUNEDIN", "practicestate": "FL", "practicezip9code": 346988102, "telephonenumber": 7277345354, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.99902, "longitude": -82.77543, "is_contracted_for_cba": false}, {"provider_id": 20371919, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10157", "practiceaddress1": "150 GRANT AVE", "practiceaddress2": null, "practicecity": "AUBURN", "practicestate": "NY", "practicezip9code": 130211502, "telephonenumber": 3157040293, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.94676, "longitude": -76.54894, "is_contracted_for_cba": false}, {"provider_id": 20314283, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16687", "practiceaddress1": "529 LINCOLN ST", "practiceaddress2": null, "practicecity": "WORCESTER", "practicestate": "MA", "practicezip9code": 16051905, "telephonenumber": 5088525790, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.294, "longitude": -71.77582, "is_contracted_for_cba": false}, {"provider_id": 20320139, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 16835", "practiceaddress1": "594 RIVER HWY", "practiceaddress2": null, "practicecity": "MOORESVILLE", "practicestate": "NC", "practicezip9code": 281176829, "telephonenumber": 7047991477, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.59527, "longitude": -80.86965, "is_contracted_for_cba": false}, {"provider_id": 20319551, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01988", "practiceaddress1": "3514 W CARY ST", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232212729, "telephonenumber": 8043558533, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.55574, "longitude": -77.4877, "is_contracted_for_cba": false}, {"provider_id": 20324345, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16868", "practiceaddress1": "1106 E NORTH AVE", "practiceaddress2": null, "practicecity": "BELTON", "practicestate": "MO", "practicezip9code": 640125104, "telephonenumber": 8163314325, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.81428, "longitude": -94.52432, "is_contracted_for_cba": false}, {"provider_id": 20311631, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16159", "practiceaddress1": "2000 CRATER LAKE HWY", "practiceaddress2": null, "practicecity": "MEDFORD", "practicestate": "OR", "practicezip9code": 975044161, "telephonenumber": 5417795110, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.34723, "longitude": -122.87611, "is_contracted_for_cba": false}, {"provider_id": 20371673, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02156", "practiceaddress1": "2551 W MAIN ST", "practiceaddress2": null, "practicecity": "ALHAMBRA", "practicestate": "CA", "practicezip9code": 918011652, "telephonenumber": 6262811637, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.09529, "longitude": -118.15168, "is_contracted_for_cba": false}, {"provider_id": 20355401, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9780", "practiceaddress1": "15480 MAIN ST", "practiceaddress2": null, "practicecity": "HESPERIA", "practicestate": "CA", "practicezip9code": 923453318, "telephonenumber": 7609472283, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.42553, "longitude": -117.32597, "is_contracted_for_cba": false}, {"provider_id": 20363723, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6888", "practiceaddress1": "5027 YOUNGSTOWN WARREN RD", "practiceaddress2": null, "practicecity": "NILES", "practicestate": "OH", "practicezip9code": 444464905, "telephonenumber": 3305543462, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.21366, "longitude": -80.7613, "is_contracted_for_cba": false}, {"provider_id": 20312495, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16744", "practiceaddress1": "4575 W 11TH AVE", "practiceaddress2": null, "practicecity": "EUGENE", "practicestate": "OR", "practicezip9code": 974025442, "telephonenumber": 5416844589, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44.0482, "longitude": -123.17187, "is_contracted_for_cba": false}, {"provider_id": 20319857, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 16834", "practiceaddress1": "12000 RETAIL DR", "practiceaddress2": null, "practicecity": "WAKE FOREST", "practicestate": "NC", "practicezip9code": 275877353, "telephonenumber": 9197611002, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.97648, "longitude": -78.54331, "is_contracted_for_cba": false}, {"provider_id": 20317529, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01976", "practiceaddress1": "5100 S LABURNUM AVE", "practiceaddress2": null, "practicecity": "RICHMOND", "practicestate": "VA", "practicezip9code": 232314410, "telephonenumber": 8042227827, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.51565, "longitude": -77.34948, "is_contracted_for_cba": false}, {"provider_id": 20355041, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9085", "practiceaddress1": "1490 N ROCHESTER RD", "practiceaddress2": null, "practicecity": "ROCHESTER HILLS", "practicestate": "MI", "practicezip9code": 483071188, "telephonenumber": 2486011584, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.69514, "longitude": -83.13343, "is_contracted_for_cba": false}, {"provider_id": 20326277, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARIZONA CVS STORES LLC", "practicename": "CVS PHARMACY #09231", "practiceaddress1": "3506 E ROUTE 66", "practiceaddress2": null, "practicecity": "FLAGSTAFF", "practicestate": "AZ", "practicezip9code": 860044033, "telephonenumber": 9285266505, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.21543, "longitude": -111.59626, "is_contracted_for_cba": false}, {"provider_id": 20365061, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6843", "practiceaddress1": "2281 E SOUTH BLVD", "practiceaddress2": null, "practicecity": "MONTGOMERY", "practicestate": "AL", "practicezip9code": 361162488, "telephonenumber": 3342866678, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.32932, "longitude": -86.26779, "is_contracted_for_cba": false}, {"provider_id": 20364305, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06258", "practiceaddress1": "11607 98TH AVE NE", "practiceaddress2": null, "practicecity": "KIRKLAND", "practicestate": "WA", "practicezip9code": 980344216, "telephonenumber": 4258258841, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 47.70446, "longitude": -122.21028, "is_contracted_for_cba": false}, {"provider_id": 20364275, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7018", "practiceaddress1": "6838 N 7TH ST", "practiceaddress2": null, "practicecity": "PHOENIX", "practicestate": "AZ", "practicezip9code": 850141014, "telephonenumber": 6022746209, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.53765, "longitude": -112.06516, "is_contracted_for_cba": false}, {"provider_id": 20364299, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6963", "practiceaddress1": "106 MEMORIAL DR", "practiceaddress2": null, "practicecity": "PARIS", "practicestate": "TN", "practicezip9code": 382425414, "telephonenumber": 7316416669, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.28313, "longitude": -88.30547, "is_contracted_for_cba": false}, {"provider_id": 20363963, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7320", "practiceaddress1": "7320 CLINTON HWY", "practiceaddress2": null, "practicecity": "POWELL", "practicestate": "TN", "practicezip9code": 378495205, "telephonenumber": 8659474232, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.0158, "longitude": -84.04519, "is_contracted_for_cba": false}, {"provider_id": 20358329, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2128", "practiceaddress1": "1845 ALTON RD", "practiceaddress2": null, "practicecity": "MIAMI BEACH", "practicestate": "FL", "practicezip9code": 331391504, "telephonenumber": 3055318868, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.79425, "longitude": -80.14125, "is_contracted_for_cba": false}, {"provider_id": 20358365, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #209", "practiceaddress1": "1028 S ELMHURST RD", "practiceaddress2": null, "practicecity": "MT PROSPECT", "practicestate": "IL", "practicezip9code": 600564240, "telephonenumber": 8474371858, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.0464, "longitude": -87.94087, "is_contracted_for_cba": false}, {"provider_id": 20358371, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "3501 INGERSOLL AVE", "practiceaddress2": null, "practicecity": "DES MOINES", "practicestate": "IA", "practicezip9code": 503123406, "telephonenumber": 5152715047, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.5864, "longitude": -93.66477, "is_contracted_for_cba": false}, {"provider_id": 20364857, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4809", "practiceaddress1": "3595 SW 22ND ST", "practiceaddress2": null, "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331453012, "telephonenumber": 3054448427, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.75006, "longitude": -80.25149, "is_contracted_for_cba": false}, {"provider_id": 20340227, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY 01658", "practiceaddress1": "1074 N STATE ROAD 267", "practiceaddress2": null, "practicecity": "AVON", "practicestate": "IN", "practicezip9code": 461238863, "telephonenumber": 3172722133, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.77797, "longitude": -86.40015, "is_contracted_for_cba": false}, {"provider_id": 20337599, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06508", "practiceaddress1": "529 W MAIN ST", "practiceaddress2": null, "practicecity": "BUTLER", "practicestate": "IN", "practicezip9code": 467211348, "telephonenumber": 2608682427, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.42968, "longitude": -84.88347, "is_contracted_for_cba": false}, {"provider_id": 20340377, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #08665", "practiceaddress1": "3910 W 3RD ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IN", "practicezip9code": 474044853, "telephonenumber": 8123394006, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.16474, "longitude": -86.58245, "is_contracted_for_cba": false}, {"provider_id": 20355473, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #1988", "practiceaddress1": "1915 WISCONSIN AVE", "practiceaddress2": null, "practicecity": "GRAFTON", "practicestate": "WI", "practicezip9code": 530242605, "telephonenumber": 2623770352, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.30793, "longitude": -87.95885, "is_contracted_for_cba": false}, {"provider_id": 20407439, "acceptsassignement": true, "participationbegindate": 1613347200000, "businessname": "FOOT COUNTRY LLC", "practicename": "FOOT COUNTRY, LLC", "practiceaddress1": "232 LEE ST N", "practiceaddress2": "STE D", "practicecity": "LEWISBURG", "practicestate": "WV", "practicezip9code": 249010300, "telephonenumber": 3045203086, "specialitieslist": "Orthotic Personnel", "providertypelist": "PHYSICIAN \u2013 GENERAL PRACTICE)", "supplieslist": "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 37.84379, "longitude": -80.45784, "is_contracted_for_cba": false}, {"provider_id": 20462165, "acceptsassignement": true, "participationbegindate": 1701907200000, "businessname": "A STEP AHEAD ORTHOTICS AND PROSTHETICS INC", "practicename": "A STEP AHEAD ORTHOTICS AND PROSTHET", "practiceaddress1": "237 DOVER RD", "practiceaddress2": null, "practicecity": "CLARKSVILLE", "practicestate": "TN", "practicezip9code": 370424155, "telephonenumber": 6153830048, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": "PEDORTHIC PERSONNEL", "supplieslist": "Contracture Treatment Devices: Dynamic Splint|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 36.55115, "longitude": -87.39526, "is_contracted_for_cba": false}, {"provider_id": 20312471, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 11392", "practiceaddress1": "1821 NE 33RD AVE", "practiceaddress2": null, "practicecity": "PORTLAND", "practicestate": "OR", "practicezip9code": 972125113, "telephonenumber": 5035356031, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.53612, "longitude": -122.63079, "is_contracted_for_cba": false}, {"provider_id": 21609111, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "OTTO BOCK PATIENT CARE LLC", "practiceaddress1": "11871 PLAZA DR", "practiceaddress2": "UNIT 6", "practicecity": "MURRELLS INLET", "practicestate": "SC", "practicezip9code": 295767450, "telephonenumber": 8436515347, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 33.5893460054, "longitude": -79.0254609748, "is_contracted_for_cba": false}, {"provider_id": 20307779, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "OTTO BOCK PATIENT CARE LLC", "practiceaddress1": "1795 PARKER RD SE", "practiceaddress2": "STE E120E130", "practicecity": "CONYERS", "practicestate": "GA", "practicezip9code": 300946659, "telephonenumber": 7702715581, "specialitieslist": null, "providertypelist": "CERTIFIED ORTH/PROS/PEDORTHIST", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 33.65228, "longitude": -84.01204, "is_contracted_for_cba": false}, {"provider_id": 20364797, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "2107 AIRLINE DR", "practiceaddress2": null, "practicecity": "BOSSIER CITY", "practicestate": "LA", "practicezip9code": 711113105, "telephonenumber": 3187425590, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.52758, "longitude": -93.70128, "is_contracted_for_cba": false}, {"provider_id": 20314673, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10910", "practiceaddress1": "3030 SYLVAN AVE", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752124025, "telephonenumber": 2147495197, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.77925, "longitude": -96.83569, "is_contracted_for_cba": false}, {"provider_id": 20319533, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02338", "practiceaddress1": "700 MERRIMAC TRL", "practiceaddress2": null, "practicecity": "WILLIAMSBURG", "practicestate": "VA", "practicezip9code": 231855351, "telephonenumber": 7572584450, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.2682, "longitude": -76.67701, "is_contracted_for_cba": false}, {"provider_id": 20321963, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07566", "practiceaddress1": "8765 HWY 52", "practiceaddress2": null, "practicecity": "ROCKWELL", "practicestate": "NC", "practicezip9code": 281388550, "telephonenumber": 7042792581, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.56193, "longitude": -80.41579, "is_contracted_for_cba": false}, {"provider_id": 20312885, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16651", "practiceaddress1": "400 COCHITUATE RD", "practiceaddress2": null, "practicecity": "FRAMINGHAM", "practicestate": "MA", "practicezip9code": 17014655, "telephonenumber": 5086289004, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.30374, "longitude": -71.40008, "is_contracted_for_cba": false}, {"provider_id": 20361107, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3398", "practiceaddress1": "5501 S KIRKMAN RD", "practiceaddress2": null, "practicecity": "ORLANDO", "practicestate": "FL", "practicezip9code": 328197915, "telephonenumber": 4072480315, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.48162, "longitude": -81.45859, "is_contracted_for_cba": false}, {"provider_id": 20407463, "acceptsassignement": false, "participationbegindate": 1613088000000, "businessname": "B7 HEALTH", "practicename": "B7 HEALTH", "practiceaddress1": "2675 E SLAUSON AVE", "practiceaddress2": "STE A", "practicecity": "HUNTINGTON PARK", "practicestate": "CA", "practicezip9code": 902552926, "telephonenumber": 3234877007, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.98931, "longitude": -118.22387, "is_contracted_for_cba": false}, {"provider_id": 20407481, "acceptsassignement": false, "participationbegindate": 1613001600000, "businessname": "REMARKABLE PROSTHETICS & ORTHOTICS INC", "practicename": "REMARKABLE PROSTHETICS & ORTHOTICS,", "practiceaddress1": "23 WEST JAMAICA AVE", "practiceaddress2": null, "practicecity": "VALLEY STREAM", "practicestate": "NY", "practicezip9code": 11580, "telephonenumber": 5162846699, "specialitieslist": "Orthotic Personnel", "providertypelist": null, "supplieslist": "Contracture Treatment Devices: Dynamic Splint|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.66182, "longitude": -73.70011, "is_contracted_for_cba": false}, {"provider_id": 24547260, "acceptsassignement": true, "participationbegindate": 1613001600000, "businessname": "HORIZON PHARMACY", "practicename": "PHARMACY WARWICK", "practiceaddress1": "2756 POST RD", "practiceaddress2": "STE 105", "practicecity": "WARWICK", "practicestate": "RI", "practicezip9code": 28863077, "telephonenumber": 4016814220, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Enteral Nutrients|Nebulizer Equipment and/or Supplies", "latitude": 41.7090090186, "longitude": -71.44976202, "is_contracted_for_cba": false}, {"provider_id": 20407493, "acceptsassignement": true, "participationbegindate": 1612915200000, "businessname": "FLORIDA HOSPITAL HOME INFUSION, LLP", "practicename": "FLORIDA HOSPITAL HOME INFUSION,LLP", "practiceaddress1": "11461 N US HIGHWAY 301", "practiceaddress2": "STE 105", "practicecity": "THONOTOSASSA", "practicestate": "FL", "practicezip9code": 335923541, "telephonenumber": 8134362900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 28.0534, "longitude": -82.33203, "is_contracted_for_cba": false}, {"provider_id": 20345183, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "PREFERRED ORTHOTIC AND PROSTHETIC SERVICES, INC", "practicename": "PREFERRED ORTHOTIC AND PROSTHETIC S", "practiceaddress1": "922 S 348TH ST", "practiceaddress2": null, "practicecity": "FEDERAL WAY", "practicestate": "WA", "practicezip9code": 980037021, "telephonenumber": 2539523887, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 47.28995, "longitude": -122.32204, "is_contracted_for_cba": false}, {"provider_id": 20344151, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO PHARMACY 320", "practiceaddress1": "1055 HUDSON ST", "practiceaddress2": null, "practicecity": "UNION", "practicestate": "NJ", "practicezip9code": 70836809, "telephonenumber": 9088101458, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.69412, "longitude": -74.29006, "is_contracted_for_cba": false}, {"provider_id": 20312297, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MAIN STREET PHARMACY, LLC", "practicename": "CVS PHARMACY #48353", "practiceaddress1": "14703 EAGLE VISTA DR", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770775394, "telephonenumber": 2812497290, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.76227, "longitude": -95.64102, "is_contracted_for_cba": false}, {"provider_id": 20308007, "acceptsassignement": true, "participationbegindate": 1673308800000, "businessname": "MELROSE AVE PHARMACY LLC", "practicename": "MELROSE AVE PHARMACY LLC", "practiceaddress1": "899 MELROSE AVE", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104514166, "telephonenumber": 9179155656, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.82467, "longitude": -73.91371, "is_contracted_for_cba": false}, {"provider_id": 20407571, "acceptsassignement": true, "participationbegindate": 1612396800000, "businessname": "R2 MEDICAL", "practicename": "R2 MEDICAL", "practiceaddress1": "2136 S RICHARDS ST", "practiceaddress2": null, "practicecity": "SALT LAKE CITY", "practicestate": "UT", "practicezip9code": 841152606, "telephonenumber": 8013088992, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf", "latitude": 40.72461, "longitude": -111.89291, "is_contracted_for_cba": false}, {"provider_id": 20360339, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2810", "practiceaddress1": "1810 FREEDOM BLVD", "practiceaddress2": null, "practicecity": "FREEDOM", "practicestate": "CA", "practicezip9code": 950193000, "telephonenumber": 8317680183, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.93418, "longitude": -121.77222, "is_contracted_for_cba": false}, {"provider_id": 20361695, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1780 N UNIVERSITY DR", "practiceaddress2": null, "practicecity": "PLANTATION", "practicestate": "FL", "practicezip9code": 333224107, "telephonenumber": 9547413010, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.1486, "longitude": -80.25624, "is_contracted_for_cba": false}, {"provider_id": 20318141, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "R&M REYES ENTERPRISE, LLC", "practicename": "R & M REYES ENTERPRISE, LLC", "practiceaddress1": "94-479 UKEE ST", "practiceaddress2": "STE 101", "practicecity": "WAIPAHU", "practicestate": "HI", "practicezip9code": 967976208, "telephonenumber": 8086767661, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Urological Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 21.42463, "longitude": -158.00235, "is_contracted_for_cba": false}, {"provider_id": 20308085, "acceptsassignement": false, "participationbegindate": 1672876800000, "businessname": "WEST MEDRX LLC", "practicename": "WEST MEDRX LLC", "practiceaddress1": "375 E CENTRAL AVE", "practiceaddress2": "STE 373B", "practicecity": "WINTER HAVEN", "practicestate": "FL", "practicezip9code": 338803047, "telephonenumber": 8334734323, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf", "latitude": 28.02232, "longitude": -81.72277, "is_contracted_for_cba": false}, {"provider_id": 20683145, "acceptsassignement": true, "participationbegindate": 1672704000000, "businessname": "SB VENTURE LLC", "practicename": "DOCTOR PHARMACY RX", "practiceaddress1": "215 S POWER RD", "practiceaddress2": "STE 251", "practicecity": "MESA", "practicestate": "AZ", "practicezip9code": 852065238, "telephonenumber": 4802562522, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Insulin Infusion Pumps and/or Supplies", "latitude": 33.411615418, "longitude": -111.6820068526, "is_contracted_for_cba": false}, {"provider_id": 20315741, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07603", "practiceaddress1": "1301 N SAGINAW BLVD", "practiceaddress2": null, "practicecity": "SAGINAW", "practicestate": "TX", "practicezip9code": 761795095, "telephonenumber": 8178476918, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.8819, "longitude": -97.38331, "is_contracted_for_cba": false}, {"provider_id": 20344211, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO PHARMACY #749", "practiceaddress1": "100 CENTERTON RD", "practiceaddress2": null, "practicecity": "MOUNT LAUREL", "practicestate": "NJ", "practicezip9code": 80546103, "telephonenumber": 8563593650, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.97176, "longitude": -74.90755, "is_contracted_for_cba": false}, {"provider_id": 20344205, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO PHARMACY #1025", "practiceaddress1": "245 STAFFORD PARK BLVD", "practiceaddress2": null, "practicecity": "STAFFORD TOWNSHIP", "practicestate": "NJ", "practicezip9code": 80502734, "telephonenumber": 6092422011, "specialitieslist": "Medical Supply Company Other|Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.71181, "longitude": -74.28327, "is_contracted_for_cba": false}, {"provider_id": 20312909, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16019", "practiceaddress1": "105 W TROUTMAN PKWY", "practiceaddress2": null, "practicecity": "FORT COLLINS", "practicestate": "CO", "practicezip9code": 805253038, "telephonenumber": 9702230840, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.52854, "longitude": -105.07835, "is_contracted_for_cba": false}, {"provider_id": 20331869, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #00211", "practiceaddress1": "18900 TELEGRAPH RD", "practiceaddress2": null, "practicecity": "BROWNSTOWN TOWNSHIP", "practicestate": "MI", "practicezip9code": 481749566, "telephonenumber": 7349412067, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.1692, "longitude": -83.26691, "is_contracted_for_cba": false}, {"provider_id": 20331809, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "EVERGREEN PROSTHETICS AND ORTHOTICS LLC", "practicename": "EVERGREEN PROSTHETICS & ORTHOTICS", "practiceaddress1": "149 NE 102ND AVE", "practiceaddress2": null, "practicecity": "PORTLAND", "practicestate": "OR", "practicezip9code": 972204168, "telephonenumber": 5032083699, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 45.52373, "longitude": -122.55836, "is_contracted_for_cba": false}, {"provider_id": 24547266, "acceptsassignement": true, "participationbegindate": 1612137600000, "businessname": "1ST AMERICA INFUSION SERVICES LLC", "practicename": "1ST AMERICA INFUSION SERVICES LLC", "practiceaddress1": "10 WARREN RD", "practiceaddress2": "STE 220", "practicecity": "COCKEYSVILLE", "practicestate": "MD", "practicezip9code": 210302531, "telephonenumber": 4433187696, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Infusion Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 39.4751109972, "longitude": -76.6399819761, "is_contracted_for_cba": false}, {"provider_id": 20407787, "acceptsassignement": true, "participationbegindate": 1612137600000, "businessname": "WALLABOUT PHARMACY INC", "practicename": "REMEDIES PHARMACY", "practiceaddress1": "711 BEDFORD AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112065428, "telephonenumber": 7188550214, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.69935, "longitude": -73.95698, "is_contracted_for_cba": false}, {"provider_id": 20345243, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06381", "practiceaddress1": "2425 N 16TH ST", "practiceaddress2": null, "practicecity": "ORANGE", "practicestate": "TX", "practicezip9code": 776302382, "telephonenumber": 4098863546, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.1133, "longitude": -93.74751, "is_contracted_for_cba": false}, {"provider_id": 26715454, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "JANNE M LYNCH DDS PLLC", "practicename": "AZ DENTIST", "practiceaddress1": "10245 E VIA LINDA", "practiceaddress2": "STE 226", "practicecity": "SCOTTSDALE", "practicestate": "AZ", "practicezip9code": 852585345, "telephonenumber": 6239791900, "specialitieslist": null, "providertypelist": "ORAL SURGERY - DENTIST|INTERVENTIONAL PAIN MANAGEMENT - PHYSICIAN", "supplieslist": "Orthoses: Prefabricated (Non-Custom Fabricated)", "latitude": 33.574171827, "longitude": -111.8605584893, "is_contracted_for_cba": false}, {"provider_id": 20318207, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "CINDERELLA'S CLOSET YOUR SPECIALTY LINGERIE BOUTIQUE", "practicename": "CINDERELLA'S CLOSET LINGERIE", "practiceaddress1": "9651 BUSINESS CENTER DR", "practiceaddress2": "STE B", "practicecity": "RANCHO CUCAMONGA", "practicestate": "CA", "practicezip9code": 917304562, "telephonenumber": 9517588827, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Breast Prostheses and/or Accessories|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 34.12146, "longitude": -117.60806, "is_contracted_for_cba": false}, {"provider_id": 26717788, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "4728 W IRVING PARK RD", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606412701, "telephonenumber": 7736280043, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.9539880343, "longitude": -87.7466076835, "is_contracted_for_cba": false}, {"provider_id": 20358071, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3459", "practiceaddress1": "2115 E HILLSBOROUGH AVE", "practiceaddress2": null, "practicecity": "TAMPA", "practicestate": "FL", "practicezip9code": 336108211, "telephonenumber": 8132373743, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.99598, "longitude": -82.43562, "is_contracted_for_cba": false}, {"provider_id": 20358065, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #1925", "practiceaddress1": "13317 N BOULEVARD", "practiceaddress2": null, "practicecity": "TAMPA", "practicestate": "FL", "practicezip9code": 336123317, "telephonenumber": 8139358524, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.06823, "longitude": -82.46764, "is_contracted_for_cba": false}, {"provider_id": 20357963, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1490 MEXICO LOOP RD E", "practiceaddress2": null, "practicecity": "O FALLON", "practicestate": "MO", "practicezip9code": 633666015, "telephonenumber": 6369781602, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.78957, "longitude": -90.69859, "is_contracted_for_cba": false}, {"provider_id": 20358011, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5315", "practiceaddress1": "840 W SHERMAN BLVD", "practiceaddress2": null, "practicecity": "MUSKEGON", "practicestate": "MI", "practicezip9code": 494413533, "telephonenumber": 2317598587, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.20522, "longitude": -86.264, "is_contracted_for_cba": false}, {"provider_id": 20314187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 17452", "practiceaddress1": "6931 FM 1960 RD E", "practiceaddress2": null, "practicecity": "HUMBLE", "practicestate": "TX", "practicezip9code": 773462705, "telephonenumber": 2813182238, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.99885, "longitude": -95.17229, "is_contracted_for_cba": false}, {"provider_id": 20334245, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #17022", "practiceaddress1": "28201 DIEHL RD", "practiceaddress2": null, "practicecity": "WARRENVILLE", "practicestate": "IL", "practicezip9code": 605553934, "telephonenumber": 6306575565, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.8015, "longitude": -88.16563, "is_contracted_for_cba": false}, {"provider_id": 20340131, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #03297", "practiceaddress1": "4935 S ARLINGTON AVE", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462373516, "telephonenumber": 3177913822, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.69473, "longitude": -86.06348, "is_contracted_for_cba": false}, {"provider_id": 20313635, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07808", "practiceaddress1": "4805 MEDICAL DR", "practiceaddress2": null, "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 782294301, "telephonenumber": 2106160482, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.51058, "longitude": -98.58089, "is_contracted_for_cba": false}, {"provider_id": 20341853, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09556", "practiceaddress1": "1740 S VICTORIA AVE", "practiceaddress2": null, "practicecity": "VENTURA", "practicestate": "CA", "practicezip9code": 930036592, "telephonenumber": 8056441833, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.25833, "longitude": -119.21083, "is_contracted_for_cba": false}, {"provider_id": 20321927, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03808", "practiceaddress1": "2225 12TH AVE NE", "practiceaddress2": null, "practicecity": "HICKORY", "practicestate": "NC", "practicezip9code": 286013188, "telephonenumber": 8282566456, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.74374, "longitude": -81.29487, "is_contracted_for_cba": false}, {"provider_id": 20342117, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09567", "practiceaddress1": "1835 CLIFF DR", "practiceaddress2": null, "practicecity": "SANTA BARBARA", "practicestate": "CA", "practicezip9code": 931091652, "telephonenumber": 8059628709, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.40131, "longitude": -119.72143, "is_contracted_for_cba": false}, {"provider_id": 20321141, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03508", "practiceaddress1": "762 E CHURCH ST", "practiceaddress2": null, "practicecity": "MARTINSVILLE", "practicestate": "VA", "practicezip9code": 241123107, "telephonenumber": 2766329804, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.68967, "longitude": -79.85496, "is_contracted_for_cba": false}, {"provider_id": 20322125, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03589", "practiceaddress1": "6131 SIX FORKS RD", "practiceaddress2": null, "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276093841, "telephonenumber": 9198475458, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.86418, "longitude": -78.63758, "is_contracted_for_cba": false}, {"provider_id": 20407733, "acceptsassignement": true, "participationbegindate": 1612137600000, "businessname": "FOSTERS PHARMACY, INC.", "practicename": "FOSTERS PHARMACY INC", "practiceaddress1": "207 W HIGH ST", "practiceaddress2": null, "practicecity": "MOUNT VERNON", "practicestate": "OH", "practicezip9code": 430502427, "telephonenumber": 7403920911, "specialitieslist": "Medical Supply Company Other|Certified Other|Pharmacy", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 40.39388, "longitude": -82.48844, "is_contracted_for_cba": false}, {"provider_id": 20341559, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #03069", "practiceaddress1": "451 S REINO RD", "practiceaddress2": null, "practicecity": "NEWBURY PARK", "practicestate": "CA", "practicezip9code": 913204267, "telephonenumber": 8054994006, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.16815, "longitude": -118.95634, "is_contracted_for_cba": false}, {"provider_id": 20333183, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 18048", "practiceaddress1": "800 CARLYLE AVE", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622215509, "telephonenumber": 6182770419, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.51737, "longitude": -89.95154, "is_contracted_for_cba": false}, {"provider_id": 20333243, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #18098", "practiceaddress1": "2642 CHARLES ST", "practiceaddress2": null, "practicecity": "ROCKFORD", "practicestate": "IL", "practicezip9code": 611081671, "telephonenumber": 8154842461, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.25939, "longitude": -89.05389, "is_contracted_for_cba": false}, {"provider_id": 20333129, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "2555 SYCAMORE RD", "practiceaddress2": null, "practicecity": "DEKALB", "practicestate": "IL", "practicezip9code": 601152051, "telephonenumber": 8157876971, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.95371, "longitude": -88.72404, "is_contracted_for_cba": false}, {"provider_id": 20333063, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "7601 KINGERY HWY", "practiceaddress2": null, "practicecity": "WILLOWBROOK", "practicestate": "IL", "practicezip9code": 605275538, "telephonenumber": 6303212081, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.74947, "longitude": -87.94438, "is_contracted_for_cba": false}, {"provider_id": 23282557, "acceptsassignement": false, "participationbegindate": 1611878400000, "businessname": "BRANAC NY LLC", "practicename": "BRANAC NY LLC", "practiceaddress1": "2720 MERMAID AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112242006, "telephonenumber": 7183332525, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.575499316, "longitude": -73.9938842943, "is_contracted_for_cba": false}, {"provider_id": 20336333, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN LOUISIANA CO INC", "practicename": "WALGREENS #5040", "practiceaddress1": "1801 SAINT CHARLES AVE", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701305225, "telephonenumber": 5045618458, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.93616, "longitude": -90.07798, "is_contracted_for_cba": false}, {"provider_id": 20336363, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN LOUISIANA CO INC", "practicename": "WALGREENS #6219", "practiceaddress1": "2636 RYAN ST", "practiceaddress2": null, "practicecity": "LAKE CHARLES", "practicestate": "LA", "practicezip9code": 706017326, "telephonenumber": 3374334178, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.20625, "longitude": -93.21876, "is_contracted_for_cba": false}, {"provider_id": 20363111, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6753", "practiceaddress1": "8045 N LOOP DR", "practiceaddress2": null, "practicecity": "EL PASO", "practicestate": "TX", "practicezip9code": 799153227, "telephonenumber": 9155925849, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 31.72995, "longitude": -106.35006, "is_contracted_for_cba": false}, {"provider_id": 20362817, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5407", "practiceaddress1": "295 MAIN ST", "practiceaddress2": null, "practicecity": "MANCHESTER", "practicestate": "CT", "practicezip9code": 60404128, "telephonenumber": 8606498747, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.78257, "longitude": -72.52273, "is_contracted_for_cba": false}, {"provider_id": 20320637, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07574", "practiceaddress1": "12121 S 226 HWY", "practiceaddress2": null, "practicecity": "SPRUCE PINE", "practicestate": "NC", "practicezip9code": 287778908, "telephonenumber": 8287657076, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.88946, "longitude": -82.06681, "is_contracted_for_cba": false}, {"provider_id": 20320685, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07580", "practiceaddress1": "1180 N BRIGHT LEAF BLVD", "practiceaddress2": null, "practicecity": "SMITHFIELD", "practicestate": "NC", "practicezip9code": 275774228, "telephonenumber": 9199380591, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.51835, "longitude": -78.31689, "is_contracted_for_cba": false}, {"provider_id": 34358894, "acceptsassignement": true, "participationbegindate": 1611360000000, "businessname": "ELLSWORTH FOOT AND ANKLE CLINIC", "practicename": "ELLSWORTH FOOT AND ANKLE CLINIC", "practiceaddress1": "2019 E RIVERSIDE DR", "practiceaddress2": "STE A101", "practicecity": "ST GEORGE", "practicestate": "UT", "practicezip9code": 847908147, "telephonenumber": 8012536886, "specialitieslist": null, "providertypelist": "NURSE PRACTITIONER|PHYSICIAN \u2013 PODIATRY", "supplieslist": "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 37.0989351986, "longitude": -113.5400960006, "is_contracted_for_cba": false}, {"provider_id": 24546606, "acceptsassignement": true, "participationbegindate": 1611360000000, "businessname": "PHARMACY ON BAY STREET INC.", "practicename": "PHARMACY ON BAY STREET INC.", "practiceaddress1": "1209 BAY ST", "practiceaddress2": null, "practicecity": "STATEN ISLAND", "practicestate": "NY", "practicezip9code": 103053121, "telephonenumber": 9292697000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6138105647, "longitude": -74.065756348, "is_contracted_for_cba": false}, {"provider_id": 20341163, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09951", "practiceaddress1": "8063 SAN MIGUEL CANYON RD", "practiceaddress2": null, "practicecity": "SALINAS", "practicestate": "CA", "practicezip9code": 939071244, "telephonenumber": 8316632135, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.80092, "longitude": -121.66519, "is_contracted_for_cba": false}, {"provider_id": 20337191, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #18075", "practiceaddress1": "3700 1ST AVE", "practiceaddress2": null, "practicecity": "EVANSVILLE", "practicestate": "IN", "practicezip9code": 477103324, "telephonenumber": 8124643952, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.01276, "longitude": -87.57429, "is_contracted_for_cba": false}, {"provider_id": 20341133, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONG'S DRUGS #09952", "practiceaddress1": "645 ALEKA LOOP", "practiceaddress2": null, "practicecity": "KAPAA", "practicestate": "HI", "practicezip9code": 967462099, "telephonenumber": 8088224918, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 22.05197, "longitude": -159.33193, "is_contracted_for_cba": false}, {"provider_id": 20320559, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07597", "practiceaddress1": "803 S MAIN ST", "practiceaddress2": null, "practicecity": "LILLINGTON", "practicestate": "NC", "practicezip9code": 275465831, "telephonenumber": 9108935745, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.39818, "longitude": -78.81632, "is_contracted_for_cba": false}, {"provider_id": 20363357, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2524", "practiceaddress1": "337 75TH AVE", "practiceaddress2": null, "practicecity": "ST PETE BEACH", "practicestate": "FL", "practicezip9code": 337061829, "telephonenumber": 7273677657, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.74325, "longitude": -82.74985, "is_contracted_for_cba": false}, {"provider_id": 20363369, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3828", "practiceaddress1": "2110 SE OCEAN BLVD", "practiceaddress2": null, "practicecity": "STUART", "practicestate": "FL", "practicezip9code": 349963306, "telephonenumber": 7722831045, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.19716, "longitude": -80.22354, "is_contracted_for_cba": false}, {"provider_id": 20358293, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6605 4TH ST NW", "practiceaddress2": null, "practicecity": "LOS RANCHOS", "practicestate": "NM", "practicezip9code": 871076112, "telephonenumber": 5053459059, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.15326, "longitude": -106.63855, "is_contracted_for_cba": false}, {"provider_id": 20408069, "acceptsassignement": true, "participationbegindate": 1611187200000, "businessname": "CAREFLUENT CONNECT LLC", "practicename": "CAREFLUENT CONNECT", "practiceaddress1": "60 ATHLETES WAY N", "practiceaddress2": "STE 300", "practicecity": "MT JULIET", "practicestate": "TN", "practicezip9code": 371224440, "telephonenumber": 6153223010, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist|MSC With Orthotic Personnel|Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 36.1572, "longitude": -86.50497, "is_contracted_for_cba": false}, {"provider_id": 20437643, "acceptsassignement": true, "participationbegindate": 1546300800000, "businessname": "GERMAN DOBSON CVS LLC", "practicename": "GERMAN DOBSON CVS LLC", "practiceaddress1": "3931 S GILBERT RD", "practiceaddress2": null, "practicecity": "GILBERT", "practicestate": "AZ", "practicezip9code": 852972004, "telephonenumber": 4802810202, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.27812, "longitude": -111.78858, "is_contracted_for_cba": false}, {"provider_id": 20336285, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN LOUISIANA CO INC", "practicename": "WALGREEN LOUISIANA CO, INC", "practiceaddress1": "718 S CARROLLTON AVE", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701181010, "telephonenumber": 5048617864, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.94431, "longitude": -90.13321, "is_contracted_for_cba": false}, {"provider_id": 20341949, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09399", "practiceaddress1": "29412 AUBERRY RD", "practiceaddress2": null, "practicecity": "PRATHER", "practicestate": "CA", "practicezip9code": 936519719, "telephonenumber": 5598554220, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.00077, "longitude": -119.51904, "is_contracted_for_cba": false}, {"provider_id": 20341229, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09975", "practiceaddress1": "4400 COFFEE RD", "practiceaddress2": null, "practicecity": "BAKERSFIELD", "practicestate": "CA", "practicezip9code": 933085032, "telephonenumber": 6615881060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.39771, "longitude": -119.09211, "is_contracted_for_cba": false}, {"provider_id": 20333111, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #16362", "practiceaddress1": "2102 N PROSPECT AVE", "practiceaddress2": null, "practicecity": "CHAMPAIGN", "practicestate": "IL", "practicezip9code": 618221231, "telephonenumber": 2173553345, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.14102, "longitude": -88.25778, "is_contracted_for_cba": false}, {"provider_id": 20334317, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #10052", "practiceaddress1": "1515 SHERIDAN RD", "practiceaddress2": null, "practicecity": "WILMETTE", "practicestate": "IL", "practicezip9code": 600911822, "telephonenumber": 8472516223, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.0867, "longitude": -87.70001, "is_contracted_for_cba": false}, {"provider_id": 20333261, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #17068", "practiceaddress1": "355 W MOUND RD", "practiceaddress2": null, "practicecity": "DECATUR", "practicestate": "IL", "practicezip9code": 625261965, "telephonenumber": 2178756550, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.89109, "longitude": -88.95934, "is_contracted_for_cba": false}, {"provider_id": 20384435, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #16292", "practiceaddress1": "99 HIGHWAY 37 W", "practiceaddress2": "STE 100", "practicecity": "TOMS RIVER", "practicestate": "NJ", "practicezip9code": 87556423, "telephonenumber": 7327368590, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.96143, "longitude": -74.21328, "is_contracted_for_cba": false}, {"provider_id": 20437715, "acceptsassignement": true, "participationbegindate": 1546300800000, "businessname": "GERMAN DOBSON CVS LLC", "practicename": "GERMAN DOBSON CVS LLC", "practiceaddress1": "995 S COTTON LN", "practiceaddress2": null, "practicecity": "GOODYEAR", "practicestate": "AZ", "practicezip9code": 853384604, "telephonenumber": 4806273276, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.43856, "longitude": -112.42671, "is_contracted_for_cba": false}, {"provider_id": 20325845, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARIZONA CVS STORES LLC", "practicename": "CVS PHARMACY #9343", "practiceaddress1": "506 MILLER VALLEY RD", "practiceaddress2": null, "practicecity": "PRESCOTT", "practicestate": "AZ", "practicezip9code": 863012314, "telephonenumber": 9284420312, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.54947, "longitude": -112.47862, "is_contracted_for_cba": false}, {"provider_id": 20334275, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "PHARMACY #16325", "practiceaddress1": "401 W IRVING PARK ROAD", "practiceaddress2": null, "practicecity": "WOOD DALE", "practicestate": "IL", "practicezip9code": 601911338, "telephonenumber": 6305945520, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.9658, "longitude": -87.9931, "is_contracted_for_cba": false}, {"provider_id": 20333051, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #17396", "practiceaddress1": "5601 BELLEVILLE CROSSING ST", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622263104, "telephonenumber": 6183101902, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.5238, "longitude": -90.03148, "is_contracted_for_cba": false}, {"provider_id": 20387609, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15446", "practiceaddress1": "118 W CONSTANCE RD", "practiceaddress2": null, "practicecity": "SUFFOLK", "practicestate": "VA", "practicezip9code": 234344411, "telephonenumber": 7575143451, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.73773, "longitude": -76.58296, "is_contracted_for_cba": false}, {"provider_id": 20384591, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS PHARMACY #16512", "practiceaddress1": "3462 JEROME AVE", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104671002, "telephonenumber": 7185470077, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.88234, "longitude": -73.88152, "is_contracted_for_cba": false}, {"provider_id": 20320979, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04655", "practiceaddress1": "401 S MAIN STREET", "practiceaddress2": null, "practicecity": "GRAHAM", "practicestate": "NC", "practicezip9code": 272533303, "telephonenumber": 3362299191, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.06261, "longitude": -79.40068, "is_contracted_for_cba": false}, {"provider_id": 20443901, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WAL-MART PHARMACY 10-4244", "practiceaddress1": "1303 CHARLES ST", "practiceaddress2": null, "practicecity": "PARK RAPIDS", "practicestate": "MN", "practicezip9code": 564701241, "telephonenumber": 2187320329, "specialitieslist": "Pharmacy|Optician", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 46.92625, "longitude": -95.04928, "is_contracted_for_cba": false}, {"provider_id": 20438237, "acceptsassignement": true, "participationbegindate": 1546300800000, "businessname": "GERMAN DOBSON CVS LLC", "practicename": "CVS PHARMACY #05029", "practiceaddress1": "9230 E BROADWAY RD", "practiceaddress2": null, "practicecity": "MESA", "practicestate": "AZ", "practicezip9code": 852082426, "telephonenumber": 4809863004, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.4097, "longitude": -111.63108, "is_contracted_for_cba": false}, {"provider_id": 20358449, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7374", "practiceaddress1": "4423 WESTERN AVE", "practiceaddress2": null, "practicecity": "KNOXVILLE", "practicestate": "TN", "practicezip9code": 379214306, "telephonenumber": 8659714234, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.97274, "longitude": -83.98742, "is_contracted_for_cba": false}, {"provider_id": 20384327, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13588", "practiceaddress1": "4201 HIGHWAY 71 E", "practiceaddress2": null, "practicecity": "BASTROP", "practicestate": "TX", "practicezip9code": 786027405, "telephonenumber": 5123081239, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.09142, "longitude": -97.28582, "is_contracted_for_cba": false}, {"provider_id": 20384639, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15391", "practiceaddress1": "34300 WOODWARD AVE", "practiceaddress2": null, "practicecity": "BIRMINGHAM", "practicestate": "MI", "practicezip9code": 480090919, "telephonenumber": 2485938450, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.54184, "longitude": -83.20834, "is_contracted_for_cba": false}, {"provider_id": 20388509, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15121", "practiceaddress1": "141 CARMICHAEL RD", "practiceaddress2": null, "practicecity": "HUDSON", "practicestate": "WI", "practicezip9code": 540167716, "telephonenumber": 7153810183, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.96737, "longitude": -92.72117, "is_contracted_for_cba": false}, {"provider_id": 20388329, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6703", "practiceaddress1": "16750 W 159TH ST", "practiceaddress2": null, "practicecity": "LOCKPORT", "practicestate": "IL", "practicezip9code": 604417968, "telephonenumber": 8158341351, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.59789, "longitude": -88.02561, "is_contracted_for_cba": false}, {"provider_id": 20388887, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS # 15022", "practiceaddress1": "1440 PINE GROVE RD", "practiceaddress2": null, "practicecity": "STEAMBOAT SPRINGS", "practicestate": "CO", "practicezip9code": 80487, "telephonenumber": 9708791968, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.46532, "longitude": -106.82596, "is_contracted_for_cba": false}, {"provider_id": 20314493, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17318", "practiceaddress1": "5270 S STATE HWY 360", "practiceaddress2": null, "practicecity": "GRAND PRAIRIE", "practicestate": "TX", "practicezip9code": 750528307, "telephonenumber": 4693482101, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.64473, "longitude": -97.0619, "is_contracted_for_cba": false}, {"provider_id": 20314517, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10631", "practiceaddress1": "3711 W DAVIS ST", "practiceaddress2": null, "practicecity": "CONROE", "practicestate": "TX", "practicezip9code": 773041835, "telephonenumber": 9365231613, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.325, "longitude": -95.49629, "is_contracted_for_cba": false}, {"provider_id": 20362769, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6715", "practiceaddress1": "1305 W UNIVERSITY BLVD", "practiceaddress2": null, "practicecity": "ODESSA", "practicestate": "TX", "practicezip9code": 797647121, "telephonenumber": 4325800166, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 31.86437, "longitude": -102.39867, "is_contracted_for_cba": false}, {"provider_id": 20319431, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 04335", "practiceaddress1": "1 MCWHIRT LOOP", "practiceaddress2": null, "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224061082, "telephonenumber": 5403712627, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.35408, "longitude": -77.51187, "is_contracted_for_cba": false}, {"provider_id": 20318675, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05750", "practiceaddress1": "1379 NORTH FREDERICK PIKE", "practiceaddress2": null, "practicecity": "WINCHESTER", "practicestate": "VA", "practicezip9code": 226038693, "telephonenumber": 5406629777, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.20786, "longitude": -78.17422, "is_contracted_for_cba": false}, {"provider_id": 20331815, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "EVERGREEN PROSTHETICS AND ORTHOTICS LLC", "practicename": "EVERGREEN PROSTHETICS & ORTHOTICS", "practiceaddress1": "2120 EXCHANGE ST", "practiceaddress2": "SUITE 204", "practicecity": "ASTORIA", "practicestate": "OR", "practicezip9code": 971033365, "telephonenumber": 8885745934, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 46.18863, "longitude": -123.81811, "is_contracted_for_cba": false}, {"provider_id": 20441375, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WALMART PHARMACY 10-3525", "practiceaddress1": "16502 MERIDIAN E", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983752515, "telephonenumber": 2534461754, "specialitieslist": "Pharmacy|Optician", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 47.10624, "longitude": -122.29355, "is_contracted_for_cba": false}, {"provider_id": 20441447, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WAL MART PHARMACY 10-3848", "practiceaddress1": "2228 W 1700 S", "practiceaddress2": null, "practicecity": "SYRACUSE", "practicestate": "UT", "practicezip9code": 840757126, "telephonenumber": 8017759880, "specialitieslist": "Pharmacy|Optician", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 41.08927, "longitude": -112.06961, "is_contracted_for_cba": false}, {"provider_id": 20443847, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WALMART PHARMACY 10-4336", "practiceaddress1": "12900 W THUNDERBIRD RD", "practiceaddress2": null, "practicecity": "EL MIRAGE", "practicestate": "AZ", "practicezip9code": 853355945, "telephonenumber": 6235838725, "specialitieslist": "Pharmacy|Optician", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Prosthetic Lenses: Conventional Eyeglasses|Enteral Nutrients|Surgical Dressings", "latitude": 33.60914, "longitude": -112.33859, "is_contracted_for_cba": false}, {"provider_id": 20441549, "acceptsassignement": false, "participationbegindate": 1546300800000, "businessname": "WALMART INC", "practicename": "WAL MART PHARMACY 10-4249", "practiceaddress1": "583 COMMERCE DR", "practiceaddress2": null, "practicecity": "SMELTERVILLE", "practicestate": "ID", "practicezip9code": 83868, "telephonenumber": 2087832739, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Ostomy Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 47.53709, "longitude": -116.19058, "is_contracted_for_cba": false}, {"provider_id": 20381633, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS", "practiceaddress1": "403 WILLIAM FLOYD PKWY", "practiceaddress2": null, "practicecity": "SHIRLEY", "practicestate": "NY", "practicezip9code": 119673473, "telephonenumber": 6313990700, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.78203, "longitude": -72.86449, "is_contracted_for_cba": false}, {"provider_id": 20385725, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #15185", "practiceaddress1": "600 WASHINGTON BLVD S", "practiceaddress2": null, "practicecity": "LAUREL", "practicestate": "MD", "practicezip9code": 207074636, "telephonenumber": 3017250236, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.09944, "longitude": -76.84832, "is_contracted_for_cba": false}, {"provider_id": 20316899, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06741", "practiceaddress1": "910 W DAVIS ST", "practiceaddress2": null, "practicecity": "CONROE", "practicestate": "TX", "practicezip9code": 773012709, "telephonenumber": 9365391849, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.31369, "longitude": -95.46844, "is_contracted_for_cba": false}, {"provider_id": 20384039, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12576", "practiceaddress1": "15318 ROY ROGERS DR", "practiceaddress2": null, "practicecity": "VICTORVILLE", "practicestate": "CA", "practicezip9code": 923942160, "telephonenumber": 7609527555, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.52157, "longitude": -117.32716, "is_contracted_for_cba": false}, {"provider_id": 20384033, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11500", "practiceaddress1": "15990 ANNAPOLIS RD", "practiceaddress2": null, "practicecity": "BOWIE", "practicestate": "MD", "practicezip9code": 207153041, "telephonenumber": 3013522340, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.98217, "longitude": -76.72859, "is_contracted_for_cba": false}, {"provider_id": 20384207, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #13456", "practiceaddress1": "1303 WEHRLI RD", "practiceaddress2": null, "practicecity": "NAPERVILLE", "practicestate": "IL", "practicezip9code": 605651752, "telephonenumber": 6304280496, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.74361, "longitude": -88.09262, "is_contracted_for_cba": false}, {"provider_id": 20388773, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7520", "practiceaddress1": "404 AVE BARBOSA ESQ SICILIA BO RIOS PIEDRAS", "practiceaddress2": null, "practicecity": "SAN JUAN", "practicestate": "PR", "practicezip9code": 917, "telephonenumber": 7879190270, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.41754, "longitude": -66.04912, "is_contracted_for_cba": false}, {"provider_id": 20388917, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS SPECIALTY PHARMACY #15312", "practiceaddress1": "901 S RANCHO DR", "practiceaddress2": "STE 20", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891063815, "telephonenumber": 7024717828, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.1609, "longitude": -115.17261, "is_contracted_for_cba": false}, {"provider_id": 20356115, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10682", "practiceaddress1": "109 N MARQUETTE RD", "practiceaddress2": null, "practicecity": "PRAIRIE DU CHIEN", "practicestate": "WI", "practicezip9code": 538211512, "telephonenumber": 6083260581, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.05038, "longitude": -91.14104, "is_contracted_for_cba": false}, {"provider_id": 20355485, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5521", "practiceaddress1": "12400 PEMBROKE RD", "practiceaddress2": null, "practicecity": "MIRAMAR", "practicestate": "FL", "practicezip9code": 330272505, "telephonenumber": 9544309510, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 25.99266, "longitude": -80.31272, "is_contracted_for_cba": false}], "stage_runningstate": "executed", "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}, {"_id": "678abdf1bdb869a10b24512d", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/Medical-Equipment-Suppliers1.csv", "in": ["678abdf1bdb869a10b24512c"], "out": [], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "MedEquipmentSuppliers_AutoML", "comment": "", "pipeline_id": "678abdf1bdb869a10b245128", "sub_type": "Automl", "stage_type": "ml", "mlCategory": "Classification", "stage_attributes": {"model_type": "classification", "label": "acceptsassignement", "optimizeBy": "accuracy", "features": ["provider_id", "practicezip9code", "telephonenumber", "latitude", "longitude", "is_contracted_for_cba", "participationbegindate_dayofmonth", "participationbegindate_month", "participationbegindate_year", "businessname_stringindexer", "practicename_stringindexer", "practiceaddress1_stringindexer", "practiceaddress2_stringindexer", "practicecity_stringindexer", "practicestate_stringindexer", "specialitieslist_stringindexer", "providertypelist_stringindexer", "supplieslist_stringindexer"], "percentage": "70", "executionTime": "10", "sampling_value": "over", "sampling": "1", "run_id": "", "server_url": "/nexusMax/NexusMaxPlatform/uploads/platform/"}, "status": "new", "position": {"x": 187, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/ml-engine/classification.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "aml", "text": "Classification-AutoML", "slug": "auto-ml", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "root": {"dataTooltipPosition": "bottom", "dataTooltipPositionSelector": ".joint-stencil", "mode": "auto"}, "body": {"fill": "transparent", "stroke": "#4295d1", "strokeWidth": 2, "strokeDasharray": "0"}, "dbValues": {"model_type": "", "label": "", "features": []}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245172", "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245173", "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245174", "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245175", "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245176", "field": "latitude", "alias": "latitude", "type": "real", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245177", "field": "longitude", "alias": "longitude", "type": "real", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245178", "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245179", "field": "participationbegindate_dayofmonth", "alias": "participationbegindate_dayofmonth", "type": "numeric", "position": "7", "generated": "true"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24517a", "field": "participationbegindate_month", "alias": "participationbegindate_month", "type": "numeric", "position": "8", "generated": "true"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24517b", "field": "participationbegindate_year", "alias": "participationbegindate_year", "type": "numeric", "position": "9", "generated": "true"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24517c", "field": "businessname_stringindexer", "alias": "businessname_stringindexer", "type": "real", "position": "10"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24517d", "field": "practicename_stringindexer", "alias": "practicename_stringindexer", "type": "real", "position": "11"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24517e", "field": "practiceaddress1_stringindexer", "alias": "practiceaddress1_stringindexer", "type": "real", "position": "12"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24517f", "field": "practiceaddress2_stringindexer", "alias": "practiceaddress2_stringindexer", "type": "real", "position": "13"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245180", "field": "practicecity_stringindexer", "alias": "practicecity_stringindexer", "type": "real", "position": "14"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245181", "field": "practicestate_stringindexer", "alias": "practicestate_stringindexer", "type": "real", "position": "15"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245182", "field": "specialitieslist_stringindexer", "alias": "specialitieslist_stringindexer", "type": "real", "position": "16"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245183", "field": "providertypelist_stringindexer", "alias": "providertypelist_stringindexer", "type": "numeric", "position": "17"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245184", "field": "supplieslist_stringindexer", "alias": "supplieslist_stringindexer", "type": "real", "position": "18"}], "actual_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245161", "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245162", "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245163", "field": "participationbegindate", "alias": "participationbegindate", "type": "numeric", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245164", "field": "businessname", "alias": "businessname", "type": "String", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245165", "field": "practicename", "alias": "practicename", "type": "String", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245166", "field": "practiceaddress1", "alias": "practiceaddress1", "type": "String", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245167", "field": "practiceaddress2", "alias": "practiceaddress2", "type": "String", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245168", "field": "practicecity", "alias": "practicecity", "type": "String", "position": "7"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245169", "field": "practicestate", "alias": "practicestate", "type": "String", "position": "8"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24516a", "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": "9"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24516b", "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": "10"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24516c", "field": "specialitieslist", "alias": "specialitieslist", "type": "String", "position": "11"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24516d", "field": "providertypelist", "alias": "providertypelist", "type": "String", "position": "12"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24516e", "field": "supplieslist", "alias": "supplieslist", "type": "String", "position": "13"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b24516f", "field": "latitude", "alias": "latitude", "type": "real", "position": "14"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245170", "field": "longitude", "alias": "longitude", "type": "real", "position": "15"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "678abe8abdb869a10b245171", "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": "16"}], "selected_schema": [], "created_at": "2025-01-17 20:30:41.410000", "originalcount": 59566, "samplecount": 6019, "samplefile": "/FileStore/platform/sampleData/678abdf1bdb869a10b24512b/part-00000-df9f8a87-a225-43b8-9bee-ad4fb0750247-c000.csv", "joinSchema": [], "updated_at": "2025-01-17 20:34:23.724000", "__v": 0, "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": {}}}]